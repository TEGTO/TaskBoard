{
    "pipes": [],
    "interfaces": [
        {
            "name": "ActivityDescriptions",
            "id": "interface-ActivityDescriptions-1236bbdc3b01d45a82fe4a3ed6923442dbba9ef62d1ac311088f6ff878c0c33faa5162cd4768971b568b0d9c5ba2f07464b41f21b774ea83c3345a6324685609",
            "file": "src/app/modules/action-history/services/activity-description-formatter/activity-description-formatter-service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BoardTask, BoardTaskList } from '../../../shared';\r\n\r\nexport interface ActivityDescriptions {\r\n  activityDescription: string;\r\n  activityTaskDescription: string;\r\n}\r\nexport interface TaskUpdateActivityData {\r\n  curentTask: BoardTask,\r\n  prevTask: BoardTask,\r\n  taskName_Activity: string,\r\n  taskName_TaskActivity: string,\r\n  updatedElemets: ActivityDescriptions[]\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport abstract class ActivityDescriptionFormatterService {\r\n\r\n  abstract taskCreated(task: BoardTask): ActivityDescriptions;\r\n  abstract taskUpdated(curentTask: BoardTask, prevTask: BoardTask): Promise<ActivityDescriptions[]>;\r\n  abstract taskDeleted(task: BoardTask, taskList: BoardTaskList): {\r\n    activityDescription: string;\r\n    activityTaskDescription: string;\r\n  };\r\n  abstract taskListCreated(taskList: BoardTaskList): string;\r\n  abstract taskListUpdate(currentTaskList: BoardTaskList, prevTaskList: BoardTaskList): string[];\r\n  abstract taskListDeleted(taskList: BoardTaskList): string;\r\n}\r\n",
            "properties": [
                {
                    "name": "activityDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "activityTaskDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ActivityFormatConfig",
            "id": "interface-ActivityFormatConfig-c9132e4d49f6f6e257a9521a9dbdbe79473e950f92360b8fe2869adb93a00f352073c482744542f77ae78a4edb2e39851b2692bcd01ca06e5cfc9528bdf01010",
            "file": "src/app/modules/action-history/configs/activity-format-config/activity-format-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ActivityFormatConfig {\r\n    mainNameStyleBegin: string;\r\n    mainNameStyleEnd: string;\r\n    secondaryNameStyleBegin: string;\r\n    secondaryNameStyleEnd: string;\r\n    maxNameLength: number;\r\n    maxNameLengthReplacingString: string;\r\n}",
            "properties": [
                {
                    "name": "mainNameStyleBegin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "mainNameStyleEnd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "maxNameLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "maxNameLengthReplacingString",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "secondaryNameStyleBegin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "secondaryNameStyleEnd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ActivityPopupData",
            "id": "interface-ActivityPopupData-894213c070376f07d6ab22b34979825f789d1182b3e0af33e3ad6caec30cbb5e50464532874e9c4afe1c1f98808c562e262908dc3bb21390c0141aee1d0d0637",
            "file": "src/app/modules/action-history/util/activity-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Board, BoardTask, BoardTaskList } from \"../../shared\";\r\n\r\nexport interface ActivityPopupData {\r\n    board: Board;\r\n}\r\nexport interface TaskActivityData {\r\n    task: BoardTask;\r\n    prevTask: BoardTask | undefined;\r\n    taskList: BoardTaskList | undefined;\r\n    board: Board;\r\n}\r\nexport interface TaskListActivityData {\r\n    taskList: BoardTaskList;\r\n    prevTaskList: BoardTaskList | undefined;\r\n    board: Board;\r\n}",
            "properties": [
                {
                    "name": "board",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Board",
            "id": "interface-Board-008d94836b6f4fcffb676493466d2fb7ac38c0448824a12016f9b87ab7ad3586eecc2680add8b0842da37d5824d345ec621fb9b316c831b06f4161bc90e7f307",
            "file": "src/app/modules/shared/models/board.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Board {\r\n    id: string;\r\n    userId: string;\r\n    creationTime: Date;\r\n    name?: string;\r\n}\r\nexport function getDefaultBoard() {\r\n    const board: Board = {\r\n        id: \"\",\r\n        userId: \"\",\r\n        creationTime: new Date(),\r\n        name: \"\",\r\n    };\r\n    return board;\r\n}\r\nexport function copyBoardValues(dest: Board, copied: Board) {\r\n    if (dest && copied) {\r\n        dest.id = copied?.id;\r\n        dest.userId = copied?.userId;\r\n        dest.creationTime = copied?.creationTime;\r\n        dest.name = copied?.name;\r\n    }\r\n}",
            "properties": [
                {
                    "name": "creationTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BoardActivity",
            "id": "interface-BoardActivity-67be2db3131b3a88ed8029d075117dfeea5ffd6a5b62234c01013ceb3e5e9670bb922354235c5255b9e2b969418ab486832326b85eaa4eb69e06ce6e59173309",
            "file": "src/app/modules/shared/models/board-activity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BoardActivity {\r\n    id: string;\r\n    boardId: string;\r\n    activityTime: Date;\r\n    description?: string;\r\n}",
            "properties": [
                {
                    "name": "activityTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BoardState",
            "id": "interface-BoardState-a5f84501db20ec826e3102793b1f84839ece756a00f8cf76237e6377741fa3844985c7f5c58ef8beefe05e5964d1612cc3b89ab6c5addeefd0c3d8858981ed32",
            "file": "src/app/modules/task-board/store/board/board.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from \"@ngrx/store\";\r\nimport { Board } from \"../../../shared\";\r\nimport { createBoardFailure, createBoardSuccess, deleteBoardFailure, deleteBoardSuccess, getBoardsByUserIdFailure, getBoardsByUserIdSuccess, updateBoardFailure, updateBoardSuccess } from \"../../index\";\r\n\r\nexport interface BoardState {\r\n    boards: Board[];\r\n    error: any;\r\n}\r\nconst initialState: BoardState = {\r\n    boards: [],\r\n    error: null\r\n};\r\n\r\nexport const boardReducer = createReducer(\r\n    initialState,\r\n    on(getBoardsByUserIdSuccess, (state, { boards }) => ({\r\n        ...state,\r\n        boards,\r\n        error: null\r\n    })),\r\n    on(getBoardsByUserIdFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(createBoardSuccess, (state, { board }) => ({\r\n        ...state,\r\n        boards: [...state.boards, board],\r\n        error: null\r\n    })),\r\n    on(createBoardFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(updateBoardSuccess, (state, { board }) => ({\r\n        ...state,\r\n        boards: state.boards.map(b => b.id === board.id ? board : b),\r\n        error: null\r\n    })),\r\n    on(updateBoardFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(deleteBoardSuccess, (state, { boardId }) => ({\r\n        ...state,\r\n        boards: state.boards.filter(board => board.id !== boardId),\r\n        error: null\r\n    })),\r\n    on(deleteBoardFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    }))\r\n);",
            "properties": [
                {
                    "name": "boards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BoardTask",
            "id": "interface-BoardTask-5a22f4ba03c854cca57fc55cff121ee9dbf30a5e0a5817500658c63124d715b041724dffaebd9e02c8ef1beef323ee6f1f81c4b6cbba7ca17a45f8d50817f80a",
            "file": "src/app/modules/shared/models/board-task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Priority } from \"../index\";\r\n\r\nexport interface BoardTask {\r\n    id: string;\r\n    boardTaskListId: string;\r\n    creationTime: Date;\r\n    dueTime?: Date;\r\n    name?: string;\r\n    description?: string;\r\n    priority: Priority;\r\n}\r\nexport function getDefaultBoardTask() {\r\n    const task: BoardTask = {\r\n        id: '',\r\n        name: '',\r\n        boardTaskListId: '',\r\n        creationTime: new Date(),\r\n        priority: Priority.Low,\r\n        description: '',\r\n    };\r\n    return task;\r\n}\r\nexport function copyTaskValues(dest: BoardTask, toCopy: BoardTask) {\r\n    if (dest && toCopy) {\r\n        dest.id = toCopy.id;\r\n        dest.boardTaskListId = toCopy.boardTaskListId;\r\n        dest.creationTime = toCopy.creationTime;\r\n        dest.dueTime = toCopy?.dueTime;\r\n        dest.name = toCopy?.name;\r\n        dest.description = toCopy?.description;\r\n        dest.priority = toCopy.priority;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "boardTaskListId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "creationTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "dueTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Priority",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BoardTaskActivity",
            "id": "interface-BoardTaskActivity-2b94b4cfc130ff465fb7739b485f4dc4c2b7f896149a5258c4512a9503fde3eb3da1c8e5fef7467bb7a9666bdcb571e50d80222e7741526ba8625896aeaf640e",
            "file": "src/app/modules/shared/models/board-task-activity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BoardTaskActivity {\r\n    id: string;\r\n    boardTaskId: string;\r\n    activityTime: Date;\r\n    description?: string;\r\n}",
            "properties": [
                {
                    "name": "activityTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "boardTaskId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BoardTaskList",
            "id": "interface-BoardTaskList-22d402a560ad5f74ad9dfacefeedb8f19a27f29f0e50921ef673cd746e79e9824f1073024d114c9e7d2340e58b9a55c1a65971d60a932162071d14750ff01c92",
            "file": "src/app/modules/shared/models/board-task-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BoardTask } from \"./board-task.model\";\r\n\r\nexport interface BoardTaskList {\r\n    id: string;\r\n    boardId: string;\r\n    creationTime: Date;\r\n    name?: string;\r\n    boardTasks: BoardTask[];\r\n}\r\nexport function getDefaultBoardTaskList() {\r\n    const taskList: BoardTaskList = {\r\n        id: \"\",\r\n        boardId: \"\",\r\n        creationTime: new Date(),\r\n        name: \"\",\r\n        boardTasks: []\r\n    };\r\n    return taskList;\r\n}\r\nexport function copyTaskListValues(dest: BoardTaskList, copied: BoardTaskList) {\r\n    if (dest && copied) {\r\n        dest.id = copied?.id;\r\n        dest.boardId = copied?.boardId;\r\n        dest.creationTime = copied?.creationTime;\r\n        dest.name = copied?.name;\r\n        dest.boardTasks = copied?.boardTasks;\r\n    }\r\n}",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "boardTasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTask[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "creationTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateActivityData",
            "id": "interface-CreateActivityData-70a207c87f10adaa4a0de4b8018f4c561ef409205a6be8aa42f8014e7391b250457493ee28e7a0540000bf9c5d0b908b2e234bed914d0d0de9c655f4d9a3f9c5",
            "file": "src/app/modules/action-history/services/acitvity-service/activity-controller.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivityApiService, ActivityType, Board, BoardActivity, BoardTask, BoardTaskActivity, BoardTaskList, TaskActivityApiService } from '../../../shared';\r\nimport { ActivityDescriptionFormatterService, ActivityDescriptions, TaskActivityData, TaskListActivityData } from '../../index';\r\nimport { ActivityService } from './activity-service';\r\n\r\ninterface CreateActivityData {\r\n  task: BoardTask | undefined,\r\n  descriptions: ActivityDescriptions,\r\n  board: Board\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityControllerService extends ActivityService {\r\n\r\n  constructor(\r\n    private activityApi: ActivityApiService,\r\n    private takActivityApi: TaskActivityApiService,\r\n    private descriptionFormatter: ActivityDescriptionFormatterService) {\r\n    super();\r\n  }\r\n\r\n  getTaskActivitiesByTaskId(taskId: string) {\r\n    return this.takActivityApi.getTaskActivitiesByTaskId(taskId);\r\n  }\r\n  getBoardActivitiesOnPageByBoardId(id: string, page: number, amountOnPage: number) {\r\n    return this.activityApi.getBoardActivitiesOnPageByBoardId(id, page, amountOnPage);\r\n  }\r\n  getBoardActivityAmountByBoardId(id: string) {\r\n    return this.activityApi.getBoardActivitiesAmountByBoardId(id);\r\n  }\r\n  async createTaskActivity(activityType: ActivityType, taskActivityData: TaskActivityData) {\r\n    try {\r\n      switch (activityType) {\r\n        case ActivityType.Create:\r\n          this.createTaskActivity_Create(taskActivityData.task, taskActivityData.board);\r\n          break;\r\n        case ActivityType.Update:\r\n          if (!taskActivityData.prevTask)\r\n            throw new Error('To create update activity, define previous task data!');\r\n          await this.createTaskActivity_Update(taskActivityData.task, taskActivityData.prevTask, taskActivityData.board);\r\n          break;\r\n        case ActivityType.Delete:\r\n          if (!taskActivityData.taskList)\r\n            throw new Error('To create delete activity, define task list data!');\r\n          this.createTaskActivity_Delete(taskActivityData.task, taskActivityData.taskList, taskActivityData.board);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  createTaskListActivity(activityType: ActivityType, listActivityData: TaskListActivityData) {\r\n    try {\r\n      switch (activityType) {\r\n        case ActivityType.Create:\r\n          this.createListActivity_Create(listActivityData.taskList, listActivityData.board);\r\n          break;\r\n        case ActivityType.Update:\r\n          if (!listActivityData.prevTaskList)\r\n            throw new Error('To create update activity, define previous task list data!');\r\n          this.createListActivity_Update(listActivityData.taskList, listActivityData.prevTaskList, listActivityData.board);\r\n          break;\r\n        case ActivityType.Delete:\r\n          this.createListActivity_Delete(listActivityData.taskList, listActivityData.board);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  private createTaskActivity_Create(task: BoardTask, board: Board) {\r\n    var descriptions = this.descriptionFormatter.taskCreated(task)\r\n    var data = this.getCreateActivityData(task, descriptions.activityDescription, descriptions.activityTaskDescription, board);\r\n    this.createBoardActivity(data);\r\n    this.createBoardTaskActivity(data);\r\n  }\r\n  private async createTaskActivity_Update(curentTask: BoardTask, prevTask: BoardTask, board: Board) {\r\n    var descriptions = await this.descriptionFormatter.taskUpdated(curentTask, prevTask);\r\n    for (var i = 0; i < descriptions.length; i++) {\r\n      var data = this.getCreateActivityData(curentTask, descriptions[i].activityDescription, descriptions[i].activityTaskDescription, board);\r\n      this.createBoardActivity(data);\r\n      this.createBoardTaskActivity(data);\r\n    }\r\n  }\r\n  private createTaskActivity_Delete(task: BoardTask, taskList: BoardTaskList, board: Board) {\r\n    var descriptions = this.descriptionFormatter.taskDeleted(task, taskList)\r\n    var data = this.getCreateActivityData(task, descriptions.activityDescription, descriptions.activityTaskDescription, board);\r\n    this.createBoardActivity(data);\r\n  }\r\n  private createListActivity_Create(taskList: BoardTaskList, board: Board) {\r\n    var description = this.descriptionFormatter.taskListCreated(taskList)\r\n    var data = this.getCreateActivityData(undefined, description, \"\", board);\r\n    this.createBoardActivity(data);\r\n  }\r\n  private createListActivity_Update(currentTaskList: BoardTaskList, prevTaskList: BoardTaskList, board: Board) {\r\n    var descriptions = this.descriptionFormatter.taskListUpdate(currentTaskList, prevTaskList)\r\n    for (var i = 0; i < descriptions.length; i++) {\r\n      var data = this.getCreateActivityData(undefined, descriptions[i], \"\", board);\r\n      this.createBoardActivity(data);\r\n    }\r\n  }\r\n  private createListActivity_Delete(taskList: BoardTaskList, board: Board) {\r\n    var description = this.descriptionFormatter.taskListDeleted(taskList)\r\n    var data = this.getCreateActivityData(undefined, description, \"\", board);\r\n    this.createBoardActivity(data);\r\n  }\r\n  private createBoardActivity(createActivityData: CreateActivityData): void {\r\n    const boardActivity: BoardActivity = {\r\n      id: \"\",\r\n      boardId: createActivityData.board.id,\r\n      activityTime: new Date(),\r\n      description: createActivityData.descriptions.activityDescription\r\n    };\r\n    this.activityApi.createActivity(boardActivity).subscribe();\r\n  }\r\n  private createBoardTaskActivity(createActivityData: CreateActivityData) {\r\n    const boardTaskActivity: BoardTaskActivity = {\r\n      id: \"\",\r\n      boardTaskId: createActivityData.task!.id,\r\n      activityTime: new Date(),\r\n      description: createActivityData.descriptions.activityTaskDescription\r\n    };\r\n    this.takActivityApi.createTaskActivity(boardTaskActivity).subscribe();\r\n  }\r\n  private getCreateActivityData(task: BoardTask | undefined, activityDescription: string, taskActivityDescription: string, board: Board) {\r\n    var descriptions: ActivityDescriptions = { activityDescription: activityDescription, activityTaskDescription: taskActivityDescription };\r\n    var data: CreateActivityData = { task: task, descriptions: descriptions, board: board };\r\n    return data;\r\n  }\r\n}",
            "properties": [
                {
                    "name": "board",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "descriptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivityDescriptions",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTask | undefined",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DateConfig",
            "id": "interface-DateConfig-27964777fc01a5eaf8ab306dfa8c9719751f961370bfcd1c4539ff37e7ea23e8c28db2b82d7fbe09fba85ac4d1e42559bd0dc2a0261b7e981aea3bad86b5b60c",
            "file": "src/app/modules/shared/configs/date-config/date-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DateConfig {\r\n    format: string;\r\n}",
            "properties": [
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskActivityData",
            "id": "interface-TaskActivityData-894213c070376f07d6ab22b34979825f789d1182b3e0af33e3ad6caec30cbb5e50464532874e9c4afe1c1f98808c562e262908dc3bb21390c0141aee1d0d0637",
            "file": "src/app/modules/action-history/util/activity-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Board, BoardTask, BoardTaskList } from \"../../shared\";\r\n\r\nexport interface ActivityPopupData {\r\n    board: Board;\r\n}\r\nexport interface TaskActivityData {\r\n    task: BoardTask;\r\n    prevTask: BoardTask | undefined;\r\n    taskList: BoardTaskList | undefined;\r\n    board: Board;\r\n}\r\nexport interface TaskListActivityData {\r\n    taskList: BoardTaskList;\r\n    prevTaskList: BoardTaskList | undefined;\r\n    board: Board;\r\n}",
            "properties": [
                {
                    "name": "board",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "prevTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTask | undefined",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTask",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "taskList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTaskList | undefined",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskBoardState",
            "id": "interface-TaskBoardState-d2d8706b1c29c68161e7e352072848060cc3a2c36ea4c8df3b4971bb3e73ab593fb6c11e96a881a537222b447a2243a431ff71d3aa16f9c663c5245e699467c0",
            "file": "src/app/modules/task-board/store/task-board.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BoardState, TaskListState } from \"../index\";\r\n\r\nexport interface TaskBoardState {\r\n    boardState: BoardState,\r\n    taskListState: TaskListState,\r\n}",
            "properties": [
                {
                    "name": "boardState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardState",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "taskListState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListState",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskListActivityData",
            "id": "interface-TaskListActivityData-894213c070376f07d6ab22b34979825f789d1182b3e0af33e3ad6caec30cbb5e50464532874e9c4afe1c1f98808c562e262908dc3bb21390c0141aee1d0d0637",
            "file": "src/app/modules/action-history/util/activity-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Board, BoardTask, BoardTaskList } from \"../../shared\";\r\n\r\nexport interface ActivityPopupData {\r\n    board: Board;\r\n}\r\nexport interface TaskActivityData {\r\n    task: BoardTask;\r\n    prevTask: BoardTask | undefined;\r\n    taskList: BoardTaskList | undefined;\r\n    board: Board;\r\n}\r\nexport interface TaskListActivityData {\r\n    taskList: BoardTaskList;\r\n    prevTaskList: BoardTaskList | undefined;\r\n    board: Board;\r\n}",
            "properties": [
                {
                    "name": "board",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "prevTaskList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTaskList | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "taskList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTaskList",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskListsPopupData",
            "id": "interface-TaskListsPopupData-acda4d646e64b974a57e4f4085f31c92acdab9fbb1dc999b46afd2c3820b32770e0cdfbb85c20ccabfffbe2420d1beb64dc6945fdb40ee165d7f877923cb9404",
            "file": "src/app/modules/task-board/util/task-list-popup-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BoardTaskList } from \"../../shared\";\r\n\r\nexport interface TaskListsPopupData {\r\n    taskList: BoardTaskList | undefined;\r\n    boardId: string;\r\n}",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "taskList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTaskList | undefined",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskListState",
            "id": "interface-TaskListState-2a4b8bba972461fd780a103119e30beed4dbfa1293d3a5a4ed3bf2d68502d75d5cc226d59158a25c2c427364e0fdb291a7190b3660362c093492c6520b8e7f78",
            "file": "src/app/modules/task-board/store/tasks/tasks.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { moveItemInArray } from \"@angular/cdk/drag-drop\";\r\nimport { createReducer, on } from \"@ngrx/store\";\r\nimport { BoardTask, BoardTaskList } from \"../../../shared\";\r\nimport { createTaskFailure, createTaskListFailure, createTaskListSuccess, createTaskSuccess, deleteTaskFailure, deleteTaskListFailure, deleteTaskListSuccess, deleteTaskSuccess, getTaskListsByBoardIdFailure, getTaskListsByBoardIdSuccess, updateTask, updateTaskFailure, updateTaskListFailure, updateTaskListSuccess } from \"../../index\";\r\n\r\nexport interface TaskListState {\r\n    taskLists: BoardTaskList[];\r\n    error: any;\r\n}\r\nconst initialState: TaskListState = {\r\n    taskLists: [],\r\n    error: null\r\n};\r\n\r\nexport const taskReducer = createReducer(\r\n    initialState,\r\n    on(getTaskListsByBoardIdSuccess, (state, { taskLists }) => ({\r\n        ...state,\r\n        taskLists,\r\n        error: null\r\n    })),\r\n    on(getTaskListsByBoardIdFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(createTaskListSuccess, (state, { taskList }) => ({\r\n        ...state,\r\n        taskLists: [...state.taskLists, taskList],\r\n        error: null\r\n    })),\r\n    on(createTaskListFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(updateTaskListSuccess, (state, { taskList }) => ({\r\n        ...state,\r\n        taskLists: state.taskLists.map(list => list.id === taskList.id ? taskList : list),\r\n        error: null\r\n    })),\r\n    on(updateTaskListFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(deleteTaskListSuccess, (state, { listId }) => ({\r\n        ...state,\r\n        taskLists: state.taskLists.filter(taskList => taskList.id !== listId),\r\n        error: null\r\n    })),\r\n    on(deleteTaskListFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(createTaskSuccess, (state, { task }) => {\r\n        const taskListIndex = state.taskLists.findIndex(list => list.id === task.boardTaskListId);\r\n        if (taskListIndex >= 0) {\r\n            const updatedTaskList = {\r\n                ...state.taskLists[taskListIndex],\r\n                boardTasks: [...state.taskLists[taskListIndex].boardTasks, task]\r\n            };\r\n            const updatedTaskLists = [...state.taskLists];\r\n            updatedTaskLists[taskListIndex] = updatedTaskList;\r\n            return {\r\n                ...state,\r\n                taskLists: updatedTaskLists,\r\n                error: null\r\n            };\r\n        }\r\n        return state;\r\n    }),\r\n    on(createTaskFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(updateTask, (state, { prevTaskList, task, posIndex }) => {\r\n        const taskListIndex = state.taskLists.findIndex(list => list.id === task.boardTaskListId);\r\n        if (taskListIndex === -1) {\r\n            return state;\r\n        }\r\n        const currentTaskList = state.taskLists[taskListIndex];\r\n        if (currentTaskList.id === prevTaskList.id) {\r\n            return updateTaskInSameList(task, state, posIndex);\r\n        } else {\r\n            return updateTaskInDifferentList(task, state, posIndex, prevTaskList);\r\n        }\r\n    }),\r\n    on(updateTaskFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(deleteTaskSuccess, (state, { taskId }) => {\r\n        const taskListIndex = state.taskLists.findIndex(list => list.boardTasks.some(task => task.id === taskId));\r\n        if (taskListIndex >= 0) {\r\n            const updatedTaskList = {\r\n                ...state.taskLists[taskListIndex],\r\n                boardTasks: state.taskLists[taskListIndex].boardTasks.filter(task => task.id !== taskId)\r\n            };\r\n            const updatedTaskLists = [...state.taskLists];\r\n            updatedTaskLists[taskListIndex] = updatedTaskList;\r\n            return {\r\n                ...state,\r\n                taskLists: updatedTaskLists,\r\n                error: null\r\n            };\r\n        }\r\n        return state;\r\n    }),\r\n    on(deleteTaskFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    }))\r\n);\r\nfunction updateTaskInSameList(task: BoardTask, state: TaskListState, posIndex: number) {\r\n    const taskListIndex = state.taskLists.findIndex(list => list.id === task.boardTaskListId);\r\n    const currentTaskList = state.taskLists[taskListIndex];\r\n    const taskIndex = currentTaskList.boardTasks.findIndex(t => t.id === task.id);\r\n\r\n    if (taskIndex !== -1) {\r\n        const updatedTasks = [...currentTaskList.boardTasks];\r\n        updatedTasks.splice(posIndex, 1, task);\r\n        moveItemInArray(updatedTasks, taskIndex, posIndex);\r\n        const updatedTaskList = {\r\n            ...currentTaskList,\r\n            boardTasks: updatedTasks\r\n        };\r\n        const updatedTaskLists = [...state.taskLists];\r\n        updatedTaskLists[taskListIndex] = updatedTaskList;\r\n        return {\r\n            ...state,\r\n            taskLists: updatedTaskLists,\r\n            error: null\r\n        };\r\n    }\r\n    return state;\r\n}\r\nfunction updateTaskInDifferentList(task: BoardTask, state: TaskListState, posIndex: number, prevTaskList: BoardTaskList) {\r\n    const taskListIndex = state.taskLists.findIndex(list => list.id === task.boardTaskListId);\r\n    const prevTaskListIndex = state.taskLists.findIndex(list => list.id === prevTaskList.id);\r\n    const currentTaskList = state.taskLists[taskListIndex];\r\n    const prevTaskIndex = prevTaskList.boardTasks.findIndex(t => t.id === task.id);\r\n\r\n    if (prevTaskIndex !== -1) {\r\n        const updatedPrevTasks = [...prevTaskList.boardTasks];\r\n        const updatedCurrentTasks = [...currentTaskList.boardTasks];\r\n        updatedPrevTasks.splice(prevTaskIndex, 1);\r\n        updatedCurrentTasks.splice(posIndex, 0, task);\r\n        const updatedPrevTaskList = {\r\n            ...prevTaskList,\r\n            boardTasks: updatedPrevTasks\r\n        };\r\n        const updatedCurrentTaskList = {\r\n            ...currentTaskList,\r\n            boardTasks: updatedCurrentTasks\r\n        };\r\n        const updatedTaskLists = [...state.taskLists];\r\n        updatedTaskLists[prevTaskListIndex] = updatedPrevTaskList;\r\n        updatedTaskLists[taskListIndex] = updatedCurrentTaskList;\r\n        return {\r\n            ...state,\r\n            taskLists: updatedTaskLists,\r\n            error: null\r\n        };\r\n    }\r\n    return state;\r\n}",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "taskLists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTaskList[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskPopupData",
            "id": "interface-TaskPopupData-4385410f90ec1572039cd74bf60fe0cbf0572123aefa50843bebbd17385dc9cf36d09cb7b626213aea4311db6a28a7f4bb17d5145a77ccd24b25e7a86b86a53d",
            "file": "src/app/modules/task-board/util/task-popup-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BoardTask } from \"../../shared\";\r\n\r\nexport interface TaskPopupData {\r\n    task: BoardTask | undefined;\r\n    taskListId: string;\r\n    boardId: string;\r\n}",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTask | undefined",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "taskListId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskUpdateActivityData",
            "id": "interface-TaskUpdateActivityData-1236bbdc3b01d45a82fe4a3ed6923442dbba9ef62d1ac311088f6ff878c0c33faa5162cd4768971b568b0d9c5ba2f07464b41f21b774ea83c3345a6324685609",
            "file": "src/app/modules/action-history/services/activity-description-formatter/activity-description-formatter-service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BoardTask, BoardTaskList } from '../../../shared';\r\n\r\nexport interface ActivityDescriptions {\r\n  activityDescription: string;\r\n  activityTaskDescription: string;\r\n}\r\nexport interface TaskUpdateActivityData {\r\n  curentTask: BoardTask,\r\n  prevTask: BoardTask,\r\n  taskName_Activity: string,\r\n  taskName_TaskActivity: string,\r\n  updatedElemets: ActivityDescriptions[]\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport abstract class ActivityDescriptionFormatterService {\r\n\r\n  abstract taskCreated(task: BoardTask): ActivityDescriptions;\r\n  abstract taskUpdated(curentTask: BoardTask, prevTask: BoardTask): Promise<ActivityDescriptions[]>;\r\n  abstract taskDeleted(task: BoardTask, taskList: BoardTaskList): {\r\n    activityDescription: string;\r\n    activityTaskDescription: string;\r\n  };\r\n  abstract taskListCreated(taskList: BoardTaskList): string;\r\n  abstract taskListUpdate(currentTaskList: BoardTaskList, prevTaskList: BoardTaskList): string[];\r\n  abstract taskListDeleted(taskList: BoardTaskList): string;\r\n}\r\n",
            "properties": [
                {
                    "name": "curentTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTask",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "prevTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTask",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "taskName_Activity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "taskName_TaskActivity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "updatedElemets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivityDescriptions[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-23c11020a2831beb3fa02ee911a75b64009c31bb46f73a01145c2560cb13b7f7e641105b678bd8fb01a5a199117001f3da4a78351d29d85d213ed7b82982091f",
            "file": "src/stories/default/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-0d76ae6179c9510cba9f0114c3d7bb133af8dc8e744a83cecb04d95b167e789062037da33ea2ea7f3dc22b64235ed8ccfcd79d218130878d659c3c398aadf40a-1",
            "file": "src/app/modules/shared/models/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    id: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        },
        {
            "name": "UserConfig",
            "id": "interface-UserConfig-862bd3098603380ddf13342b9d545b5394455156f48bdb45683f8a258b96c8108c939de9293e8475058bd651a42108f7dcf55cc5e591be3ef4004ce0ee8e7ca6",
            "file": "src/app/modules/shared/configs/user-config/user-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserConfig {\r\n    userIdKey: string;\r\n}",
            "properties": [
                {
                    "name": "userIdKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ActivityApiService",
            "id": "injectable-ActivityApiService-9baf6bcf163353e0f27c7f4cae4abd0415cd1d814fab8dd8c5beb5666043a966ac7f5344ac937873de4bcbaa33eaddb5b288f60526384ee57882dffecac44890",
            "file": "src/app/modules/shared/services/api/acitvity-api/activity-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createActivity",
                    "args": [
                        {
                            "name": "acitvity",
                            "type": "BoardActivity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "acitvity",
                            "type": "BoardActivity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoardActivitiesAmountByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoardActivitiesOnPageByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "amountOnPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amountOnPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "combinePathWithApiUrl",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "getErrorHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "CustomErrorHandler",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "getHttpClient",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpClient",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { catchError } from 'rxjs';\r\nimport { BoardActivity } from '../../../index';\r\nimport { BaseApiService } from '../base-api/base-api.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityApiService extends BaseApiService {\r\n\r\n  getBoardActivitiesAmountByBoardId(id: string) {\r\n    return this.getHttpClient().get<number>(this.combinePathWithApiUrl(`/BoardActivity/board/${id}/amount`)).pipe(\r\n      catchError((err) => this.handleError(err)));\r\n  }\r\n  getBoardActivitiesOnPageByBoardId(id: string, page: number, amountOnPage: number) {\r\n    return this.getHttpClient().get<BoardActivity[]>(this.combinePathWithApiUrl\r\n      (`/BoardActivity/board/${id}/onpage?page=${page}&amountOnPage=${amountOnPage}`)).pipe(\r\n        catchError((err) => this.handleError(err))\r\n      );\r\n  }\r\n  createActivity(acitvity: BoardActivity) {\r\n    return this.getHttpClient().post<BoardActivity>(this.combinePathWithApiUrl(`/BoardActivity`), acitvity).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n}",
            "extends": [
                "BaseApiService"
            ],
            "type": "injectable"
        },
        {
            "name": "ActivityControllerService",
            "id": "injectable-ActivityControllerService-70a207c87f10adaa4a0de4b8018f4c561ef409205a6be8aa42f8014e7391b250457493ee28e7a0540000bf9c5d0b908b2e234bed914d0d0de9c655f4d9a3f9c5",
            "file": "src/app/modules/action-history/services/acitvity-service/activity-controller.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createBoardActivity",
                    "args": [
                        {
                            "name": "createActivityData",
                            "type": "CreateActivityData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "createActivityData",
                            "type": "CreateActivityData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createBoardTaskActivity",
                    "args": [
                        {
                            "name": "createActivityData",
                            "type": "CreateActivityData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "createActivityData",
                            "type": "CreateActivityData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createListActivity_Create",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createListActivity_Delete",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createListActivity_Update",
                    "args": [
                        {
                            "name": "currentTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "currentTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskActivity",
                    "args": [
                        {
                            "name": "activityType",
                            "type": "ActivityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskActivityData",
                            "type": "TaskActivityData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "activityType",
                            "type": "ActivityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskActivityData",
                            "type": "TaskActivityData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityService"
                    }
                },
                {
                    "name": "createTaskActivity_Create",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskActivity_Delete",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskActivity_Update",
                    "args": [
                        {
                            "name": "curentTask",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prevTask",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "curentTask",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prevTask",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskListActivity",
                    "args": [
                        {
                            "name": "activityType",
                            "type": "ActivityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "listActivityData",
                            "type": "TaskListActivityData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activityType",
                            "type": "ActivityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "listActivityData",
                            "type": "TaskListActivityData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityService"
                    }
                },
                {
                    "name": "getBoardActivitiesOnPageByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "amountOnPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amountOnPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityService"
                    }
                },
                {
                    "name": "getBoardActivityAmountByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityService"
                    }
                },
                {
                    "name": "getCreateActivityData",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityDescription",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskActivityDescription",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CreateActivityData",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityDescription",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskActivityDescription",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskActivitiesByTaskId",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivityApiService, ActivityType, Board, BoardActivity, BoardTask, BoardTaskActivity, BoardTaskList, TaskActivityApiService } from '../../../shared';\r\nimport { ActivityDescriptionFormatterService, ActivityDescriptions, TaskActivityData, TaskListActivityData } from '../../index';\r\nimport { ActivityService } from './activity-service';\r\n\r\ninterface CreateActivityData {\r\n  task: BoardTask | undefined,\r\n  descriptions: ActivityDescriptions,\r\n  board: Board\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityControllerService extends ActivityService {\r\n\r\n  constructor(\r\n    private activityApi: ActivityApiService,\r\n    private takActivityApi: TaskActivityApiService,\r\n    private descriptionFormatter: ActivityDescriptionFormatterService) {\r\n    super();\r\n  }\r\n\r\n  getTaskActivitiesByTaskId(taskId: string) {\r\n    return this.takActivityApi.getTaskActivitiesByTaskId(taskId);\r\n  }\r\n  getBoardActivitiesOnPageByBoardId(id: string, page: number, amountOnPage: number) {\r\n    return this.activityApi.getBoardActivitiesOnPageByBoardId(id, page, amountOnPage);\r\n  }\r\n  getBoardActivityAmountByBoardId(id: string) {\r\n    return this.activityApi.getBoardActivitiesAmountByBoardId(id);\r\n  }\r\n  async createTaskActivity(activityType: ActivityType, taskActivityData: TaskActivityData) {\r\n    try {\r\n      switch (activityType) {\r\n        case ActivityType.Create:\r\n          this.createTaskActivity_Create(taskActivityData.task, taskActivityData.board);\r\n          break;\r\n        case ActivityType.Update:\r\n          if (!taskActivityData.prevTask)\r\n            throw new Error('To create update activity, define previous task data!');\r\n          await this.createTaskActivity_Update(taskActivityData.task, taskActivityData.prevTask, taskActivityData.board);\r\n          break;\r\n        case ActivityType.Delete:\r\n          if (!taskActivityData.taskList)\r\n            throw new Error('To create delete activity, define task list data!');\r\n          this.createTaskActivity_Delete(taskActivityData.task, taskActivityData.taskList, taskActivityData.board);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  createTaskListActivity(activityType: ActivityType, listActivityData: TaskListActivityData) {\r\n    try {\r\n      switch (activityType) {\r\n        case ActivityType.Create:\r\n          this.createListActivity_Create(listActivityData.taskList, listActivityData.board);\r\n          break;\r\n        case ActivityType.Update:\r\n          if (!listActivityData.prevTaskList)\r\n            throw new Error('To create update activity, define previous task list data!');\r\n          this.createListActivity_Update(listActivityData.taskList, listActivityData.prevTaskList, listActivityData.board);\r\n          break;\r\n        case ActivityType.Delete:\r\n          this.createListActivity_Delete(listActivityData.taskList, listActivityData.board);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  private createTaskActivity_Create(task: BoardTask, board: Board) {\r\n    var descriptions = this.descriptionFormatter.taskCreated(task)\r\n    var data = this.getCreateActivityData(task, descriptions.activityDescription, descriptions.activityTaskDescription, board);\r\n    this.createBoardActivity(data);\r\n    this.createBoardTaskActivity(data);\r\n  }\r\n  private async createTaskActivity_Update(curentTask: BoardTask, prevTask: BoardTask, board: Board) {\r\n    var descriptions = await this.descriptionFormatter.taskUpdated(curentTask, prevTask);\r\n    for (var i = 0; i < descriptions.length; i++) {\r\n      var data = this.getCreateActivityData(curentTask, descriptions[i].activityDescription, descriptions[i].activityTaskDescription, board);\r\n      this.createBoardActivity(data);\r\n      this.createBoardTaskActivity(data);\r\n    }\r\n  }\r\n  private createTaskActivity_Delete(task: BoardTask, taskList: BoardTaskList, board: Board) {\r\n    var descriptions = this.descriptionFormatter.taskDeleted(task, taskList)\r\n    var data = this.getCreateActivityData(task, descriptions.activityDescription, descriptions.activityTaskDescription, board);\r\n    this.createBoardActivity(data);\r\n  }\r\n  private createListActivity_Create(taskList: BoardTaskList, board: Board) {\r\n    var description = this.descriptionFormatter.taskListCreated(taskList)\r\n    var data = this.getCreateActivityData(undefined, description, \"\", board);\r\n    this.createBoardActivity(data);\r\n  }\r\n  private createListActivity_Update(currentTaskList: BoardTaskList, prevTaskList: BoardTaskList, board: Board) {\r\n    var descriptions = this.descriptionFormatter.taskListUpdate(currentTaskList, prevTaskList)\r\n    for (var i = 0; i < descriptions.length; i++) {\r\n      var data = this.getCreateActivityData(undefined, descriptions[i], \"\", board);\r\n      this.createBoardActivity(data);\r\n    }\r\n  }\r\n  private createListActivity_Delete(taskList: BoardTaskList, board: Board) {\r\n    var description = this.descriptionFormatter.taskListDeleted(taskList)\r\n    var data = this.getCreateActivityData(undefined, description, \"\", board);\r\n    this.createBoardActivity(data);\r\n  }\r\n  private createBoardActivity(createActivityData: CreateActivityData): void {\r\n    const boardActivity: BoardActivity = {\r\n      id: \"\",\r\n      boardId: createActivityData.board.id,\r\n      activityTime: new Date(),\r\n      description: createActivityData.descriptions.activityDescription\r\n    };\r\n    this.activityApi.createActivity(boardActivity).subscribe();\r\n  }\r\n  private createBoardTaskActivity(createActivityData: CreateActivityData) {\r\n    const boardTaskActivity: BoardTaskActivity = {\r\n      id: \"\",\r\n      boardTaskId: createActivityData.task!.id,\r\n      activityTime: new Date(),\r\n      description: createActivityData.descriptions.activityTaskDescription\r\n    };\r\n    this.takActivityApi.createTaskActivity(boardTaskActivity).subscribe();\r\n  }\r\n  private getCreateActivityData(task: BoardTask | undefined, activityDescription: string, taskActivityDescription: string, board: Board) {\r\n    var descriptions: ActivityDescriptions = { activityDescription: activityDescription, activityTaskDescription: taskActivityDescription };\r\n    var data: CreateActivityData = { task: task, descriptions: descriptions, board: board };\r\n    return data;\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activityApi",
                        "type": "ActivityApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "takActivityApi",
                        "type": "TaskActivityApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "descriptionFormatter",
                        "type": "ActivityDescriptionFormatterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "activityApi",
                        "type": "ActivityApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "takActivityApi",
                        "type": "TaskActivityApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "descriptionFormatter",
                        "type": "ActivityDescriptionFormatterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "ActivityService"
            ],
            "type": "injectable"
        },
        {
            "name": "ActivityDescriptionFormatterService",
            "id": "injectable-ActivityDescriptionFormatterService-1236bbdc3b01d45a82fe4a3ed6923442dbba9ef62d1ac311088f6ff878c0c33faa5162cd4768971b568b0d9c5ba2f07464b41f21b774ea83c3345a6324685609",
            "file": "src/app/modules/action-history/services/activity-description-formatter/activity-description-formatter-service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "taskCreated",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ActivityDescriptions",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "taskDeleted",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "taskListCreated",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "taskListDeleted",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "taskListUpdate",
                    "args": [
                        {
                            "name": "currentTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "currentTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "taskUpdated",
                    "args": [
                        {
                            "name": "curentTask",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prevTask",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ActivityDescriptions[]>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "curentTask",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prevTask",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BoardTask, BoardTaskList } from '../../../shared';\r\n\r\nexport interface ActivityDescriptions {\r\n  activityDescription: string;\r\n  activityTaskDescription: string;\r\n}\r\nexport interface TaskUpdateActivityData {\r\n  curentTask: BoardTask,\r\n  prevTask: BoardTask,\r\n  taskName_Activity: string,\r\n  taskName_TaskActivity: string,\r\n  updatedElemets: ActivityDescriptions[]\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport abstract class ActivityDescriptionFormatterService {\r\n\r\n  abstract taskCreated(task: BoardTask): ActivityDescriptions;\r\n  abstract taskUpdated(curentTask: BoardTask, prevTask: BoardTask): Promise<ActivityDescriptions[]>;\r\n  abstract taskDeleted(task: BoardTask, taskList: BoardTaskList): {\r\n    activityDescription: string;\r\n    activityTaskDescription: string;\r\n  };\r\n  abstract taskListCreated(taskList: BoardTaskList): string;\r\n  abstract taskListUpdate(currentTaskList: BoardTaskList, prevTaskList: BoardTaskList): string[];\r\n  abstract taskListDeleted(taskList: BoardTaskList): string;\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ActivityDescriptionManagerService",
            "id": "injectable-ActivityDescriptionManagerService-24a7092acd15ad5bf564497b85c09975703c79bb65342534a0882b9dab7a6e7435300af3221c22e98229b8c674801b77f27be671fe8cb87320317add6cf1d602",
            "file": "src/app/modules/action-history/services/activity-description-formatter/activity-description-manager.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deleteSpecialCharacterInName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getActivitiesNames",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ taskName_Activity: string; taskName_TaskActivity: string; }",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getActivityDescForStr",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskActivityTaskName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ activityDescription: any; activityTaskDescription: any; }",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskActivityTaskName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormattedMainName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormattedSecondName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskListName",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "taskCreated",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ActivityDescriptions",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityDescriptionFormatterService"
                    }
                },
                {
                    "name": "taskDeleted",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ activityDescription: any; activityTaskDescription: any; }",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityDescriptionFormatterService"
                    }
                },
                {
                    "name": "taskListCreated",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityDescriptionFormatterService"
                    }
                },
                {
                    "name": "taskListDeleted",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityDescriptionFormatterService"
                    }
                },
                {
                    "name": "taskListUpdate",
                    "args": [
                        {
                            "name": "currentTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityDescriptionFormatterService"
                    }
                },
                {
                    "name": "taskUpdate_Description",
                    "args": [
                        {
                            "name": "taskParams",
                            "type": "TaskUpdateActivityData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskParams",
                            "type": "TaskUpdateActivityData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "taskUpdate_DueTime",
                    "args": [
                        {
                            "name": "taskParams",
                            "type": "TaskUpdateActivityData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskParams",
                            "type": "TaskUpdateActivityData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "taskUpdate_Name",
                    "args": [
                        {
                            "name": "taskParams",
                            "type": "TaskUpdateActivityData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskParams",
                            "type": "TaskUpdateActivityData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "taskUpdate_Priority",
                    "args": [
                        {
                            "name": "taskParams",
                            "type": "TaskUpdateActivityData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskParams",
                            "type": "TaskUpdateActivityData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "taskUpdated",
                    "args": [
                        {
                            "name": "curentTask",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prevTask",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "curentTask",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prevTask",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityDescriptionFormatterService"
                    }
                },
                {
                    "name": "taskUpdated_TaskList",
                    "args": [
                        {
                            "name": "taskParams",
                            "type": "TaskUpdateActivityData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskParams",
                            "type": "TaskUpdateActivityData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Observable, forkJoin, lastValueFrom } from 'rxjs';\r\nimport { BoardTask, BoardTaskList, PriorityConvertorService, StringFormaterService, TaskListApiService } from '../../../shared';\r\nimport { ACTIVITY_FORMAT_CONFIG, ActivityFormatConfig } from '../../index';\r\nimport { ActivityDescriptionFormatterService, ActivityDescriptions, TaskUpdateActivityData } from './activity-description-formatter-service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityDescriptionManagerService extends ActivityDescriptionFormatterService {\r\n\r\n  constructor(@Inject(ACTIVITY_FORMAT_CONFIG) private format: ActivityFormatConfig, private taskListApi: TaskListApiService) {\r\n    super();\r\n  }\r\n\r\n  taskCreated(task: BoardTask): ActivityDescriptions {\r\n    var names = this.getActivitiesNames(task);\r\n    return this.getActivityDescForStr(\"You created {0}\", names.taskName_Activity, names.taskName_TaskActivity);\r\n  }\r\n  async taskUpdated(curentTask: BoardTask, prevTask: BoardTask) {\r\n    var names = this.getActivitiesNames(curentTask);\r\n    var taskUpdatedParams: TaskUpdateActivityData =\r\n    {\r\n      curentTask: curentTask,\r\n      prevTask: prevTask,\r\n      taskName_Activity: names.taskName_Activity,\r\n      taskName_TaskActivity: names.taskName_TaskActivity,\r\n      updatedElemets: []\r\n    }\r\n    if (prevTask.boardTaskListId != curentTask.boardTaskListId) {\r\n      await lastValueFrom(this.taskUpdated_TaskList(taskUpdatedParams));\r\n    }\r\n    if (prevTask.dueTime != curentTask.dueTime) {\r\n      this.taskUpdate_DueTime(taskUpdatedParams);\r\n    }\r\n    if (prevTask.name != curentTask.name) {\r\n      this.taskUpdate_Name(taskUpdatedParams);\r\n    }\r\n    if (prevTask.description != curentTask.description) {\r\n      this.taskUpdate_Description(taskUpdatedParams);\r\n    }\r\n    if (prevTask.priority != curentTask.priority) {\r\n      this.taskUpdate_Priority(taskUpdatedParams);\r\n    }\r\n    return taskUpdatedParams.updatedElemets;\r\n  }\r\n  taskDeleted(task: BoardTask, taskList: BoardTaskList) {\r\n    var names = this.getActivitiesNames(task);\r\n    var taskListName = this.getFormattedSecondName(taskList?.name);\r\n    return this.getActivityDescForStr(`You removed {0} from ${taskListName}`, names.taskName_Activity, names.taskName_TaskActivity);\r\n  }\r\n  taskListCreated(taskList: BoardTaskList) {\r\n    var name = this.getTaskListName(taskList);\r\n    return `You created ${name}`;\r\n  }\r\n  taskListUpdate(currentTaskList: BoardTaskList, prevTaskList: BoardTaskList) {\r\n    var name = this.getTaskListName(currentTaskList);\r\n    var updatedElemets = [];\r\n    if (currentTaskList.name != prevTaskList.name) {\r\n      var prevName = this.getTaskListName(prevTaskList);\r\n      updatedElemets.push(`You changed name from ${prevName} to ${name}`);\r\n    }\r\n    return updatedElemets;\r\n  }\r\n  taskListDeleted(taskList: BoardTaskList) {\r\n    var name = this.getTaskListName(taskList);\r\n    return `You removed ${name}`;\r\n  }\r\n  private getActivitiesNames(task: BoardTask) {\r\n    var taskName_Activity = this.getFormattedMainName(task.name);\r\n    var taskName_TaskActivity = \"this task\";\r\n    return { taskName_Activity: taskName_Activity, taskName_TaskActivity: taskName_TaskActivity };\r\n  }\r\n  private getTaskListName(taskList: BoardTaskList) {\r\n    return this.getFormattedSecondName(taskList.name);\r\n  }\r\n  private getFormattedMainName(name: string | undefined): string {\r\n    let mainName = name ? name.slice(0, this.format.maxNameLength) : \"\";\r\n    if (name && name.length > this.format.maxNameLength) {\r\n      mainName += this.format.maxNameLengthReplacingString;\r\n    }\r\n    mainName = this.deleteSpecialCharacterInName(mainName);\r\n    return `${this.format.mainNameStyleBegin}${mainName}${this.format.mainNameStyleEnd}`;\r\n  }\r\n  private getFormattedSecondName(name: string | undefined) {\r\n    let secondName = name ? name.slice(0, this.format.maxNameLength) : \"\";\r\n    if (name && name.length > this.format.maxNameLength) {\r\n      secondName += this.format.maxNameLengthReplacingString;\r\n    }\r\n    secondName = this.deleteSpecialCharacterInName(secondName);\r\n    return `${this.format.secondaryNameStyleBegin}${secondName}${this.format.secondaryNameStyleEnd}`;\r\n  }\r\n  private deleteSpecialCharacterInName(name: string) {\r\n    return name.replace(/</g, '');\r\n  }\r\n  private getActivityDescForStr(str: string, taskName: string, taskActivityTaskName: string) {\r\n    return {\r\n      activityDescription: StringFormaterService.format(str, taskName),\r\n      activityTaskDescription: StringFormaterService.format(str, taskActivityTaskName)\r\n    };\r\n  }\r\n\r\n  // The Twilight Zone\r\n\r\n  private taskUpdated_TaskList(taskParams: TaskUpdateActivityData): Observable<void> {\r\n    return new Observable<void>((observer) => {\r\n      forkJoin([\r\n        this.taskListApi.getTaskListById(taskParams.prevTask.boardTaskListId),\r\n        this.taskListApi.getTaskListById(taskParams.curentTask.boardTaskListId)\r\n      ]).subscribe(([prevList, currentList]) => {\r\n        if (prevList && currentList) {\r\n          var prevListName = this.getTaskListName(prevList);\r\n          var currentListName = this.getTaskListName(currentList);\r\n          taskParams.updatedElemets.push(this.getActivityDescForStr(`You moved {0} from ${prevListName} to ${currentListName}`,\r\n            taskParams.taskName_Activity, taskParams.taskName_TaskActivity));\r\n        }\r\n        observer.next();\r\n        observer.complete();\r\n      });\r\n    });\r\n  }\r\n  private taskUpdate_DueTime(taskParams: TaskUpdateActivityData) {\r\n    var prevDueTime = this.getFormattedSecondName(taskParams.prevTask.dueTime?.toLocaleDateString());\r\n    var currentDueTime = this.getFormattedSecondName(taskParams.curentTask.dueTime?.toLocaleDateString());\r\n    taskParams.updatedElemets.push(this.getActivityDescForStr(`You changed {0} due time from ${prevDueTime} to ${currentDueTime}`,\r\n      taskParams.taskName_Activity, taskParams.taskName_TaskActivity));\r\n  }\r\n  private taskUpdate_Name(taskParams: TaskUpdateActivityData) {\r\n    var prevName = this.getFormattedMainName(taskParams.prevTask.name);\r\n    taskParams.updatedElemets.push(this.getActivityDescForStr(`You changed name from ${prevName} to {0}`,\r\n      taskParams.taskName_Activity, taskParams.taskName_Activity));\r\n  }\r\n  private taskUpdate_Description(taskParams: TaskUpdateActivityData) {\r\n    taskParams.updatedElemets.push(this.getActivityDescForStr(`You changed {0} description`,\r\n      taskParams.taskName_Activity, taskParams.taskName_TaskActivity));\r\n  }\r\n  private taskUpdate_Priority(taskParams: TaskUpdateActivityData) {\r\n    var prevPriority = this.getFormattedSecondName(PriorityConvertorService.getPriorityString(taskParams.prevTask.priority));\r\n    var currentPriority = this.getFormattedSecondName(PriorityConvertorService.getPriorityString(taskParams.curentTask.priority));\r\n    taskParams.updatedElemets.push(this.getActivityDescForStr(`You changed {0} priority from ${prevPriority} to ${currentPriority}`,\r\n      taskParams.taskName_Activity, taskParams.taskName_TaskActivity));\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "format",
                        "type": "ActivityFormatConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListApi",
                        "type": "TaskListApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "format",
                        "type": "ActivityFormatConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListApi",
                        "type": "TaskListApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "ActivityDescriptionFormatterService"
            ],
            "type": "injectable"
        },
        {
            "name": "BaseApiService",
            "id": "injectable-BaseApiService-743608d7c72705cbb032b869bbdb30e7c665f29f55c382107e948b02ce2c38bf3f29028969d75ce5f9d1bcb3672f36b93a8abc26b1894a169f4729e23c639fa5",
            "file": "src/app/modules/shared/services/api/base-api/base-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "combinePathWithApiUrl",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "CustomErrorHandler",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "getHttpClient",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpClient",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { throwError } from \"rxjs\";\r\nimport { CustomErrorHandler, URLDefiner } from '../../../index';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BaseApiService {\r\n  constructor(private httpClient: HttpClient, private errorHandler: CustomErrorHandler, private urlDefiner: URLDefiner) { }\r\n\r\n  protected getHttpClient() {\r\n    return this.httpClient;\r\n  }\r\n  protected getErrorHandler() {\r\n    return this.errorHandler;\r\n  }\r\n  protected combinePathWithApiUrl(path: string) {\r\n    return this.urlDefiner.combineWithApiUrl(path);\r\n  }\r\n  protected handleError(error: Error) {\r\n    this.errorHandler.handleError(error);\r\n    return throwError(() => new Error(error.message));\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorHandler",
                        "type": "CustomErrorHandler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "urlDefiner",
                        "type": "URLDefiner",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorHandler",
                        "type": "CustomErrorHandler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "urlDefiner",
                        "type": "URLDefiner",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BoardApiService",
            "id": "injectable-BoardApiService-27990b9918e75720b212ea1a72fee7163d77637d31fdc91ab82abf5b474393ac3b20fdeabbfde43c02dc5c3c6444909ca5bcb825c177f8ef7c260ca06c5bd796",
            "file": "src/app/modules/shared/services/api/board-api/board-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Board>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBoard",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoardById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Board | undefined>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoardsByUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Board[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTaskListsAmountByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksAmountByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "combinePathWithApiUrl",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "getErrorHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "CustomErrorHandler",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "getHttpClient",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpClient",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, catchError, switchMap } from 'rxjs';\r\nimport { BaseApiService, Board, CustomErrorHandler, URLDefiner, UserApiService } from '../../../index';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BoardApiService extends BaseApiService {\r\n\r\n  constructor(httpClient: HttpClient, errorHandler: CustomErrorHandler, urlDefiner: URLDefiner, private userApiService: UserApiService) {\r\n    super(httpClient, errorHandler, urlDefiner);\r\n  }\r\n\r\n  getBoardsByUserId(): Observable<Board[]> {\r\n    return this.userApiService.getUser().pipe(\r\n      switchMap(user => {\r\n        if (!user)\r\n          return new Observable<Board[]>(observer => observer.next([]));\r\n        return this.getHttpClient().get<Board[]>(this.combinePathWithApiUrl(`/Board/user/${user.id}`)).pipe(\r\n          catchError((err) => this.handleError(err))\r\n        );\r\n      }));\r\n  }\r\n  getBoardById(id: string): Observable<Board | undefined> {\r\n    return this.getHttpClient().get<Board>(this.combinePathWithApiUrl(`/Board/${id}`)).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n  getTaskListsAmountByBoardId(id: string): Observable<number> {\r\n    return this.getHttpClient().get<number>(this.combinePathWithApiUrl(`/Board/amount/tasklists/${id}`)).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n  getTasksAmountByBoardId(id: string): Observable<number> {\r\n    return this.getHttpClient().get<number>(this.combinePathWithApiUrl(`/Board/amount/tasks/${id}`)).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n  createBoard(board: Board): Observable<Board> {\r\n    return this.userApiService.getUser().pipe(\r\n      switchMap(user => {\r\n        if (!user)\r\n          return new Observable<Board>(observer => observer.next());\r\n        board = { ...board, userId: user.id, creationTime: new Date() };\r\n        return this.getHttpClient().post<Board>(this.combinePathWithApiUrl(`/Board`), board).pipe(\r\n          catchError((err) => this.handleError(err)));\r\n      }));\r\n  }\r\n  updateBoard(board: Board) {\r\n    return this.getHttpClient().put(this.combinePathWithApiUrl(`/Board`), board).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n  deleteBoard(id: string) {\r\n    return this.getHttpClient().delete(this.combinePathWithApiUrl(`/Board/${id}`)).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorHandler",
                        "type": "CustomErrorHandler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "urlDefiner",
                        "type": "URLDefiner",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userApiService",
                        "type": "UserApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorHandler",
                        "type": "CustomErrorHandler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "urlDefiner",
                        "type": "URLDefiner",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userApiService",
                        "type": "UserApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseApiService"
            ],
            "type": "injectable"
        },
        {
            "name": "BoardControllerService",
            "id": "injectable-BoardControllerService-fc84cd38d70962b5cc86a13e006904515cd2003a73bb8aed7973e81c2a5b54a55a8680c6c3917875c5bcc8a92a04f9b92147120ae84bb696bb2b1f7fc9eef65f",
            "file": "src/app/modules/task-board/services/board-service/board-controller.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoardById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoardsByUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTaskListsAmountByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksAmountByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Board, BoardApiService } from '../../../shared';\r\nimport { createBoard, deleteBoard, getBoardsByUserId, selectAllBoards, updateBoard } from '../../index';\r\nimport { BoardService } from './board-service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BoardControllerService implements BoardService {\r\n\r\n  constructor(private boardApi: BoardApiService, private store: Store<{ boardState: { boards: Board[] } }>) { }\r\n\r\n  getBoardsByUserId() {\r\n    this.store.dispatch(getBoardsByUserId());\r\n    var boards$ = this.store.select(selectAllBoards);\r\n    return boards$;\r\n  }\r\n  getBoardById(id: string) {\r\n    return this.boardApi.getBoardById(id);\r\n  }\r\n  getTaskListsAmountByBoardId(id: string) {\r\n    return this.boardApi.getTaskListsAmountByBoardId(id);\r\n  }\r\n  getTasksAmountByBoardId(id: string) {\r\n    return this.boardApi.getTasksAmountByBoardId(id);\r\n  }\r\n  createBoard(board: Board) {\r\n    this.store.dispatch(createBoard({ board }));\r\n  }\r\n  updateBoard(board: Board) {\r\n    this.store.dispatch(updateBoard({ board }));\r\n  }\r\n  deleteBoard(board: Board) {\r\n    this.store.dispatch(deleteBoard({ boardId: board.id }));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "boardApi",
                        "type": "BoardApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "boardApi",
                        "type": "BoardApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BoardEffects",
            "id": "injectable-BoardEffects-b6c2d5bf3eb7e9427df14d5a04e44d4a74324a0436ccb442d34b894663648abf78f0f746ded018c16704ec3f535911ff61a39f425d3f1aaf139d90afad564513",
            "file": "src/app/modules/task-board/store/board/board.effect.ts",
            "properties": [
                {
                    "name": "createBoard$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(createBoard),\r\n            mergeMap(action =>\r\n                this.apiService.createBoard(action.board).pipe(\r\n                    map((board: Board) => createBoardSuccess({ board: board })),\r\n                    catchError(error => of(createBoardFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "deleteBoard$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(deleteBoard),\r\n            mergeMap(action =>\r\n                this.apiService.deleteBoard(action.boardId).pipe(\r\n                    map(() => deleteBoardSuccess({ boardId: action.boardId })),\r\n                    catchError(error => of(deleteBoardFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "loadBoards$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(getBoardsByUserId),\r\n            mergeMap(() =>\r\n                this.apiService.getBoardsByUserId().pipe(\r\n                    map((boards: Board[]) => getBoardsByUserIdSuccess({ boards: boards })),\r\n                    catchError(error => of(getBoardsByUserIdFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "updateBoard$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(updateBoard),\r\n            mergeMap(action =>\r\n                this.apiService.updateBoard(action.board).pipe(\r\n                    map(() => updateBoardSuccess({ board: action.board })),\r\n                    catchError(error => of(updateBoardFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { catchError, map, mergeMap, of } from \"rxjs\";\r\nimport { Board, BoardApiService } from \"../../../shared\";\r\nimport { createBoard, createBoardFailure, createBoardSuccess, deleteBoard, deleteBoardFailure, deleteBoardSuccess, getBoardsByUserId, getBoardsByUserIdFailure, getBoardsByUserIdSuccess, updateBoard, updateBoardFailure, updateBoardSuccess } from \"../../index\";\r\n\r\n@Injectable()\r\nexport class BoardEffects {\r\n    constructor(private actions$: Actions,\r\n        private apiService: BoardApiService) { }\r\n\r\n    loadBoards$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(getBoardsByUserId),\r\n            mergeMap(() =>\r\n                this.apiService.getBoardsByUserId().pipe(\r\n                    map((boards: Board[]) => getBoardsByUserIdSuccess({ boards: boards })),\r\n                    catchError(error => of(getBoardsByUserIdFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n    createBoard$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(createBoard),\r\n            mergeMap(action =>\r\n                this.apiService.createBoard(action.board).pipe(\r\n                    map((board: Board) => createBoardSuccess({ board: board })),\r\n                    catchError(error => of(createBoardFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n    updateBoard$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(updateBoard),\r\n            mergeMap(action =>\r\n                this.apiService.updateBoard(action.board).pipe(\r\n                    map(() => updateBoardSuccess({ board: action.board })),\r\n                    catchError(error => of(updateBoardFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n    deleteBoard$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(deleteBoard),\r\n            mergeMap(action =>\r\n                this.apiService.deleteBoard(action.boardId).pipe(\r\n                    map(() => deleteBoardSuccess({ boardId: action.boardId })),\r\n                    catchError(error => of(deleteBoardFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "BoardApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "BoardApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BoardService",
            "id": "injectable-BoardService-ad671f5ce2cff532ffc92864e2f65d5cda4d034e331ea1f470cd3f5c02d843706162005572f2cfbe87f7adc561e17926e7753136f5bad2bd6e6dd2582ad2786b",
            "file": "src/app/modules/task-board/services/board-service/board-service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoardById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Board | undefined>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoardsByUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Board[]>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ]
                },
                {
                    "name": "getTaskListsAmountByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksAmountByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Board } from '../../../shared';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport abstract class BoardService {\r\n  abstract getBoardsByUserId(): Observable<Board[]>;\r\n  abstract getBoardById(id: string): Observable<Board | undefined>;\r\n  abstract getTaskListsAmountByBoardId(id: string): Observable<number>;\r\n  abstract getTasksAmountByBoardId(id: string): Observable<number>;\r\n  abstract createBoard(board: Board): void;\r\n  abstract updateBoard(board: Board): void;\r\n  abstract deleteBoard(board: Board): void;\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CustomDatePickerValidatorService",
            "id": "injectable-CustomDatePickerValidatorService-0f4d8fc56198a578c4234793f9532d2761c8bab4d9dc5febc7dc33ebc096d7bb5165da561ae3e9bc667e1e5f35556e54978d58f1ba7c8cf3c7ca145217b5889e",
            "file": "src/app/modules/shared/services/validators/date/custrom-validators.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "dateMinimum",
                    "args": [
                        {
                            "name": "minDate",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "minDate",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DateValidator"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\r\nimport { DateValidator } from './date-validators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CustomDatePickerValidatorService extends DateValidator {\r\n\r\n  dateMinimum(minDate: any): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } | null => {\r\n      if (!(minDate instanceof Date)) {\r\n        minDate = new Date(minDate);\r\n      }\r\n      if (control.value instanceof Date && typeof control.value.getTime === 'function') {\r\n        // Normalize both dates to midnight\r\n        const selectedDate = new Date(control.value);\r\n        selectedDate.setHours(0, 0, 0, 0);\r\n        minDate.setHours(0, 0, 0, 0);\r\n        return selectedDate >= minDate ? null : { 'dateMinimum': true };\r\n      } else {\r\n        return null;\r\n      }\r\n    };\r\n  }\r\n}",
            "extends": [
                "DateValidator"
            ],
            "type": "injectable"
        },
        {
            "name": "CustomErrorHandler",
            "id": "injectable-CustomErrorHandler-c7eac20dd629a7abacef84cdea82d9ecd83db784b31306191e79cff0120ea4fdf30e69d42d3ed37c669426901b38498f35d193da3530ad954e863d8312caa99b",
            "file": "src/app/modules/shared/services/error-handler/custom-error-handler.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport abstract class CustomErrorHandler {\r\n\r\n  abstract handleError(error: Error): void;\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DevModeService",
            "id": "injectable-DevModeService-78f680c60416cc62a3b2af8354c757ac3cbf79ae1f4326aadad2c1314a382a658244455ae3a1ba4d28e275e37fb227f5b062431d8f69fdfe327e96cc8be6f7e2",
            "file": "src/app/modules/shared/services/dev-mode/dev-mode.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isDevMode",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, isDevMode } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DevModeService {\r\n\r\n  isDevMode() {\r\n    return isDevMode();\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ErrorHandlerService",
            "id": "injectable-ErrorHandlerService-c5433785ce81f42ed3ef1ebff7255011bac0d4b8da0cfcf3be93cfd98e5f6da1ce9817aaa7bf8429def245c0c0aeb83f29cabaac4936d039844b3c27fc520794",
            "file": "src/app/modules/shared/services/error-handler/error-handler.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CustomErrorHandler"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CustomErrorHandler } from './custom-error-handler';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ErrorHandlerService extends CustomErrorHandler {\r\n\r\n  override handleError(error: Error): void {\r\n    console.log(error.message);\r\n  }\r\n}\r\n",
            "extends": [
                "CustomErrorHandler"
            ],
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-d51e9fc20a007d6372c55d5869ec35b3082abad99bafec9100f280e3fe45412abb9d2bdd6a98552a5ba257123ee5979a0c6e85de993961421ff663280d1bf0f7",
            "file": "src/app/modules/shared/services/local-storage/local-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalStorageService {\r\n  constructor() { }\r\n\r\n  setItem(key: string, value: string): void {\r\n    localStorage.setItem(key, value);\r\n  }\r\n  getItem(key: string): string | null {\r\n    return localStorage.getItem(key);\r\n  }\r\n  removeItem(key: string): void {\r\n    localStorage.removeItem(key);\r\n  }\r\n  clear(): void {\r\n    localStorage.clear();\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MockActivityService",
            "id": "injectable-MockActivityService-5a273134e3a6d3e4cc2d1a4f0e728834b4344f07076a45cc28e85b22d92bde1dab39c2a6a37ad5c3b0a4e2b1c96bcf91ce3dfae0aa9c21f37cd76c9eb44401a6",
            "file": "src/stories/task-board/tasks/mockServices.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createTaskActivity",
                    "args": [
                        {
                            "name": "activityType",
                            "type": "ActivityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskActivityData",
                            "type": "TaskActivityData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "activityType",
                            "type": "ActivityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskActivityData",
                            "type": "TaskActivityData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityService"
                    }
                },
                {
                    "name": "createTaskListActivity",
                    "args": [
                        {
                            "name": "activityType",
                            "type": "ActivityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "listActivityData",
                            "type": "TaskListActivityData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "activityType",
                            "type": "ActivityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "listActivityData",
                            "type": "TaskListActivityData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityService"
                    }
                },
                {
                    "name": "getBoardActivitiesOnPageByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "amountOnPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BoardActivity[]>",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amountOnPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityService"
                    }
                },
                {
                    "name": "getBoardActivityAmountByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityService"
                    }
                },
                {
                    "name": "getTaskActivitiesByTaskId",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BoardTaskActivity[]>",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ActivityService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { moveItemInArray } from \"@angular/cdk/drag-drop\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable, of } from \"rxjs\";\r\nimport { ActivityService, TaskActivityData, TaskListActivityData } from \"../../../app/modules/action-history\";\r\nimport { ActivityType, Board, BoardActivity, BoardTask, BoardTaskActivity, BoardTaskList, Priority, RedirectorService, copyTaskListValues, copyTaskValues } from \"../../../app/modules/shared\";\r\nimport { BoardService, TaskListService, TaskService } from \"../../../app/modules/task-board\";\r\n\r\nexport const mockTask: BoardTask = {\r\n    id: \"1\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test Task 1\",\r\n    description: \"Description\",\r\n    priority: Priority.High\r\n}\r\nexport const mockTaskLotOfText: BoardTask = {\r\n    id: \"2\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test with a lot of textttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt\",\r\n    description: \"Descriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\",\r\n    priority: Priority.High\r\n}\r\nexport const mockTaskList: BoardTaskList =\r\n{\r\n    id: \"1\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List 1111111111111111111111111111111111111111111111111111111111111111111111111111\",\r\n    boardTasks: [mockTask, mockTaskLotOfText]\r\n};\r\nexport const mockTaskListLotOfText: BoardTaskList =\r\n{\r\n    id: \"2\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\r\n    boardTasks: []\r\n};\r\nexport const mockBoard: Board =\r\n{\r\n    id: \"1\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 1\",\r\n}\r\nexport const mockBoard2: Board =\r\n{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2\",\r\n}\r\nexport const mockBoardLotOfText: Board =\r\n{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2 with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeee\",\r\n}\r\nconst allMockTasks = [mockTask, mockTaskLotOfText];\r\nvar mockTaskLists = [mockTaskList];\r\nvar mockBoards = [mockBoard, mockBoard2];\r\n@Injectable()\r\nexport class MockTaskListService extends TaskListService {\r\n    private observables: Map<string, BehaviorSubject<BoardTaskList[]>> = new Map();\r\n\r\n\r\n    override getTaskListsByBoardId(id: string): Observable<BoardTaskList[]> {\r\n        var obs = new BehaviorSubject(mockTaskLists.filter(x => x.boardId == id));\r\n        this.observables.set(id, obs);\r\n        return obs;\r\n    }\r\n    override getTaskListById(id: string): Observable<BoardTaskList | undefined> {\r\n        return of(mockTaskLists.find(x => x.id == id));\r\n    }\r\n    override createTaskList(taskList: BoardTaskList): void {\r\n        taskList.id = this.getRandomInt(10000).toString();\r\n        mockTaskLists.push(taskList);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    override updateTaskList(taskList: BoardTaskList): void {\r\n        var oldListData = mockTaskLists.find(x => x.id == taskList.id);\r\n        if (oldListData)\r\n            copyTaskListValues(oldListData, taskList);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    override deleteTaskList(taskList: BoardTaskList): void {\r\n        mockTaskLists = mockTaskLists.filter(x => x.id != taskList.id);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    private getRandomInt(max: number) {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n}\r\n@Injectable()\r\nexport class MockTaskService extends TaskService {\r\n    override createTask(task: BoardTask): void {\r\n        var taskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (taskList) {\r\n            taskList.boardTasks.unshift(task);\r\n        }\r\n    }\r\n    override updateTask(prevTaskList: BoardTaskList, task: BoardTask, currentIndex: number): void {\r\n        var oldTaskData = allMockTasks.find(x => x.id == task.id);\r\n        if (oldTaskData)\r\n            copyTaskValues(oldTaskData, task);\r\n        var currentTaskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (currentTaskList) {\r\n            if (prevTaskList.id == task.boardTaskListId) {\r\n                var oldTaskIndex = currentTaskList.boardTasks.findIndex(x => x.id == task.id);\r\n                moveItemInArray(currentTaskList.boardTasks, oldTaskIndex, currentIndex);\r\n            }\r\n            else {\r\n                prevTaskList.boardTasks = prevTaskList.boardTasks.filter(x => x.id != task.id);\r\n                this.createTask(task);\r\n                moveItemInArray(currentTaskList.boardTasks, 0, currentIndex);\r\n            }\r\n        }\r\n    }\r\n    override deleteTask(task: BoardTask): void {\r\n        var taskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (taskList) {\r\n            taskList.boardTasks = taskList.boardTasks.filter(x => x.id != task.id);\r\n        }\r\n    }\r\n}\r\nconst mockTaskActivities: BoardTaskActivity[] =\r\n    [\r\n        {\r\n            id: \"1\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription1\"\r\n        },\r\n        {\r\n            id: \"2\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription2\"\r\n        },\r\n        {\r\n            id: \"3\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription3\"\r\n        },\r\n        {\r\n            id: \"4\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        },\r\n        {\r\n            id: \"5\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        }\r\n    ]\r\n@Injectable()\r\nexport class MockActivityService extends ActivityService {\r\n    override getTaskActivitiesByTaskId(taskId: string): Observable<BoardTaskActivity[]> {\r\n        return of(mockTaskActivities.filter(x => x.boardTaskId == taskId));\r\n    }\r\n    override getBoardActivitiesOnPageByBoardId(id: string, page: number, amountOnPage: number): Observable<BoardActivity[]> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override getBoardActivityAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override createTaskActivity(activityType: ActivityType, taskActivityData: TaskActivityData): void {\r\n    }\r\n    override createTaskListActivity(activityType: ActivityType, listActivityData: TaskListActivityData): void {\r\n    }\r\n}\r\nexport class MockMatDialogRef<T> {\r\n    close(value = ''): void { }\r\n    afterClosed() {\r\n        return of(true);\r\n    }\r\n}\r\nvar currentBoard: BehaviorSubject<Board | undefined>;\r\n@Injectable()\r\nexport class MockBoardService extends BoardService {\r\n    override getBoardsByUserId(): Observable<Board[]> {\r\n        return of(mockBoards);\r\n    }\r\n    override getBoardById(id: string): Observable<Board | undefined> {\r\n        var board = mockBoards.find(x => x.id == id);\r\n        currentBoard = new BehaviorSubject(board);\r\n        return currentBoard;\r\n    }\r\n    override getTaskListsAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override getTasksAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override createBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override updateBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override deleteBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n@Injectable()\r\nexport class MockRedirectorService extends RedirectorService {\r\n    override redirectToHome(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override redirectToBoard(boardId: string): void {\r\n        var board = mockBoards.find(x => x.id == boardId);\r\n        currentBoard.next(board);\r\n    }\r\n}",
            "extends": [
                "ActivityService"
            ],
            "type": "injectable"
        },
        {
            "name": "MockBoardService",
            "id": "injectable-MockBoardService-5a273134e3a6d3e4cc2d1a4f0e728834b4344f07076a45cc28e85b22d92bde1dab39c2a6a37ad5c3b0a4e2b1c96bcf91ce3dfae0aa9c21f37cd76c9eb44401a6",
            "file": "src/stories/task-board/tasks/mockServices.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BoardService"
                    }
                },
                {
                    "name": "deleteBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BoardService"
                    }
                },
                {
                    "name": "getBoardById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Board | undefined>",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BoardService"
                    }
                },
                {
                    "name": "getBoardsByUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Board[]>",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "BoardService"
                    }
                },
                {
                    "name": "getTaskListsAmountByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BoardService"
                    }
                },
                {
                    "name": "getTasksAmountByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BoardService"
                    }
                },
                {
                    "name": "updateBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BoardService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { moveItemInArray } from \"@angular/cdk/drag-drop\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable, of } from \"rxjs\";\r\nimport { ActivityService, TaskActivityData, TaskListActivityData } from \"../../../app/modules/action-history\";\r\nimport { ActivityType, Board, BoardActivity, BoardTask, BoardTaskActivity, BoardTaskList, Priority, RedirectorService, copyTaskListValues, copyTaskValues } from \"../../../app/modules/shared\";\r\nimport { BoardService, TaskListService, TaskService } from \"../../../app/modules/task-board\";\r\n\r\nexport const mockTask: BoardTask = {\r\n    id: \"1\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test Task 1\",\r\n    description: \"Description\",\r\n    priority: Priority.High\r\n}\r\nexport const mockTaskLotOfText: BoardTask = {\r\n    id: \"2\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test with a lot of textttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt\",\r\n    description: \"Descriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\",\r\n    priority: Priority.High\r\n}\r\nexport const mockTaskList: BoardTaskList =\r\n{\r\n    id: \"1\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List 1111111111111111111111111111111111111111111111111111111111111111111111111111\",\r\n    boardTasks: [mockTask, mockTaskLotOfText]\r\n};\r\nexport const mockTaskListLotOfText: BoardTaskList =\r\n{\r\n    id: \"2\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\r\n    boardTasks: []\r\n};\r\nexport const mockBoard: Board =\r\n{\r\n    id: \"1\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 1\",\r\n}\r\nexport const mockBoard2: Board =\r\n{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2\",\r\n}\r\nexport const mockBoardLotOfText: Board =\r\n{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2 with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeee\",\r\n}\r\nconst allMockTasks = [mockTask, mockTaskLotOfText];\r\nvar mockTaskLists = [mockTaskList];\r\nvar mockBoards = [mockBoard, mockBoard2];\r\n@Injectable()\r\nexport class MockTaskListService extends TaskListService {\r\n    private observables: Map<string, BehaviorSubject<BoardTaskList[]>> = new Map();\r\n\r\n\r\n    override getTaskListsByBoardId(id: string): Observable<BoardTaskList[]> {\r\n        var obs = new BehaviorSubject(mockTaskLists.filter(x => x.boardId == id));\r\n        this.observables.set(id, obs);\r\n        return obs;\r\n    }\r\n    override getTaskListById(id: string): Observable<BoardTaskList | undefined> {\r\n        return of(mockTaskLists.find(x => x.id == id));\r\n    }\r\n    override createTaskList(taskList: BoardTaskList): void {\r\n        taskList.id = this.getRandomInt(10000).toString();\r\n        mockTaskLists.push(taskList);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    override updateTaskList(taskList: BoardTaskList): void {\r\n        var oldListData = mockTaskLists.find(x => x.id == taskList.id);\r\n        if (oldListData)\r\n            copyTaskListValues(oldListData, taskList);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    override deleteTaskList(taskList: BoardTaskList): void {\r\n        mockTaskLists = mockTaskLists.filter(x => x.id != taskList.id);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    private getRandomInt(max: number) {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n}\r\n@Injectable()\r\nexport class MockTaskService extends TaskService {\r\n    override createTask(task: BoardTask): void {\r\n        var taskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (taskList) {\r\n            taskList.boardTasks.unshift(task);\r\n        }\r\n    }\r\n    override updateTask(prevTaskList: BoardTaskList, task: BoardTask, currentIndex: number): void {\r\n        var oldTaskData = allMockTasks.find(x => x.id == task.id);\r\n        if (oldTaskData)\r\n            copyTaskValues(oldTaskData, task);\r\n        var currentTaskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (currentTaskList) {\r\n            if (prevTaskList.id == task.boardTaskListId) {\r\n                var oldTaskIndex = currentTaskList.boardTasks.findIndex(x => x.id == task.id);\r\n                moveItemInArray(currentTaskList.boardTasks, oldTaskIndex, currentIndex);\r\n            }\r\n            else {\r\n                prevTaskList.boardTasks = prevTaskList.boardTasks.filter(x => x.id != task.id);\r\n                this.createTask(task);\r\n                moveItemInArray(currentTaskList.boardTasks, 0, currentIndex);\r\n            }\r\n        }\r\n    }\r\n    override deleteTask(task: BoardTask): void {\r\n        var taskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (taskList) {\r\n            taskList.boardTasks = taskList.boardTasks.filter(x => x.id != task.id);\r\n        }\r\n    }\r\n}\r\nconst mockTaskActivities: BoardTaskActivity[] =\r\n    [\r\n        {\r\n            id: \"1\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription1\"\r\n        },\r\n        {\r\n            id: \"2\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription2\"\r\n        },\r\n        {\r\n            id: \"3\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription3\"\r\n        },\r\n        {\r\n            id: \"4\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        },\r\n        {\r\n            id: \"5\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        }\r\n    ]\r\n@Injectable()\r\nexport class MockActivityService extends ActivityService {\r\n    override getTaskActivitiesByTaskId(taskId: string): Observable<BoardTaskActivity[]> {\r\n        return of(mockTaskActivities.filter(x => x.boardTaskId == taskId));\r\n    }\r\n    override getBoardActivitiesOnPageByBoardId(id: string, page: number, amountOnPage: number): Observable<BoardActivity[]> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override getBoardActivityAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override createTaskActivity(activityType: ActivityType, taskActivityData: TaskActivityData): void {\r\n    }\r\n    override createTaskListActivity(activityType: ActivityType, listActivityData: TaskListActivityData): void {\r\n    }\r\n}\r\nexport class MockMatDialogRef<T> {\r\n    close(value = ''): void { }\r\n    afterClosed() {\r\n        return of(true);\r\n    }\r\n}\r\nvar currentBoard: BehaviorSubject<Board | undefined>;\r\n@Injectable()\r\nexport class MockBoardService extends BoardService {\r\n    override getBoardsByUserId(): Observable<Board[]> {\r\n        return of(mockBoards);\r\n    }\r\n    override getBoardById(id: string): Observable<Board | undefined> {\r\n        var board = mockBoards.find(x => x.id == id);\r\n        currentBoard = new BehaviorSubject(board);\r\n        return currentBoard;\r\n    }\r\n    override getTaskListsAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override getTasksAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override createBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override updateBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override deleteBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n@Injectable()\r\nexport class MockRedirectorService extends RedirectorService {\r\n    override redirectToHome(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override redirectToBoard(boardId: string): void {\r\n        var board = mockBoards.find(x => x.id == boardId);\r\n        currentBoard.next(board);\r\n    }\r\n}",
            "extends": [
                "BoardService"
            ],
            "type": "injectable"
        },
        {
            "name": "MockRedirectorService",
            "id": "injectable-MockRedirectorService-5a273134e3a6d3e4cc2d1a4f0e728834b4344f07076a45cc28e85b22d92bde1dab39c2a6a37ad5c3b0a4e2b1c96bcf91ce3dfae0aa9c21f37cd76c9eb44401a6",
            "file": "src/stories/task-board/tasks/mockServices.ts",
            "properties": [],
            "methods": [
                {
                    "name": "redirectToBoard",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "RedirectorService"
                    }
                },
                {
                    "name": "redirectToHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "RedirectorService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { moveItemInArray } from \"@angular/cdk/drag-drop\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable, of } from \"rxjs\";\r\nimport { ActivityService, TaskActivityData, TaskListActivityData } from \"../../../app/modules/action-history\";\r\nimport { ActivityType, Board, BoardActivity, BoardTask, BoardTaskActivity, BoardTaskList, Priority, RedirectorService, copyTaskListValues, copyTaskValues } from \"../../../app/modules/shared\";\r\nimport { BoardService, TaskListService, TaskService } from \"../../../app/modules/task-board\";\r\n\r\nexport const mockTask: BoardTask = {\r\n    id: \"1\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test Task 1\",\r\n    description: \"Description\",\r\n    priority: Priority.High\r\n}\r\nexport const mockTaskLotOfText: BoardTask = {\r\n    id: \"2\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test with a lot of textttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt\",\r\n    description: \"Descriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\",\r\n    priority: Priority.High\r\n}\r\nexport const mockTaskList: BoardTaskList =\r\n{\r\n    id: \"1\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List 1111111111111111111111111111111111111111111111111111111111111111111111111111\",\r\n    boardTasks: [mockTask, mockTaskLotOfText]\r\n};\r\nexport const mockTaskListLotOfText: BoardTaskList =\r\n{\r\n    id: \"2\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\r\n    boardTasks: []\r\n};\r\nexport const mockBoard: Board =\r\n{\r\n    id: \"1\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 1\",\r\n}\r\nexport const mockBoard2: Board =\r\n{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2\",\r\n}\r\nexport const mockBoardLotOfText: Board =\r\n{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2 with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeee\",\r\n}\r\nconst allMockTasks = [mockTask, mockTaskLotOfText];\r\nvar mockTaskLists = [mockTaskList];\r\nvar mockBoards = [mockBoard, mockBoard2];\r\n@Injectable()\r\nexport class MockTaskListService extends TaskListService {\r\n    private observables: Map<string, BehaviorSubject<BoardTaskList[]>> = new Map();\r\n\r\n\r\n    override getTaskListsByBoardId(id: string): Observable<BoardTaskList[]> {\r\n        var obs = new BehaviorSubject(mockTaskLists.filter(x => x.boardId == id));\r\n        this.observables.set(id, obs);\r\n        return obs;\r\n    }\r\n    override getTaskListById(id: string): Observable<BoardTaskList | undefined> {\r\n        return of(mockTaskLists.find(x => x.id == id));\r\n    }\r\n    override createTaskList(taskList: BoardTaskList): void {\r\n        taskList.id = this.getRandomInt(10000).toString();\r\n        mockTaskLists.push(taskList);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    override updateTaskList(taskList: BoardTaskList): void {\r\n        var oldListData = mockTaskLists.find(x => x.id == taskList.id);\r\n        if (oldListData)\r\n            copyTaskListValues(oldListData, taskList);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    override deleteTaskList(taskList: BoardTaskList): void {\r\n        mockTaskLists = mockTaskLists.filter(x => x.id != taskList.id);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    private getRandomInt(max: number) {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n}\r\n@Injectable()\r\nexport class MockTaskService extends TaskService {\r\n    override createTask(task: BoardTask): void {\r\n        var taskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (taskList) {\r\n            taskList.boardTasks.unshift(task);\r\n        }\r\n    }\r\n    override updateTask(prevTaskList: BoardTaskList, task: BoardTask, currentIndex: number): void {\r\n        var oldTaskData = allMockTasks.find(x => x.id == task.id);\r\n        if (oldTaskData)\r\n            copyTaskValues(oldTaskData, task);\r\n        var currentTaskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (currentTaskList) {\r\n            if (prevTaskList.id == task.boardTaskListId) {\r\n                var oldTaskIndex = currentTaskList.boardTasks.findIndex(x => x.id == task.id);\r\n                moveItemInArray(currentTaskList.boardTasks, oldTaskIndex, currentIndex);\r\n            }\r\n            else {\r\n                prevTaskList.boardTasks = prevTaskList.boardTasks.filter(x => x.id != task.id);\r\n                this.createTask(task);\r\n                moveItemInArray(currentTaskList.boardTasks, 0, currentIndex);\r\n            }\r\n        }\r\n    }\r\n    override deleteTask(task: BoardTask): void {\r\n        var taskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (taskList) {\r\n            taskList.boardTasks = taskList.boardTasks.filter(x => x.id != task.id);\r\n        }\r\n    }\r\n}\r\nconst mockTaskActivities: BoardTaskActivity[] =\r\n    [\r\n        {\r\n            id: \"1\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription1\"\r\n        },\r\n        {\r\n            id: \"2\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription2\"\r\n        },\r\n        {\r\n            id: \"3\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription3\"\r\n        },\r\n        {\r\n            id: \"4\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        },\r\n        {\r\n            id: \"5\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        }\r\n    ]\r\n@Injectable()\r\nexport class MockActivityService extends ActivityService {\r\n    override getTaskActivitiesByTaskId(taskId: string): Observable<BoardTaskActivity[]> {\r\n        return of(mockTaskActivities.filter(x => x.boardTaskId == taskId));\r\n    }\r\n    override getBoardActivitiesOnPageByBoardId(id: string, page: number, amountOnPage: number): Observable<BoardActivity[]> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override getBoardActivityAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override createTaskActivity(activityType: ActivityType, taskActivityData: TaskActivityData): void {\r\n    }\r\n    override createTaskListActivity(activityType: ActivityType, listActivityData: TaskListActivityData): void {\r\n    }\r\n}\r\nexport class MockMatDialogRef<T> {\r\n    close(value = ''): void { }\r\n    afterClosed() {\r\n        return of(true);\r\n    }\r\n}\r\nvar currentBoard: BehaviorSubject<Board | undefined>;\r\n@Injectable()\r\nexport class MockBoardService extends BoardService {\r\n    override getBoardsByUserId(): Observable<Board[]> {\r\n        return of(mockBoards);\r\n    }\r\n    override getBoardById(id: string): Observable<Board | undefined> {\r\n        var board = mockBoards.find(x => x.id == id);\r\n        currentBoard = new BehaviorSubject(board);\r\n        return currentBoard;\r\n    }\r\n    override getTaskListsAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override getTasksAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override createBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override updateBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override deleteBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n@Injectable()\r\nexport class MockRedirectorService extends RedirectorService {\r\n    override redirectToHome(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override redirectToBoard(boardId: string): void {\r\n        var board = mockBoards.find(x => x.id == boardId);\r\n        currentBoard.next(board);\r\n    }\r\n}",
            "extends": [
                "RedirectorService"
            ],
            "type": "injectable"
        },
        {
            "name": "MockTaskListService",
            "id": "injectable-MockTaskListService-5a273134e3a6d3e4cc2d1a4f0e728834b4344f07076a45cc28e85b22d92bde1dab39c2a6a37ad5c3b0a4e2b1c96bcf91ce3dfae0aa9c21f37cd76c9eb44401a6",
            "file": "src/stories/task-board/tasks/mockServices.ts",
            "properties": [
                {
                    "name": "observables",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | BehaviorSubject<BoardTaskList[]>>",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createTaskList",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "TaskListService"
                    }
                },
                {
                    "name": "deleteTaskList",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "TaskListService"
                    }
                },
                {
                    "name": "getRandomInt",
                    "args": [
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskListById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BoardTaskList | undefined>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "TaskListService"
                    }
                },
                {
                    "name": "getTaskListsByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BoardTaskList[]>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "TaskListService"
                    }
                },
                {
                    "name": "updateTaskList",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "TaskListService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { moveItemInArray } from \"@angular/cdk/drag-drop\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable, of } from \"rxjs\";\r\nimport { ActivityService, TaskActivityData, TaskListActivityData } from \"../../../app/modules/action-history\";\r\nimport { ActivityType, Board, BoardActivity, BoardTask, BoardTaskActivity, BoardTaskList, Priority, RedirectorService, copyTaskListValues, copyTaskValues } from \"../../../app/modules/shared\";\r\nimport { BoardService, TaskListService, TaskService } from \"../../../app/modules/task-board\";\r\n\r\nexport const mockTask: BoardTask = {\r\n    id: \"1\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test Task 1\",\r\n    description: \"Description\",\r\n    priority: Priority.High\r\n}\r\nexport const mockTaskLotOfText: BoardTask = {\r\n    id: \"2\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test with a lot of textttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt\",\r\n    description: \"Descriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\",\r\n    priority: Priority.High\r\n}\r\nexport const mockTaskList: BoardTaskList =\r\n{\r\n    id: \"1\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List 1111111111111111111111111111111111111111111111111111111111111111111111111111\",\r\n    boardTasks: [mockTask, mockTaskLotOfText]\r\n};\r\nexport const mockTaskListLotOfText: BoardTaskList =\r\n{\r\n    id: \"2\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\r\n    boardTasks: []\r\n};\r\nexport const mockBoard: Board =\r\n{\r\n    id: \"1\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 1\",\r\n}\r\nexport const mockBoard2: Board =\r\n{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2\",\r\n}\r\nexport const mockBoardLotOfText: Board =\r\n{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2 with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeee\",\r\n}\r\nconst allMockTasks = [mockTask, mockTaskLotOfText];\r\nvar mockTaskLists = [mockTaskList];\r\nvar mockBoards = [mockBoard, mockBoard2];\r\n@Injectable()\r\nexport class MockTaskListService extends TaskListService {\r\n    private observables: Map<string, BehaviorSubject<BoardTaskList[]>> = new Map();\r\n\r\n\r\n    override getTaskListsByBoardId(id: string): Observable<BoardTaskList[]> {\r\n        var obs = new BehaviorSubject(mockTaskLists.filter(x => x.boardId == id));\r\n        this.observables.set(id, obs);\r\n        return obs;\r\n    }\r\n    override getTaskListById(id: string): Observable<BoardTaskList | undefined> {\r\n        return of(mockTaskLists.find(x => x.id == id));\r\n    }\r\n    override createTaskList(taskList: BoardTaskList): void {\r\n        taskList.id = this.getRandomInt(10000).toString();\r\n        mockTaskLists.push(taskList);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    override updateTaskList(taskList: BoardTaskList): void {\r\n        var oldListData = mockTaskLists.find(x => x.id == taskList.id);\r\n        if (oldListData)\r\n            copyTaskListValues(oldListData, taskList);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    override deleteTaskList(taskList: BoardTaskList): void {\r\n        mockTaskLists = mockTaskLists.filter(x => x.id != taskList.id);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    private getRandomInt(max: number) {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n}\r\n@Injectable()\r\nexport class MockTaskService extends TaskService {\r\n    override createTask(task: BoardTask): void {\r\n        var taskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (taskList) {\r\n            taskList.boardTasks.unshift(task);\r\n        }\r\n    }\r\n    override updateTask(prevTaskList: BoardTaskList, task: BoardTask, currentIndex: number): void {\r\n        var oldTaskData = allMockTasks.find(x => x.id == task.id);\r\n        if (oldTaskData)\r\n            copyTaskValues(oldTaskData, task);\r\n        var currentTaskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (currentTaskList) {\r\n            if (prevTaskList.id == task.boardTaskListId) {\r\n                var oldTaskIndex = currentTaskList.boardTasks.findIndex(x => x.id == task.id);\r\n                moveItemInArray(currentTaskList.boardTasks, oldTaskIndex, currentIndex);\r\n            }\r\n            else {\r\n                prevTaskList.boardTasks = prevTaskList.boardTasks.filter(x => x.id != task.id);\r\n                this.createTask(task);\r\n                moveItemInArray(currentTaskList.boardTasks, 0, currentIndex);\r\n            }\r\n        }\r\n    }\r\n    override deleteTask(task: BoardTask): void {\r\n        var taskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (taskList) {\r\n            taskList.boardTasks = taskList.boardTasks.filter(x => x.id != task.id);\r\n        }\r\n    }\r\n}\r\nconst mockTaskActivities: BoardTaskActivity[] =\r\n    [\r\n        {\r\n            id: \"1\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription1\"\r\n        },\r\n        {\r\n            id: \"2\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription2\"\r\n        },\r\n        {\r\n            id: \"3\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription3\"\r\n        },\r\n        {\r\n            id: \"4\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        },\r\n        {\r\n            id: \"5\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        }\r\n    ]\r\n@Injectable()\r\nexport class MockActivityService extends ActivityService {\r\n    override getTaskActivitiesByTaskId(taskId: string): Observable<BoardTaskActivity[]> {\r\n        return of(mockTaskActivities.filter(x => x.boardTaskId == taskId));\r\n    }\r\n    override getBoardActivitiesOnPageByBoardId(id: string, page: number, amountOnPage: number): Observable<BoardActivity[]> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override getBoardActivityAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override createTaskActivity(activityType: ActivityType, taskActivityData: TaskActivityData): void {\r\n    }\r\n    override createTaskListActivity(activityType: ActivityType, listActivityData: TaskListActivityData): void {\r\n    }\r\n}\r\nexport class MockMatDialogRef<T> {\r\n    close(value = ''): void { }\r\n    afterClosed() {\r\n        return of(true);\r\n    }\r\n}\r\nvar currentBoard: BehaviorSubject<Board | undefined>;\r\n@Injectable()\r\nexport class MockBoardService extends BoardService {\r\n    override getBoardsByUserId(): Observable<Board[]> {\r\n        return of(mockBoards);\r\n    }\r\n    override getBoardById(id: string): Observable<Board | undefined> {\r\n        var board = mockBoards.find(x => x.id == id);\r\n        currentBoard = new BehaviorSubject(board);\r\n        return currentBoard;\r\n    }\r\n    override getTaskListsAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override getTasksAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override createBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override updateBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override deleteBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n@Injectable()\r\nexport class MockRedirectorService extends RedirectorService {\r\n    override redirectToHome(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override redirectToBoard(boardId: string): void {\r\n        var board = mockBoards.find(x => x.id == boardId);\r\n        currentBoard.next(board);\r\n    }\r\n}",
            "extends": [
                "TaskListService"
            ],
            "type": "injectable"
        },
        {
            "name": "MockTaskService",
            "id": "injectable-MockTaskService-5a273134e3a6d3e4cc2d1a4f0e728834b4344f07076a45cc28e85b22d92bde1dab39c2a6a37ad5c3b0a4e2b1c96bcf91ce3dfae0aa9c21f37cd76c9eb44401a6",
            "file": "src/stories/task-board/tasks/mockServices.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "TaskService"
                    }
                },
                {
                    "name": "deleteTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "TaskService"
                    }
                },
                {
                    "name": "updateTask",
                    "args": [
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "TaskService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { moveItemInArray } from \"@angular/cdk/drag-drop\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable, of } from \"rxjs\";\r\nimport { ActivityService, TaskActivityData, TaskListActivityData } from \"../../../app/modules/action-history\";\r\nimport { ActivityType, Board, BoardActivity, BoardTask, BoardTaskActivity, BoardTaskList, Priority, RedirectorService, copyTaskListValues, copyTaskValues } from \"../../../app/modules/shared\";\r\nimport { BoardService, TaskListService, TaskService } from \"../../../app/modules/task-board\";\r\n\r\nexport const mockTask: BoardTask = {\r\n    id: \"1\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test Task 1\",\r\n    description: \"Description\",\r\n    priority: Priority.High\r\n}\r\nexport const mockTaskLotOfText: BoardTask = {\r\n    id: \"2\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test with a lot of textttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt\",\r\n    description: \"Descriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\",\r\n    priority: Priority.High\r\n}\r\nexport const mockTaskList: BoardTaskList =\r\n{\r\n    id: \"1\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List 1111111111111111111111111111111111111111111111111111111111111111111111111111\",\r\n    boardTasks: [mockTask, mockTaskLotOfText]\r\n};\r\nexport const mockTaskListLotOfText: BoardTaskList =\r\n{\r\n    id: \"2\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\r\n    boardTasks: []\r\n};\r\nexport const mockBoard: Board =\r\n{\r\n    id: \"1\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 1\",\r\n}\r\nexport const mockBoard2: Board =\r\n{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2\",\r\n}\r\nexport const mockBoardLotOfText: Board =\r\n{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2 with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeee\",\r\n}\r\nconst allMockTasks = [mockTask, mockTaskLotOfText];\r\nvar mockTaskLists = [mockTaskList];\r\nvar mockBoards = [mockBoard, mockBoard2];\r\n@Injectable()\r\nexport class MockTaskListService extends TaskListService {\r\n    private observables: Map<string, BehaviorSubject<BoardTaskList[]>> = new Map();\r\n\r\n\r\n    override getTaskListsByBoardId(id: string): Observable<BoardTaskList[]> {\r\n        var obs = new BehaviorSubject(mockTaskLists.filter(x => x.boardId == id));\r\n        this.observables.set(id, obs);\r\n        return obs;\r\n    }\r\n    override getTaskListById(id: string): Observable<BoardTaskList | undefined> {\r\n        return of(mockTaskLists.find(x => x.id == id));\r\n    }\r\n    override createTaskList(taskList: BoardTaskList): void {\r\n        taskList.id = this.getRandomInt(10000).toString();\r\n        mockTaskLists.push(taskList);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    override updateTaskList(taskList: BoardTaskList): void {\r\n        var oldListData = mockTaskLists.find(x => x.id == taskList.id);\r\n        if (oldListData)\r\n            copyTaskListValues(oldListData, taskList);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    override deleteTaskList(taskList: BoardTaskList): void {\r\n        mockTaskLists = mockTaskLists.filter(x => x.id != taskList.id);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    private getRandomInt(max: number) {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n}\r\n@Injectable()\r\nexport class MockTaskService extends TaskService {\r\n    override createTask(task: BoardTask): void {\r\n        var taskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (taskList) {\r\n            taskList.boardTasks.unshift(task);\r\n        }\r\n    }\r\n    override updateTask(prevTaskList: BoardTaskList, task: BoardTask, currentIndex: number): void {\r\n        var oldTaskData = allMockTasks.find(x => x.id == task.id);\r\n        if (oldTaskData)\r\n            copyTaskValues(oldTaskData, task);\r\n        var currentTaskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (currentTaskList) {\r\n            if (prevTaskList.id == task.boardTaskListId) {\r\n                var oldTaskIndex = currentTaskList.boardTasks.findIndex(x => x.id == task.id);\r\n                moveItemInArray(currentTaskList.boardTasks, oldTaskIndex, currentIndex);\r\n            }\r\n            else {\r\n                prevTaskList.boardTasks = prevTaskList.boardTasks.filter(x => x.id != task.id);\r\n                this.createTask(task);\r\n                moveItemInArray(currentTaskList.boardTasks, 0, currentIndex);\r\n            }\r\n        }\r\n    }\r\n    override deleteTask(task: BoardTask): void {\r\n        var taskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (taskList) {\r\n            taskList.boardTasks = taskList.boardTasks.filter(x => x.id != task.id);\r\n        }\r\n    }\r\n}\r\nconst mockTaskActivities: BoardTaskActivity[] =\r\n    [\r\n        {\r\n            id: \"1\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription1\"\r\n        },\r\n        {\r\n            id: \"2\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription2\"\r\n        },\r\n        {\r\n            id: \"3\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription3\"\r\n        },\r\n        {\r\n            id: \"4\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        },\r\n        {\r\n            id: \"5\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        }\r\n    ]\r\n@Injectable()\r\nexport class MockActivityService extends ActivityService {\r\n    override getTaskActivitiesByTaskId(taskId: string): Observable<BoardTaskActivity[]> {\r\n        return of(mockTaskActivities.filter(x => x.boardTaskId == taskId));\r\n    }\r\n    override getBoardActivitiesOnPageByBoardId(id: string, page: number, amountOnPage: number): Observable<BoardActivity[]> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override getBoardActivityAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override createTaskActivity(activityType: ActivityType, taskActivityData: TaskActivityData): void {\r\n    }\r\n    override createTaskListActivity(activityType: ActivityType, listActivityData: TaskListActivityData): void {\r\n    }\r\n}\r\nexport class MockMatDialogRef<T> {\r\n    close(value = ''): void { }\r\n    afterClosed() {\r\n        return of(true);\r\n    }\r\n}\r\nvar currentBoard: BehaviorSubject<Board | undefined>;\r\n@Injectable()\r\nexport class MockBoardService extends BoardService {\r\n    override getBoardsByUserId(): Observable<Board[]> {\r\n        return of(mockBoards);\r\n    }\r\n    override getBoardById(id: string): Observable<Board | undefined> {\r\n        var board = mockBoards.find(x => x.id == id);\r\n        currentBoard = new BehaviorSubject(board);\r\n        return currentBoard;\r\n    }\r\n    override getTaskListsAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override getTasksAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override createBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override updateBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override deleteBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n@Injectable()\r\nexport class MockRedirectorService extends RedirectorService {\r\n    override redirectToHome(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override redirectToBoard(boardId: string): void {\r\n        var board = mockBoards.find(x => x.id == boardId);\r\n        currentBoard.next(board);\r\n    }\r\n}",
            "extends": [
                "TaskService"
            ],
            "type": "injectable"
        },
        {
            "name": "PriorityConvertorService",
            "id": "injectable-PriorityConvertorService-e7e0f535d16ef33ca437a708c4dd3a593f03dd08b8375abf6af8dbd7f1986d8fd69a1bac6c3028341039804e1a408154e078cc1b161bfd1a397f406c065f40d4",
            "file": "src/app/modules/shared/services/priority-convertor/priority-convertor.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllPrioritiesString",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "getPriorityString",
                    "args": [
                        {
                            "name": "priority",
                            "type": "Priority",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "priority",
                            "type": "Priority",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Priority } from '../../enums/priority.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PriorityConvertorService {\r\n\r\n  static getAllPrioritiesString(): string[] {\r\n    const priorityNames: string[] = [];\r\n    priorityNames.push(\"Low\");\r\n    priorityNames.push(\"Medium\");\r\n    priorityNames.push(\"High\");\r\n    return priorityNames;\r\n  }\r\n  static getPriorityString(priority: Priority): string {\r\n    switch (priority) {\r\n      case Priority.Low:\r\n        return 'Low';\r\n      case Priority.Medium:\r\n        return 'Medium';\r\n      case Priority.High:\r\n        return 'High';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RedirectorContollerService",
            "id": "injectable-RedirectorContollerService-e37878abc1642da066c8246dcd08d5cac55e9e370230f3aec5aa766cd9451fb4741fbbf288317feee3d7e28ffab53423e83ca1cb1cec90d4fb5851733790682e",
            "file": "src/app/modules/shared/services/redirector/redirector-controller.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "redirectToBoard",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectToHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { RedirectorService } from './redirector.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RedirectorContollerService implements RedirectorService {\r\n\r\n    constructor(private router: Router) { }\r\n\r\n    redirectToHome(): void {\r\n        this.router.navigate(['']);\r\n    }\r\n    redirectToBoard(boardId: string): void {\r\n        this.router.navigate([`/${boardId}`]);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RedirectorService",
            "id": "injectable-RedirectorService-14422d4f6bb6834b2efc6171f2c15c9365ccf433e82f4a4ab30a75163c392e2121eba8f86c048e91689cc6ba0d446c2bf59e15d7fa778ce35b52aa5740c8591a",
            "file": "src/app/modules/shared/services/redirector/redirector.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "redirectToBoard",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectToHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport abstract class RedirectorService {\r\n\r\n  abstract redirectToHome(): void;\r\n  abstract redirectToBoard(boardId: string): void;\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StandartDateFormaterService",
            "id": "injectable-StandartDateFormaterService-bdabde475adf5edde58420fc11ea6971b70d8fa3b91e4454cb098f495f54cad49bc0ef62d426828451a8bc7e84c84c2d6e971b465c0dd1afcfae7a13d2b10816",
            "file": "src/app/modules/shared/services/date-formater/standart-date-formater.service.ts",
            "properties": [
                {
                    "name": "pipe",
                    "defaultValue": "new DatePipe('en-US')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DatePipe } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { DateConfig } from '../../configs/date-config/date-config';\r\nimport { DATE_CONFIG } from '../../configs/date-config/date-config.service';\r\nimport { DateFormaterService } from \"./date-formater.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class StandartDateFormaterService implements DateFormaterService {\r\n    pipe = new DatePipe('en-US');\r\n\r\n    constructor(@Inject(DATE_CONFIG) private dateConfig: DateConfig) { }\r\n\r\n    formatDate(date: Date | undefined) {\r\n        if (!date) return Date.now();\r\n        return this.pipe.transform(date, this.dateConfig.format)!;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dateConfig",
                        "type": "DateConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "dateConfig",
                        "type": "DateConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StringFormaterService",
            "id": "injectable-StringFormaterService-d03dd0fb68f096d64d62461e09b04b7222331a8c97420edaa41ef04d9e46c3ffa73d17d62119d930851aba2a67dc68083554eaeb60335aa40f33d7d36b64727a",
            "file": "src/app/modules/shared/services/string-format/string-format.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StringFormaterService {\r\n  static format(format: string, ...args: any[]): string {\r\n    return format.replace(/{(\\d+)}/g, (match, index) => {\r\n      return typeof args[index] !== 'undefined' ? args[index] : match;\r\n    });\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskActivityApiService",
            "id": "injectable-TaskActivityApiService-844fa9671a9310713b8ae7701f9cd30760d72e82241861c6e226242c081d83f0d034136eee3c65e745d2cf56235796e4e5f3a872e78da6bb9826a73466c9ed02",
            "file": "src/app/modules/shared/services/api/task-acitvity-api/task-activity-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createTaskActivity",
                    "args": [
                        {
                            "name": "acitvity",
                            "type": "BoardTaskActivity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "acitvity",
                            "type": "BoardTaskActivity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskActivitiesByTaskId",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "combinePathWithApiUrl",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "getErrorHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "CustomErrorHandler",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "getHttpClient",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpClient",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { catchError } from 'rxjs';\r\nimport { BaseApiService, BoardTaskActivity } from '../../../index';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskActivityApiService extends BaseApiService {\r\n\r\n  getTaskActivitiesByTaskId(taskId: string) {\r\n    return this.getHttpClient().get<BoardTaskActivity[]>(this.combinePathWithApiUrl(`/BoardTaskActivity/taskActivities/${taskId}`)).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n  createTaskActivity(acitvity: BoardTaskActivity) {\r\n    return this.getHttpClient().post<BoardTaskActivity>(this.combinePathWithApiUrl(`/BoardTaskActivity`), acitvity).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n}\r\n",
            "extends": [
                "BaseApiService"
            ],
            "type": "injectable"
        },
        {
            "name": "TaskApiService",
            "id": "injectable-TaskApiService-f160b466f1b7181ffa30da92b83f87b0905b0ac3c0ed2ec259db885e6e1fc2b3cc98c2385de0d7d8e796c08b1504859f7ccc8c191eca6ab7ce43786ad2fe3e82",
            "file": "src/app/modules/shared/services/api/task-api/task-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskById",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksByListId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "positionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "positionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateTask_Create",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateTask_Update",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "combinePathWithApiUrl",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "getErrorHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "CustomErrorHandler",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "getHttpClient",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpClient",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { catchError } from 'rxjs';\r\nimport { BaseApiService, BoardTask } from '../../../index';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskApiService extends BaseApiService {\r\n\r\n  getTaskById(taskId: string) {\r\n    return this.getHttpClient().get<BoardTask>(this.combinePathWithApiUrl(`/BoardTask/${taskId}`)).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n  getTasksByListId(id: string) {\r\n    return this.getHttpClient().get<BoardTask[]>(this.combinePathWithApiUrl(`/BoardTask/list/${id}`)).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n  createTask(task: BoardTask) {\r\n    this.validateTask_Create(task);\r\n    task = { ...task, creationTime: new Date() };\r\n    return this.getHttpClient().post<BoardTask>(this.combinePathWithApiUrl(`/BoardTask`), task).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n  updateTask(task: BoardTask, positionIndex: number) {\r\n    this.validateTask_Update(task);\r\n    return this.getHttpClient().put(this.combinePathWithApiUrl(`/BoardTask?positionIndex=${positionIndex}`), task).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n  deleteTask(id: string) {\r\n    return this.getHttpClient().delete(this.combinePathWithApiUrl(`/BoardTask/${id}`)).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n  private validateTask_Create(task: BoardTask) {\r\n    if (!task.boardTaskListId)\r\n      throw new Error(\"Task List Id is not set!\");\r\n    else if (task.priority === undefined)\r\n      throw new Error(\"Priority is not set!\");\r\n  }\r\n  private validateTask_Update(task: BoardTask) {\r\n    if (!task.id)\r\n      throw new Error(\"Id is not set!\");\r\n    else if (!task.boardTaskListId)\r\n      throw new Error(\"Task List Id is not set!\");\r\n    else if (!task.creationTime)\r\n      throw new Error(\"Creation time is not set!\");\r\n    else if (task.priority === undefined)\r\n      throw new Error(\"Priority is not set!\");\r\n  }\r\n}",
            "extends": [
                "BaseApiService"
            ],
            "type": "injectable"
        },
        {
            "name": "TaskControllerService",
            "id": "injectable-TaskControllerService-25060bfa7e58a995ca3b6dbd9f1457b23977b9ce2be674d3a40842b06a7ac4cad3541a8e4a28c989f941579ee0af2819a54f219cbf82e635de6d635103024422",
            "file": "src/app/modules/task-board/services/task-service/task-controller.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTask",
                    "args": [
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { BoardTask, BoardTaskList } from '../../../shared';\r\nimport { createTask, deleteTask, updateTask } from '../../index';\r\nimport { TaskService } from './task-service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskControllerService implements TaskService {\r\n\r\n  constructor(private store: Store<{ taskListState: { taskLists: BoardTaskList[] } }>) {\r\n  }\r\n\r\n  createTask(task: BoardTask) {\r\n    this.store.dispatch(createTask({ task }));\r\n  }\r\n  updateTask(prevTaskList: BoardTaskList, task: BoardTask, currentIndex: number) {\r\n    this.store.dispatch(updateTask({ prevTaskList: prevTaskList, task: task, posIndex: currentIndex }));\r\n  }\r\n  deleteTask(task: BoardTask) {\r\n    this.store.dispatch(deleteTask({ taskId: task.id }));\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskEffect",
            "id": "injectable-TaskEffect-06cc4e30d50b49c1384c5982cb3401d25579f12c1028b9741e9a212590781cb5be555bb10a2a540bcc0cc879daa971a22ccddfa0df243569275c5da2e5f538e3",
            "file": "src/app/modules/task-board/store/tasks/task/task.effect.ts",
            "properties": [
                {
                    "name": "createTask$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(createTask),\r\n            mergeMap(action =>\r\n                this.taskApiService.createTask(action.task).pipe(\r\n                    map((task: BoardTask) => {\r\n                        this.createActivity_Create(task);\r\n                        return createTaskSuccess({ task: task });\r\n                    }),\r\n                    catchError(error => of(createTaskFailure({ error }))))\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "deleteTask$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(deleteTask),\r\n            mergeMap(action => {\r\n                this.createActivity_Delete(action.taskId);\r\n                return this.taskApiService.deleteTask(action.taskId).pipe(\r\n                    map(() => deleteTaskSuccess({ taskId: action.taskId })),\r\n                    catchError(error => of(deleteTaskFailure({ error }))));\r\n            })\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "updateTask$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(updateTask),\r\n            switchMap(action => {\r\n                this.createActivity_Update(action.task);\r\n                return this.taskApiService.updateTask(action.task, action.posIndex).pipe(\r\n                    map(() => updateTaskSuccess({ prevTaskList: action.prevTaskList, task: action.task, posIndex: action.posIndex })),\r\n                    catchError(error => of(updateTaskFailure({ error }))));\r\n            })\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methods": [
                {
                    "name": "createActivity_Create",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createActivity_Delete",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createActivity_Update",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskActivityData",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prevTask",
                            "type": "BoardTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskActivityData",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prevTask",
                            "type": "BoardTask | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { catchError, forkJoin, map, mergeMap, of, switchMap } from \"rxjs\";\r\nimport { ActivityService, TaskActivityData } from \"../../../../action-history\";\r\nimport { ActivityType, Board, BoardTask, BoardTaskList, TaskApiService, TaskListApiService, getDefaultBoard } from \"../../../../shared\";\r\nimport { createTask, createTaskFailure, createTaskSuccess, deleteTask, deleteTaskFailure, deleteTaskSuccess, updateTask, updateTaskFailure, updateTaskSuccess } from \"../../../index\";\r\n\r\n@Injectable()\r\nexport class TaskEffect {\r\n    constructor(private actions$: Actions,\r\n        private taskApiService: TaskApiService,\r\n        private taskListApiService: TaskListApiService,\r\n        private activityService: ActivityService) { }\r\n\r\n    createTask$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(createTask),\r\n            mergeMap(action =>\r\n                this.taskApiService.createTask(action.task).pipe(\r\n                    map((task: BoardTask) => {\r\n                        this.createActivity_Create(task);\r\n                        return createTaskSuccess({ task: task });\r\n                    }),\r\n                    catchError(error => of(createTaskFailure({ error }))))\r\n            )\r\n        )\r\n    );\r\n    updateTask$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(updateTask),\r\n            switchMap(action => {\r\n                this.createActivity_Update(action.task);\r\n                return this.taskApiService.updateTask(action.task, action.posIndex).pipe(\r\n                    map(() => updateTaskSuccess({ prevTaskList: action.prevTaskList, task: action.task, posIndex: action.posIndex })),\r\n                    catchError(error => of(updateTaskFailure({ error }))));\r\n            })\r\n        )\r\n    );\r\n    deleteTask$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(deleteTask),\r\n            mergeMap(action => {\r\n                this.createActivity_Delete(action.taskId);\r\n                return this.taskApiService.deleteTask(action.taskId).pipe(\r\n                    map(() => deleteTaskSuccess({ taskId: action.taskId })),\r\n                    catchError(error => of(deleteTaskFailure({ error }))));\r\n            })\r\n        )\r\n    );\r\n    private createActivity_Create(task: BoardTask) {\r\n        this.taskListApiService.getTaskListById(task.boardTaskListId).subscribe(list => {\r\n            if (list) {\r\n                this.activityService.createTaskActivity(ActivityType.Create,\r\n                    this.createTaskActivityData(task, undefined, list, { ...getDefaultBoard(), id: list.boardId }));\r\n            }\r\n        });\r\n    }\r\n    private createActivity_Update(task: BoardTask) {\r\n        const taskList$ = this.taskListApiService.getTaskListById(task.boardTaskListId);\r\n        const prevTask$ = this.taskApiService.getTaskById(task.id);\r\n        forkJoin([taskList$, prevTask$]).subscribe(([list, prevTask]) => {\r\n            if (list && prevTask) {\r\n                this.activityService.createTaskActivity(ActivityType.Update,\r\n                    this.createTaskActivityData(task, prevTask, list, { ...getDefaultBoard(), id: list.boardId }));\r\n            }\r\n        });\r\n    }\r\n    private createActivity_Delete(taskId: string) {\r\n        this.taskApiService.getTaskById(taskId).subscribe((task) => {\r\n            if (task) {\r\n                this.taskListApiService.getTaskListById(task.boardTaskListId).subscribe(list => {\r\n                    if (list) {\r\n                        this.activityService.createTaskActivity(ActivityType.Delete,\r\n                            this.createTaskActivityData(task, undefined, list, { ...getDefaultBoard(), id: list.boardId }));\r\n                    }\r\n                });\r\n            }\r\n        })\r\n    }\r\n    private createTaskActivityData(task: BoardTask, prevTask: BoardTask | undefined, taskList: BoardTaskList, board: Board) {\r\n        var data: TaskActivityData = {\r\n            task: task,\r\n            prevTask: prevTask,\r\n            taskList: taskList,\r\n            board: board\r\n        }\r\n        return data;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskApiService",
                        "type": "TaskApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListApiService",
                        "type": "TaskListApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskApiService",
                        "type": "TaskApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListApiService",
                        "type": "TaskListApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskListApiService",
            "id": "injectable-TaskListApiService-4bbdea114f6eb167a3f9b8ad372e6eea75505fe463775e5e73126a2fc12993c3b9c5e94d64801a4a6063dfe17ba5d654a1f11bbbf1e75fa1aa40ea6d5a89659f",
            "file": "src/app/modules/shared/services/api/task-list-api/task-list-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createTaskList",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTaskList",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskListById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BoardTaskList | undefined>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskListsByBoardId",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BoardTaskList[]>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTaskList",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateTaskList_Create",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateTaskList_Update",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "combinePathWithApiUrl",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "getErrorHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "CustomErrorHandler",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "getHttpClient",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpClient",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, catchError } from 'rxjs';\r\nimport { BaseApiService, BoardTaskList } from '../../../index';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskListApiService extends BaseApiService {\r\n\r\n  getTaskListsByBoardId(boardId: string): Observable<BoardTaskList[]> {\r\n    return this.getHttpClient().get<BoardTaskList[]>(this.combinePathWithApiUrl(`/BoardTaskList/board/${boardId}`)).pipe(\r\n      catchError((err) => this.handleError(err)));\r\n  }\r\n  getTaskListById(id: string): Observable<BoardTaskList | undefined> {\r\n    return this.getHttpClient().get<BoardTaskList>(this.combinePathWithApiUrl(`/BoardTaskList/${id}`)).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n  createTaskList(taskList: BoardTaskList) {\r\n    taskList = { ...taskList, creationTime: new Date(), boardTasks: [] };\r\n    this.validateTaskList_Create(taskList);\r\n    return this.getHttpClient().post<BoardTaskList>(this.combinePathWithApiUrl(`/BoardTaskList`), taskList).pipe(\r\n      catchError((err) => this.handleError(err)));\r\n  }\r\n  updateTaskList(taskList: BoardTaskList) {\r\n    this.validateTaskList_Update(taskList);\r\n    return this.getHttpClient().put(this.combinePathWithApiUrl(`/BoardTaskList`), taskList).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n  deleteTaskList(id: string) {\r\n    return this.getHttpClient().delete(this.combinePathWithApiUrl(`/BoardTaskList/${id}`)).pipe(\r\n      catchError((err) => this.handleError(err))\r\n    );\r\n  }\r\n  private validateTaskList_Create(taskList: BoardTaskList) {\r\n    if (!taskList.boardId)\r\n      throw new Error(\"Board Id is not set!\");\r\n  }\r\n  private validateTaskList_Update(taskList: BoardTaskList) {\r\n    if (!taskList.id)\r\n      throw new Error(\"Id is not set!\");\r\n    else if (!taskList.creationTime)\r\n      throw new Error(\"Creation time is not set!\");\r\n    else if (!taskList.boardTasks)\r\n      throw new Error(\"Board tasks is not set!\");\r\n    else if (!taskList.boardId)\r\n      throw new Error(\"Board Id is not set!\");\r\n  }\r\n}",
            "extends": [
                "BaseApiService"
            ],
            "type": "injectable"
        },
        {
            "name": "TaskListControllerService",
            "id": "injectable-TaskListControllerService-d6525e3f2060a778602945c38737fd461006a9dcbcd5db5703123143cabd653eb7644034a42cd8dc6baee34246f7434cd94f8356db7163652f68dfc7ffb7cbff",
            "file": "src/app/modules/task-board/services/task-list-service/task-list-controller.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createTaskList",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTaskList",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskListById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskListsByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BoardTaskList[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTaskList",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { BoardTaskList, TaskListApiService } from '../../../shared';\r\nimport { createTaskList, deleteTaskList, getTaskListsByBoardId, selectAllTaskLists, updateTaskList } from '../../index';\r\nimport { TaskListService } from './task-list-service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskListControllerService implements TaskListService {\r\n\r\n  constructor(private store: Store<{ taskListState: { taskLists: BoardTaskList[] } }>,\r\n    private taskListApi: TaskListApiService) { }\r\n\r\n  getTaskListsByBoardId(id: string): Observable<BoardTaskList[]> {\r\n    this.store.dispatch(getTaskListsByBoardId({ boardId: id }));\r\n    var taskLists$ = this.store.select(selectAllTaskLists);\r\n    return taskLists$;\r\n  }\r\n  getTaskListById(id: string) {\r\n    return this.taskListApi.getTaskListById(id);\r\n  }\r\n  createTaskList(taskList: BoardTaskList) {\r\n    this.store.dispatch(createTaskList({ taskList }));\r\n  }\r\n  updateTaskList(taskList: BoardTaskList) {\r\n    this.store.dispatch(updateTaskList({ taskList }));\r\n  }\r\n  deleteTaskList(taskList: BoardTaskList) {\r\n    this.store.dispatch(deleteTaskList({ listId: taskList.id }));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListApi",
                        "type": "TaskListApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListApi",
                        "type": "TaskListApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskListEffect",
            "id": "injectable-TaskListEffect-af3caaefcefc68ca2d32d63fb75279803a13febd71201ce0f525eb3e80d1590f7f1e7607eea8539cc275f305e7d7c16edab988e2cd78fa06d4e1b591d652280e",
            "file": "src/app/modules/task-board/store/tasks/task-list/task-list.effect.ts",
            "properties": [
                {
                    "name": "createTaskList$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(createTaskList),\r\n            mergeMap(action =>\r\n                this.apiService.createTaskList(action.taskList).pipe(\r\n                    map((taskList: BoardTaskList) => {\r\n                        this.createActivity_Create(taskList);\r\n                        return createTaskListSuccess({ taskList: taskList });\r\n                    }),\r\n                    catchError(error => of(createTaskListFailure({ error })))\r\n                ))\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "deleteTaskList$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(deleteTaskList),\r\n            mergeMap(action => {\r\n                this.createActivity_Delete(action.listId);\r\n                return this.apiService.deleteTaskList(action.listId).pipe(\r\n                    map(() => deleteTaskListSuccess({ listId: action.listId })),\r\n                    catchError(error => of(deleteTaskListFailure({ error })))\r\n                )\r\n            })\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "loadTaskLists$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(getTaskListsByBoardId),\r\n            mergeMap(action =>\r\n                this.apiService.getTaskListsByBoardId(action.boardId).pipe(\r\n                    map((taskLists: BoardTaskList[]) => getTaskListsByBoardIdSuccess({ taskLists: taskLists })),\r\n                    catchError(error => of(getTaskListsByBoardIdFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "updateTaskList$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(updateTaskList),\r\n            mergeMap(action => {\r\n                this.createActivity_Update(action.taskList);\r\n                return this.apiService.updateTaskList(action.taskList).pipe(\r\n                    map(() => updateTaskListSuccess({ taskList: action.taskList })),\r\n                    catchError(error => of(updateTaskListFailure({ error }))))\r\n            })\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methods": [
                {
                    "name": "createActivity_Create",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createActivity_Delete",
                    "args": [
                        {
                            "name": "taskListId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskListId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createActivity_Update",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskListActivityData",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TaskListActivityData",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { catchError, map, mergeMap, of } from \"rxjs\";\r\nimport { ActivityService, TaskListActivityData } from \"../../../../action-history\";\r\nimport { ActivityType, Board, BoardTaskList, TaskListApiService, getDefaultBoard } from \"../../../../shared\";\r\nimport { createTaskList, createTaskListFailure, createTaskListSuccess, deleteTaskList, deleteTaskListFailure, deleteTaskListSuccess, getTaskListsByBoardId, getTaskListsByBoardIdFailure, getTaskListsByBoardIdSuccess, updateTaskList, updateTaskListFailure, updateTaskListSuccess } from \"../../../index\";\r\n\r\n@Injectable()\r\nexport class TaskListEffect {\r\n    constructor(private actions$: Actions,\r\n        private apiService: TaskListApiService,\r\n        private activityService: ActivityService) { }\r\n\r\n    loadTaskLists$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(getTaskListsByBoardId),\r\n            mergeMap(action =>\r\n                this.apiService.getTaskListsByBoardId(action.boardId).pipe(\r\n                    map((taskLists: BoardTaskList[]) => getTaskListsByBoardIdSuccess({ taskLists: taskLists })),\r\n                    catchError(error => of(getTaskListsByBoardIdFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n    createTaskList$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(createTaskList),\r\n            mergeMap(action =>\r\n                this.apiService.createTaskList(action.taskList).pipe(\r\n                    map((taskList: BoardTaskList) => {\r\n                        this.createActivity_Create(taskList);\r\n                        return createTaskListSuccess({ taskList: taskList });\r\n                    }),\r\n                    catchError(error => of(createTaskListFailure({ error })))\r\n                ))\r\n        )\r\n    );\r\n    updateTaskList$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(updateTaskList),\r\n            mergeMap(action => {\r\n                this.createActivity_Update(action.taskList);\r\n                return this.apiService.updateTaskList(action.taskList).pipe(\r\n                    map(() => updateTaskListSuccess({ taskList: action.taskList })),\r\n                    catchError(error => of(updateTaskListFailure({ error }))))\r\n            })\r\n        )\r\n    );\r\n    deleteTaskList$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(deleteTaskList),\r\n            mergeMap(action => {\r\n                this.createActivity_Delete(action.listId);\r\n                return this.apiService.deleteTaskList(action.listId).pipe(\r\n                    map(() => deleteTaskListSuccess({ listId: action.listId })),\r\n                    catchError(error => of(deleteTaskListFailure({ error })))\r\n                )\r\n            })\r\n        )\r\n    );\r\n    private createActivity_Create(taskList: BoardTaskList) {\r\n        this.activityService.createTaskListActivity(ActivityType.Create,\r\n            this.createTaskListActivityData(taskList, undefined, { ...getDefaultBoard(), id: taskList.boardId }));\r\n    }\r\n    private createActivity_Update(taskList: BoardTaskList) {\r\n        this.apiService.getTaskListById(taskList.id).subscribe((prevList) => {\r\n            if (prevList) {\r\n                this.activityService.createTaskListActivity(ActivityType.Update,\r\n                    this.createTaskListActivityData(taskList, prevList, { ...getDefaultBoard(), id: taskList.boardId })\r\n                );\r\n            }\r\n        });\r\n    }\r\n    private createActivity_Delete(taskListId: string) {\r\n        this.apiService.getTaskListById(taskListId).subscribe(taskList => {\r\n            if (taskList) {\r\n                this.activityService.createTaskListActivity(ActivityType.Delete,\r\n                    this.createTaskListActivityData(taskList, undefined, { ...getDefaultBoard(), id: taskList.boardId })\r\n                );\r\n            }\r\n        });\r\n    }\r\n    private createTaskListActivityData(taskList: BoardTaskList, prevTaskList: BoardTaskList | undefined, board: Board) {\r\n        var data: TaskListActivityData = {\r\n            taskList: taskList,\r\n            prevTaskList: prevTaskList,\r\n            board: board\r\n        }\r\n        return data;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "TaskListApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "TaskListApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskListService",
            "id": "injectable-TaskListService-cc896b99c4c975ecac9b646a93012e6ed7ee811469ac6c914cd1ce26e5dfe73ae8971a361467686175355ac16f2925d3d73de8f432c5e3421247ae2eb83e464e",
            "file": "src/app/modules/task-board/services/task-list-service/task-list-service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createTaskList",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTaskList",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskListById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BoardTaskList | undefined>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskListsByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BoardTaskList[]>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTaskList",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { BoardTaskList } from '../../../shared';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport abstract class TaskListService {\r\n  abstract getTaskListsByBoardId(id: string): Observable<BoardTaskList[]>;\r\n  abstract getTaskListById(id: string): Observable<BoardTaskList | undefined>;\r\n  abstract createTaskList(taskList: BoardTaskList): void;\r\n  abstract updateTaskList(taskList: BoardTaskList): void;\r\n  abstract deleteTaskList(taskList: BoardTaskList): void;\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskService",
            "id": "injectable-TaskService-dadff99d9c7a35c8675783929e1e1932a7d235a99cc42f2c7f261e73b754d8cdfbcd59f8af2f9245f643fd0288c23e31529547cc4ee055d0d643e6e2e8f9e746",
            "file": "src/app/modules/task-board/services/task-service/task-service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTask",
                    "args": [
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BoardTask, BoardTaskList } from '../../../shared';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport abstract class TaskService {\r\n  abstract createTask(task: BoardTask): void;\r\n  abstract updateTask(prevTaskList: BoardTaskList, task: BoardTask, currentIndex: number): void;\r\n  abstract deleteTask(task: BoardTask): void;\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "URLDefiner",
            "id": "injectable-URLDefiner-887af6bef2aeeb4823d7be4ccc2dc1913480379cf21581a09e19bb21512e82fa45d54c0bd7d47166e04cc381f42a9acc53131f2f1e1deeaeefcce27660f33f03",
            "file": "src/app/modules/shared/services/url-definer/url-definer.ts",
            "properties": [],
            "methods": [
                {
                    "name": "combineWithApiUrl",
                    "args": [
                        {
                            "name": "subpath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "subpath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport abstract class URLDefiner {\r\n  abstract combineWithApiUrl(subpath: string): string;\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "URLDefinerService",
            "id": "injectable-URLDefinerService-3eb18cfd097f907476af35459b2cd45e7a115746fed2660f33f681766068b02d17aae90625003ceaa3779ac93e2b0797497d7ef74ac98f1f07b949daebf8fc3e",
            "file": "src/app/modules/shared/services/url-definer/url-definer.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "combineWithApiUrl",
                    "args": [
                        {
                            "name": "subpath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "subpath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "URLDefiner"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { environment } from '../../../../../environment/environment';\r\nimport { URLDefiner } from './url-definer';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class URLDefinerService extends URLDefiner {\r\n  override combineWithApiUrl(subpath: string): string {\r\n    return environment.api + subpath;\r\n  }\r\n}\r\n",
            "extends": [
                "URLDefiner"
            ],
            "type": "injectable"
        },
        {
            "name": "UserApiService",
            "id": "injectable-UserApiService-c153cc65084ae68c2dea6b7f01b85be469859e9763fd610dbe8d3f16eb09bc761f0977fcd8b9243a5da5bcb8938045907209b02386fbcd227629a3ff8ea99aa5",
            "file": "src/app/modules/shared/services/api/user-api/user-api.service.ts",
            "properties": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<User | null> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "createUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getDevUser",
                    "args": [],
                    "optional": false,
                    "returnType": "User",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getSavedUser",
                    "args": [],
                    "optional": false,
                    "returnType": "User | null",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User | null>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "combinePathWithApiUrl",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "getErrorHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "CustomErrorHandler",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "getHttpClient",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpClient",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApiService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { catchError, of, shareReplay, tap } from 'rxjs';\r\nimport { Observable } from 'rxjs/internal/Observable';\r\nimport { BaseApiService, CustomErrorHandler, DevModeService, LocalStorageService, URLDefiner, USER_CONFIG, User, UserConfig } from '../../../index';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserApiService extends BaseApiService {\r\n  user$: Observable<User | null> | undefined;\r\n  user!: User | null;\r\n\r\n  constructor(httpClient: HttpClient, errorHandler: CustomErrorHandler, urlDefiner: URLDefiner,\r\n    @Inject(USER_CONFIG) private userConfig: UserConfig, private localStorageService: LocalStorageService, private devService: DevModeService) {\r\n    super(httpClient, errorHandler, urlDefiner);\r\n  }\r\n\r\n  getUser(): Observable<User | null> {\r\n    if (!this.user$) {\r\n      this.user = this.devService.isDevMode() ? this.getDevUser() : this.getSavedUser();\r\n      if (!this.user) {\r\n        this.user$ = this.createUser().pipe(\r\n          tap(user => {\r\n            this.user = user;\r\n            this.localStorageService.setItem(this.userConfig.userIdKey, this.user.id!);\r\n          }),\r\n          shareReplay(1)\r\n        );\r\n      }\r\n      else {\r\n        this.user$ = this.getHttpClient().get<User>(this.combinePathWithApiUrl(`/User/${this.user!.id}`)).pipe(\r\n          catchError((err) => {\r\n            this.localStorageService.removeItem(this.userConfig.userIdKey);\r\n            this.handleError(err);\r\n            return of(null);\r\n          })\r\n        );\r\n      }\r\n    }\r\n    return this.user$!;\r\n  }\r\n  private getSavedUser(): User | null {\r\n    const userId = this.localStorageService.getItem(this.userConfig.userIdKey);\r\n    if (!userId)\r\n      return null;\r\n    return { id: userId } as User;\r\n  }\r\n  private getDevUser() {\r\n    return { id: \"1\" } as User;\r\n  }\r\n  private createUser() {\r\n    return this.getHttpClient().post<User>(this.combinePathWithApiUrl(`/User`), { id: '' }).pipe(\r\n      catchError((err) => {\r\n        return this.handleError(err);\r\n      })\r\n    );\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorHandler",
                        "type": "CustomErrorHandler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "urlDefiner",
                        "type": "URLDefiner",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userConfig",
                        "type": "UserConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "devService",
                        "type": "DevModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorHandler",
                        "type": "CustomErrorHandler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "urlDefiner",
                        "type": "URLDefiner",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userConfig",
                        "type": "UserConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "devService",
                        "type": "DevModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseApiService"
            ],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ActivityService",
            "id": "class-ActivityService-be65cdc512ebb83f7c1d82449a8b512f75fd871a476141e6c5971aedfd972c5daf5e1a5d7d454b7ab3389d241e74d584df1a139893eedfff88997549ab5cfe8b",
            "file": "src/app/modules/action-history/services/acitvity-service/activity-service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { ActivityType, BoardActivity, BoardTaskActivity } from '../../../shared';\r\nimport { TaskActivityData, TaskListActivityData } from '../../index';\r\n\r\nexport abstract class ActivityService {\r\n  abstract getTaskActivitiesByTaskId(taskId: string): Observable<BoardTaskActivity[]>;\r\n  abstract getBoardActivitiesOnPageByBoardId(id: string, page: number, amountOnPage: number): Observable<BoardActivity[]>;\r\n  abstract getBoardActivityAmountByBoardId(id: string): Observable<number>;\r\n  abstract createTaskActivity(activityType: ActivityType, taskActivityData: TaskActivityData): void;\r\n  abstract createTaskListActivity(activityType: ActivityType, listActivityData: TaskListActivityData): void;\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "createTaskActivity",
                    "args": [
                        {
                            "name": "activityType",
                            "type": "ActivityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskActivityData",
                            "type": "TaskActivityData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "activityType",
                            "type": "ActivityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskActivityData",
                            "type": "TaskActivityData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskListActivity",
                    "args": [
                        {
                            "name": "activityType",
                            "type": "ActivityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "listActivityData",
                            "type": "TaskListActivityData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "activityType",
                            "type": "ActivityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "listActivityData",
                            "type": "TaskListActivityData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoardActivitiesOnPageByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "amountOnPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BoardActivity[]>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amountOnPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoardActivityAmountByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskActivitiesByTaskId",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BoardTaskActivity[]>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateFormaterService",
            "id": "class-DateFormaterService-5d1754abc3526ac6b10556633ef035e3c0c156be332fda0be29133fe82a4eec3a8ce26f1a074dc00b3fdb6ce53969fc1ca78ea0144ef7dcb62007ada3ae91da8",
            "file": "src/app/modules/shared/services/date-formater/date-formater.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class DateFormaterService {\r\n  abstract formatDate(date: Date | undefined): string | number;\r\n}",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | number",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateValidator",
            "id": "class-DateValidator-2472877216e6cff9525a713e761df8bd43c0ea8a3cb1fbbf46a781a6d2a4a067be057b0890e102a0f69ce62db4934a6a27c3210a38a714de9e78e260301f9698",
            "file": "src/app/modules/shared/services/validators/date/date-validators.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ValidatorFn } from \"@angular/forms\";\r\n\r\nexport abstract class DateValidator {\r\n\r\n    public abstract dateMinimum(minDate: Date): ValidatorFn;\r\n}",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "dateMinimum",
                    "args": [
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MockMatDialogRef",
            "id": "class-MockMatDialogRef-5a273134e3a6d3e4cc2d1a4f0e728834b4344f07076a45cc28e85b22d92bde1dab39c2a6a37ad5c3b0a4e2b1c96bcf91ce3dfae0aa9c21f37cd76c9eb44401a6",
            "file": "src/stories/task-board/tasks/mockServices.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { moveItemInArray } from \"@angular/cdk/drag-drop\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable, of } from \"rxjs\";\r\nimport { ActivityService, TaskActivityData, TaskListActivityData } from \"../../../app/modules/action-history\";\r\nimport { ActivityType, Board, BoardActivity, BoardTask, BoardTaskActivity, BoardTaskList, Priority, RedirectorService, copyTaskListValues, copyTaskValues } from \"../../../app/modules/shared\";\r\nimport { BoardService, TaskListService, TaskService } from \"../../../app/modules/task-board\";\r\n\r\nexport const mockTask: BoardTask = {\r\n    id: \"1\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test Task 1\",\r\n    description: \"Description\",\r\n    priority: Priority.High\r\n}\r\nexport const mockTaskLotOfText: BoardTask = {\r\n    id: \"2\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test with a lot of textttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt\",\r\n    description: \"Descriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\",\r\n    priority: Priority.High\r\n}\r\nexport const mockTaskList: BoardTaskList =\r\n{\r\n    id: \"1\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List 1111111111111111111111111111111111111111111111111111111111111111111111111111\",\r\n    boardTasks: [mockTask, mockTaskLotOfText]\r\n};\r\nexport const mockTaskListLotOfText: BoardTaskList =\r\n{\r\n    id: \"2\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\r\n    boardTasks: []\r\n};\r\nexport const mockBoard: Board =\r\n{\r\n    id: \"1\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 1\",\r\n}\r\nexport const mockBoard2: Board =\r\n{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2\",\r\n}\r\nexport const mockBoardLotOfText: Board =\r\n{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2 with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeee\",\r\n}\r\nconst allMockTasks = [mockTask, mockTaskLotOfText];\r\nvar mockTaskLists = [mockTaskList];\r\nvar mockBoards = [mockBoard, mockBoard2];\r\n@Injectable()\r\nexport class MockTaskListService extends TaskListService {\r\n    private observables: Map<string, BehaviorSubject<BoardTaskList[]>> = new Map();\r\n\r\n\r\n    override getTaskListsByBoardId(id: string): Observable<BoardTaskList[]> {\r\n        var obs = new BehaviorSubject(mockTaskLists.filter(x => x.boardId == id));\r\n        this.observables.set(id, obs);\r\n        return obs;\r\n    }\r\n    override getTaskListById(id: string): Observable<BoardTaskList | undefined> {\r\n        return of(mockTaskLists.find(x => x.id == id));\r\n    }\r\n    override createTaskList(taskList: BoardTaskList): void {\r\n        taskList.id = this.getRandomInt(10000).toString();\r\n        mockTaskLists.push(taskList);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    override updateTaskList(taskList: BoardTaskList): void {\r\n        var oldListData = mockTaskLists.find(x => x.id == taskList.id);\r\n        if (oldListData)\r\n            copyTaskListValues(oldListData, taskList);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    override deleteTaskList(taskList: BoardTaskList): void {\r\n        mockTaskLists = mockTaskLists.filter(x => x.id != taskList.id);\r\n        this.observables.get(taskList.boardId)!.next(mockTaskLists);\r\n    }\r\n    private getRandomInt(max: number) {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n}\r\n@Injectable()\r\nexport class MockTaskService extends TaskService {\r\n    override createTask(task: BoardTask): void {\r\n        var taskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (taskList) {\r\n            taskList.boardTasks.unshift(task);\r\n        }\r\n    }\r\n    override updateTask(prevTaskList: BoardTaskList, task: BoardTask, currentIndex: number): void {\r\n        var oldTaskData = allMockTasks.find(x => x.id == task.id);\r\n        if (oldTaskData)\r\n            copyTaskValues(oldTaskData, task);\r\n        var currentTaskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (currentTaskList) {\r\n            if (prevTaskList.id == task.boardTaskListId) {\r\n                var oldTaskIndex = currentTaskList.boardTasks.findIndex(x => x.id == task.id);\r\n                moveItemInArray(currentTaskList.boardTasks, oldTaskIndex, currentIndex);\r\n            }\r\n            else {\r\n                prevTaskList.boardTasks = prevTaskList.boardTasks.filter(x => x.id != task.id);\r\n                this.createTask(task);\r\n                moveItemInArray(currentTaskList.boardTasks, 0, currentIndex);\r\n            }\r\n        }\r\n    }\r\n    override deleteTask(task: BoardTask): void {\r\n        var taskList = mockTaskLists.find(x => x.id == task.boardTaskListId);\r\n        if (taskList) {\r\n            taskList.boardTasks = taskList.boardTasks.filter(x => x.id != task.id);\r\n        }\r\n    }\r\n}\r\nconst mockTaskActivities: BoardTaskActivity[] =\r\n    [\r\n        {\r\n            id: \"1\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription1\"\r\n        },\r\n        {\r\n            id: \"2\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription2\"\r\n        },\r\n        {\r\n            id: \"3\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription3\"\r\n        },\r\n        {\r\n            id: \"4\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        },\r\n        {\r\n            id: \"5\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        }\r\n    ]\r\n@Injectable()\r\nexport class MockActivityService extends ActivityService {\r\n    override getTaskActivitiesByTaskId(taskId: string): Observable<BoardTaskActivity[]> {\r\n        return of(mockTaskActivities.filter(x => x.boardTaskId == taskId));\r\n    }\r\n    override getBoardActivitiesOnPageByBoardId(id: string, page: number, amountOnPage: number): Observable<BoardActivity[]> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override getBoardActivityAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override createTaskActivity(activityType: ActivityType, taskActivityData: TaskActivityData): void {\r\n    }\r\n    override createTaskListActivity(activityType: ActivityType, listActivityData: TaskListActivityData): void {\r\n    }\r\n}\r\nexport class MockMatDialogRef<T> {\r\n    close(value = ''): void { }\r\n    afterClosed() {\r\n        return of(true);\r\n    }\r\n}\r\nvar currentBoard: BehaviorSubject<Board | undefined>;\r\n@Injectable()\r\nexport class MockBoardService extends BoardService {\r\n    override getBoardsByUserId(): Observable<Board[]> {\r\n        return of(mockBoards);\r\n    }\r\n    override getBoardById(id: string): Observable<Board | undefined> {\r\n        var board = mockBoards.find(x => x.id == id);\r\n        currentBoard = new BehaviorSubject(board);\r\n        return currentBoard;\r\n    }\r\n    override getTaskListsAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override getTasksAmountByBoardId(id: string): Observable<number> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override createBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override updateBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override deleteBoard(board: Board): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n@Injectable()\r\nexport class MockRedirectorService extends RedirectorService {\r\n    override redirectToHome(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    override redirectToBoard(boardId: string): void {\r\n        var board = mockBoards.find(x => x.id == boardId);\r\n        currentBoard.next(board);\r\n    }\r\n}",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "afterClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "ActivityComponent",
            "id": "component-ActivityComponent-12d9d0fe96343b89667a90d78bfedcf8403b3a50f11dc5683d7789feab58dc99e21be24ebd5c5cb1685c712532774bdebc1e954952fe4415c17203df3f66a5dd",
            "file": "src/app/modules/action-history/components/activity-popup/activity/activity.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-activity",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./activity.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "activity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 12,
                    "type": "BoardActivity",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getFormatedDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sanitizeHtml",
                    "args": [
                        {
                            "name": "html",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "html",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nimport { BoardActivity, DateFormaterService } from '../../../../shared';\r\n\r\n@Component({\r\n  selector: 'app-activity',\r\n  templateUrl: './activity.component.html',\r\n  styleUrl: './activity.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ActivityComponent {\r\n  @Input({ required: true }) activity!: BoardActivity;\r\n\r\n  constructor(private sanitizer: DomSanitizer, private dateFormater: DateFormaterService, private cdr: ChangeDetectorRef) { }\r\n\r\n  getFormatedDate(date: Date | undefined) {\r\n    return this.dateFormater.formatDate(date);\r\n  }\r\n  sanitizeHtml(html: string): SafeHtml {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n  updateView() {\r\n    this.cdr.markForCheck();\r\n  }\r\n}\r\n",
            "styleUrl": "./activity.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dateFormater",
                        "type": "DateFormaterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dateFormater",
                        "type": "DateFormaterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"activity-wrapper\">\r\n    <div class=\"activity-description\" *ngIf=\"activity.description\" [innerHTML]=\"sanitizeHtml(activity.description!)\">\r\n    </div>\r\n    <div class=\"activity-date is-italic\">\r\n        {{getFormatedDate(activity.activityTime)}}\r\n    </div>\r\n</div>"
        },
        {
            "name": "ActivityHistoryComponent",
            "id": "component-ActivityHistoryComponent-0ac41e89cac4b27ffbb41fa139a4be02d211e6502cf5bfd99b757253d8a3f4126091448d48ba97c1e203967405391d1bc1ee1af404cc94750d85d2b87ebba6d1",
            "file": "src/app/modules/action-history/components/activity-popup/activity-history/activity-history.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-activity-history",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./activity-history.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardActivity[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "activitiesAmount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "amountOnPage",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "page",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "popupData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivityPopupData",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getActivitiesAmount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadActivities",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showMore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { BoardActivity } from '../../../../shared';\r\nimport { ActivityPopupData, ActivityService } from '../../../index';\r\n\r\n@Component({\r\n  selector: 'app-activity-history',\r\n  templateUrl: './activity-history.component.html',\r\n  styleUrl: './activity-history.component.scss'\r\n})\r\nexport class ActivityHistoryComponent implements OnInit {\r\n  page = 0;\r\n  amountOnPage = 20;\r\n  activitiesAmount: number = 0;\r\n  activities: BoardActivity[] = [];\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public popupData: ActivityPopupData, private activityService: ActivityService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.showMore();\r\n    this.getActivitiesAmount();\r\n  }\r\n  showMore() {\r\n    this.page++;\r\n    this.loadActivities();\r\n  }\r\n  private loadActivities() {\r\n    this.activityService.getBoardActivitiesOnPageByBoardId(this.popupData.board.id, this.page, this.amountOnPage).subscribe(activities => {\r\n      this.activities = this.activities.concat(activities);\r\n    })\r\n  }\r\n  private getActivitiesAmount() {\r\n    this.activityService.getBoardActivityAmountByBoardId(this.popupData.board.id).subscribe(amount => {\r\n      this.activitiesAmount = amount;\r\n    })\r\n  }\r\n}\r\n",
            "styleUrl": "./activity-history.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "popupData",
                        "type": "ActivityPopupData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "popupData",
                        "type": "ActivityPopupData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"history-wrapper\">\r\n    <header class=\"history-header\">\r\n        History\r\n        <button mat-dialog-close>\r\n            <i class=\"fa-solid fa-xmark\"></i>\r\n        </button>\r\n    </header>\r\n\r\n    <body class=\"history-body\">\r\n        <mat-dialog-content class=\"mat-typography\">\r\n            <div class=\"activities\">\r\n                <ng-container *ngIf=\"activities;\">\r\n                    <ng-container *ngFor=\"let activity of activities\">\r\n                        <app-activity [activity]=\"activity\"></app-activity>\r\n                    </ng-container>\r\n                </ng-container>\r\n            </div>\r\n            <button *ngIf=\"activitiesAmount > amountOnPage * page\" id=\"show-more\" class=\"button is-dark\"\r\n                (click)=\"showMore()\">\r\n                <span class=\"icon\">\r\n                    <i class=\"fa-solid fa-rotate-left\"></i>\r\n                </span>\r\n                <span>\r\n                    Show more\r\n                </span>\r\n            </button>\r\n        </mat-dialog-content>\r\n    </body>\r\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-83c65934eb3526eecc87e9c7f237c81bb0c6f7ea22b4c8156cf8d22f97fc70ce163dff108b4d1830749e425c8c70bade9162e2e630a86e46b3d4db8905c9b3b6",
            "file": "src/app/modules/core/components/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'TaskBoardFrontEnd'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss'\r\n})\r\nexport class AppComponent {\r\n  title = 'TaskBoardFrontEnd';\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "BoardComponent",
            "id": "component-BoardComponent-c8303cba2b6e148c5b868005127328823b4ff829c8d4a189703f7684c53c9d71f4999b820aec0cac292eb07b31ac1311938592b4a4e92bcbceaa517659cfeb3d",
            "file": "src/app/modules/task-board/components/boards/board/board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "task-board",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./board.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "board$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Board | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "boards$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[] | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "taskLists$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<BoardTaskList[]>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "changeBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openHistoryBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { ActivityHistoryComponent } from '../../../../action-history';\r\nimport { Board, BoardTaskList, RedirectorService } from '../../../../shared';\r\nimport { BoardService, TaskListService } from '../../../index';\r\n\r\n@Component({\r\n  selector: 'task-board',\r\n  templateUrl: './board.component.html',\r\n  styleUrl: './board.component.scss'\r\n})\r\nexport class BoardComponent implements OnInit {\r\n  boardId!: string;\r\n  board$!: Observable<Board | undefined>;\r\n  boards$!: Observable<Board[] | undefined>;\r\n  taskLists$!: Observable<BoardTaskList[]>;\r\n\r\n  constructor(private activatedRoute: ActivatedRoute,\r\n    public dialog: MatDialog,\r\n    private boardService: BoardService,\r\n    private taskListService: TaskListService,\r\n    private redirector: RedirectorService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRoute.params.subscribe(params => {\r\n      this.boardId = params['boardId'];\r\n      this.board$ = this.boardService.getBoardById(this.boardId);\r\n      this.boards$ = this.boardService.getBoardsByUserId();\r\n      this.taskLists$ = this.taskListService.getTaskListsByBoardId(this.boardId);\r\n    });\r\n  }\r\n  openHistoryBar() {\r\n    this.board$.subscribe((board) => {\r\n      if (board) {\r\n        const dialogRef = this.dialog.open(ActivityHistoryComponent, {\r\n          data: {\r\n            board: board\r\n          }\r\n        });\r\n      }\r\n    })\r\n  }\r\n  changeBoard() {\r\n    this.redirector.redirectToBoard(this.boardId);\r\n  }\r\n}",
            "styleUrl": "./board.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "redirector",
                        "type": "RedirectorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "redirector",
                        "type": "RedirectorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"board\">\r\n    <ng-container *ngIf=\"board$ | async as board; else loading\">\r\n        <div class=\"board-bar\">\r\n            <div class=\"board-name\">\r\n                <ng-container *ngIf=\"boards$ | async as boards; else loading\">\r\n                    <mat-select [(value)]=\"boardId\" (selectionChange)=\"changeBoard()\" panelClass=\"dropdown-panel\">\r\n                        <ng-container *ngFor=\"let board of boards;\">\r\n                            <mat-option [value]=\"board.id\" panelClass=\"board-name-panel\">{{board.name}}</mat-option>\r\n                        </ng-container>\r\n                    </mat-select>\r\n                </ng-container>\r\n            </div>\r\n            <ng-template #loading>\r\n                Loading...\r\n            </ng-template>\r\n            <button class=\"history-menu\" (click)=\"openHistoryBar()\">\r\n                History\r\n                <span class=\"icon\">\r\n                    <i class=\"fas fa-history\"></i>\r\n                </span>\r\n            </button>\r\n        </div>\r\n        <div class=\"board-wrapper\">\r\n            <div class=\"board-columns\" *ngIf=\"taskLists$ | async as taskLists; else loading\" cdkDropListGroup>\r\n                @for (taskList of taskLists; track taskList) {\r\n                <tasks-list class=\"board-column\" [taskList]=\"taskList\" [boardId]=\"boardId\"></tasks-list>\r\n                }\r\n                <tasks-list class=\"board-column\" id=\"create-task-list\" [boardId]=\"boardId\"></tasks-list>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n    <ng-template #loading>\r\n        Loading...\r\n    </ng-template>\r\n</div>"
        },
        {
            "name": "BoardItemComponent",
            "id": "component-BoardItemComponent-1e4f2c34e745ec8a0277f3ef778e8f632d18aadb6e0fcb6cc297c1bba6cc4628cb31d69008ae91a314eb9d33413b891912317c1da7e4249fec50cdbf3a6dabc1",
            "file": "src/app/modules/task-board/components/boards/board-item/board-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "board-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./board-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "board",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 12,
                    "type": "Board | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "taskListsAmount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "tasksAmount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBoardTaskListsAmount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getBoardTasksAmount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getFormatedDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openListManagerMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "redirectToBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Board, DateFormaterService, RedirectorService } from '../../../../shared';\r\nimport { BoardManagerComponent, BoardService } from '../../../index';\r\n\r\n@Component({\r\n  selector: 'board-item',\r\n  templateUrl: './board-item.component.html',\r\n  styleUrl: './board-item.component.scss'\r\n})\r\nexport class BoardItemComponent implements OnInit {\r\n  @Input({ required: true }) board: Board | undefined;\r\n  taskListsAmount: number = 0;\r\n  tasksAmount: number = 0;\r\n\r\n  constructor(private dialog: MatDialog,\r\n    private dateFormater: DateFormaterService,\r\n    private redirector: RedirectorService,\r\n    private boardService: BoardService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getBoardTaskListsAmount();\r\n    this.getBoardTasksAmount();\r\n  }\r\n  getFormatedDate(date: Date | undefined) {\r\n    return this.dateFormater.formatDate(date);\r\n  }\r\n  openListManagerMenu() {\r\n    const dialogRef = this.dialog.open(BoardManagerComponent, {\r\n      data: this.board\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        const isNew = this.board == undefined;\r\n        if (isNew) {\r\n          this.boardService.createBoard(result);\r\n        }\r\n        else {\r\n          this.boardService.updateBoard(result);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  redirectToBoard() {\r\n    this.redirector.redirectToBoard(this.board?.id!);\r\n  }\r\n  deleteBoard() {\r\n    this.boardService.deleteBoard(this.board!);\r\n  }\r\n  private getBoardTaskListsAmount() {\r\n    this.boardService.getTaskListsAmountByBoardId(this.board?.id!).subscribe(amount => {\r\n      this.taskListsAmount = amount;\r\n    });\r\n  }\r\n  private getBoardTasksAmount() {\r\n    this.boardService.getTasksAmountByBoardId(this.board?.id!).subscribe(amount => {\r\n      this.tasksAmount = amount;\r\n    });\r\n  }\r\n}",
            "styleUrl": "./board-item.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dateFormater",
                        "type": "DateFormaterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "redirector",
                        "type": "RedirectorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dateFormater",
                        "type": "DateFormaterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "redirector",
                        "type": "RedirectorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"item-wrapper\">\r\n    @if(board)\r\n    {\r\n    <header class=\"header\">\r\n        <button class=\"card-header-icon\" [matMenuTriggerFor]=\"menu\">\r\n            <span class=\"icon\">\r\n                <i class=\"fa-solid fa-bars\"></i>\r\n            </span>\r\n        </button>\r\n        <mat-menu #menu=\"matMenu\">\r\n            <button mat-menu-item class=\"has-text-danger\" (click)=\"deleteBoard()\">\r\n                <span class=\"icon\">\r\n                    <i class=\"fa-solid fa-trash\"></i>\r\n                </span>\r\n                <span>Delete</span>\r\n            </button>\r\n        </mat-menu>\r\n    </header>\r\n\r\n    <body class=\"body\">\r\n        <div class=\"board-name\">\r\n            <div class=\"board-redirect-zone\" (click)=\"redirectToBoard()\">\r\n                {{board.name}}\r\n            </div>\r\n        </div>\r\n        <button class=\"card-header-icon\" (click)=\"openListManagerMenu()\">\r\n            <span class=\"icon\">\r\n                <i class=\"fas fa-edit\"></i>\r\n            </span>\r\n        </button>\r\n    </body>\r\n    <footer class=\"footer\">\r\n        <div class=\"amount\">\r\n            <div class=\"board-list-amount\">\r\n                {{taskListsAmount}}\r\n                <span class=\"icon\">\r\n                    <i class=\"fa-solid fa-book\"></i>\r\n                </span>\r\n            </div>\r\n            <div class=\"board-task-amount\">\r\n                {{tasksAmount}}\r\n                <span class=\"icon\">\r\n                    <i class=\"fas fa-tasks\"></i>\r\n                </span>\r\n            </div>\r\n        </div>\r\n        <div class=\"board-creation-time\">{{getFormatedDate(board.creationTime)}}</div>\r\n    </footer>\r\n    }\r\n    @else {\r\n    <div class=\"empty-board\">\r\n        <button (click)=\"openListManagerMenu()\">\r\n            <i class=\"fas fa-plus-circle\"></i>\r\n        </button>\r\n    </div>\r\n    }\r\n</div>"
        },
        {
            "name": "BoardListComponent",
            "id": "component-BoardListComponent-79cf3c1c9b022bdc421c61bb1ae877205bf40f1931d9a57c9e48b924e8ba93d31bce0a97d716fcf685b6feead8590e17cda2cb6b37ae90973c98f7a852df3908",
            "file": "src/app/modules/task-board/components/boards/board-list/board-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "board-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./board-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boards$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Board[]>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Board } from '../../../../shared';\r\nimport { BoardService } from '../../../index';\r\n\r\n@Component({\r\n  selector: 'board-list',\r\n  templateUrl: './board-list.component.html',\r\n  styleUrl: './board-list.component.scss'\r\n})\r\nexport class BoardListComponent implements OnInit {\r\n  boards$!: Observable<Board[]>;\r\n\r\n  constructor(private boardService: BoardService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.boards$ = this.boardService.getBoardsByUserId();\r\n  }\r\n}",
            "styleUrl": "./board-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"board-list\">\r\n    <ng-container *ngIf=\"boards$ | async as boards; else loading\">\r\n        <div class=\"board-list-wrapper\">\r\n            <div class=\"list-columns\">\r\n                @for (board of boards; track board;) {\r\n                <board-item [board]=\"board\" class=\"list-column\"></board-item>\r\n                }\r\n                <board-item [board]=\"undefined\" class=\"list-column\"></board-item>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n    <ng-template #loading>\r\n        Loading...\r\n    </ng-template>\r\n</div>"
        },
        {
            "name": "BoardManagerComponent",
            "id": "component-BoardManagerComponent-50f8d4a2dd0b822371ce4cd2a22d8b2fa7f9e1f1a2c2197ae2eb2eb991e9f04b73949de6f5012fc243f9c174441e0e71eca61caae5033c53168e36b2a7ddbbea",
            "file": "src/app/modules/task-board/components/boards/board-manager/board-manager.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-manager",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./board-manager.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "board",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "boardFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "cardName",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "assignBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getDataFromForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isNameInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>The component for adding and editing a board</p>\n",
            "rawdescription": "\nThe component for adding and editing a board",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { Board, getDefaultBoard } from '../../../../shared';\r\n\r\n/**The component for adding and editing a board*/\r\n@Component({\r\n  selector: 'app-board-manager',\r\n  templateUrl: './board-manager.component.html',\r\n  styleUrl: './board-manager.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BoardManagerComponent {\r\n  boardFormGroup!: FormGroup;\r\n  cardName: string = \"\";\r\n  private board!: Board;\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Board,\r\n    private formBuilder: FormBuilder,\r\n    private dialogRef: MatDialogRef<BoardManagerComponent>,\r\n    private cdr: ChangeDetectorRef) { }\r\n\r\n  ngOnInit(): void {\r\n    this.cardName = this.data ? \"Edit Board\" : \"Create Board\";\r\n    this.assignBoard();\r\n    this.initForm();\r\n  }\r\n  updateView() {\r\n    this.cdr.markForCheck();\r\n  }\r\n  onSubmit(): void {\r\n    if (this.boardFormGroup.valid) {\r\n      var boardFromForm = this.getDataFromForm();\r\n      this.dialogRef.close(boardFromForm);\r\n    }\r\n  }\r\n  isNameInvalid() {\r\n    return this.boardFormGroup.get(\"name\")?.invalid && this.boardFormGroup.get(\"name\")?.dirty;\r\n  }\r\n  private assignBoard() {\r\n    this.board = this.data ? this.data : getDefaultBoard();\r\n  }\r\n  private initForm(): void {\r\n    this.boardFormGroup = this.formBuilder.group({\r\n      name: [this.board?.name || '', Validators.required]\r\n    });\r\n  }\r\n  private getDataFromForm() {\r\n    const formValue = this.boardFormGroup.value;\r\n    const buffer = { ...this.board, name: formValue.name };\r\n    return buffer;\r\n  }\r\n}",
            "styleUrl": "./board-manager.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Board",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<BoardManagerComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Board",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<BoardManagerComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<form [formGroup]=\"boardFormGroup\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"manager-wrapper\">\r\n        <header class=\"manager-header\">{{cardName}}</header>\r\n\r\n        <body class=\"manager-body\">\r\n            <div>\r\n                <span *ngIf=\"isNameInvalid()\" class=\"message is-danger\">\r\n                    Please enter board name\r\n                </span>\r\n                <input class=\"input\" id=\"input-name\" type=\"text\" placeholder=\"Board name\" formControlName=\"name\">\r\n            </div>\r\n            <div class=\"action-buttons\">\r\n                <button mat-dialog-close class=\"button\">\r\n                    <span>Cancel</span>\r\n                </button>\r\n                <button type=\"submit\" [disabled]=\"boardFormGroup.invalid\" class=\"button is-dark\">\r\n                    <span>Save</span>\r\n                </button>\r\n            </div>\r\n        </body>\r\n    </div>\r\n</form>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-c3bd323da00016e22e16a3a7d43440094eeceddea5e6076a399bcaba62f8e742efe65e543735e36f9ea1bed026ab8e3c8fb60482667ae55ec324f8adfe79b9f7",
            "file": "src/stories/default/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 837,
                            "end": 851,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 838,
                                "end": 846,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-07f894be6f38e12f30e1e7e5d9e999c27c78ce2f0be03c15c8c5f39207229e147892a2fd1fdb54e935c4f04f03c2162e39a22c28cdc64e027ea15824ddf0f3c9",
            "file": "src/stories/default/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ButtonComponent } from './button.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonComponent],\r\n  template: `<header>\r\n    <div class=\"storybook-header\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <div *ngIf=\"user\">\r\n          <span class=\"welcome\">\r\n            Welcome, <b>{{ user.name }}</b\r\n            >!\r\n          </span>\r\n          <storybook-button\r\n            *ngIf=\"user\"\r\n            size=\"small\"\r\n            (onClick)=\"onLogout.emit($event)\"\r\n            label=\"Log out\"\r\n          ></storybook-button>\r\n        </div>\r\n        <div *ngIf=\"!user\">\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onLogin.emit($event)\"\r\n            label=\"Log in\"\r\n          ></storybook-button>\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            [primary]=\"true\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onCreateAccount.emit($event)\"\r\n            label=\"Sign up\"\r\n          ></storybook-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.storybook-header svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header h1 {\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header button + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.storybook-header .welcome {\r\n  color: #333;\r\n  font-size: 14px;\r\n  margin-right: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "MainViewComponent",
            "id": "component-MainViewComponent-7cc8954bbba598a0aa7450af0f07e4d91e5f1b066a697ca5fba23ba83591c2107f5e10b7ece6f965ac8eabbc8eafe5d1096f976ac00567ff429a67c818ecb4bb",
            "file": "src/app/modules/core/components/main-view/main-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-view",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main-view.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "redirectToHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RedirectorService } from '../../../shared';\r\n\r\n@Component({\r\n  selector: 'app-main-view',\r\n  templateUrl: './main-view.component.html',\r\n  styleUrl: './main-view.component.scss'\r\n})\r\nexport class MainViewComponent {\r\n  constructor(private redirector: RedirectorService) { }\r\n  redirectToHome(): void {\r\n    this.redirector.redirectToHome();\r\n  }\r\n}\r\n",
            "styleUrl": "./main-view.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "redirector",
                        "type": "RedirectorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "redirector",
                        "type": "RedirectorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"root\">\r\n    <header class=\"header\" (click)=\"redirectToHome()\">\r\n        <span class=\"icon is-small is-left\">\r\n            <i class=\"fa-regular fa-clipboard\"></i>\r\n        </span>\r\n        <p class=\"name\">Task Manager</p>\r\n    </header>\r\n\r\n    <body class=\"wrapper\">\r\n        <router-outlet></router-outlet>\r\n    </body>\r\n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-92f4cc9cc0054ccf9d578fc1ebe06b6d7ed1424277151dbedd6cfe73ba15609d9919dcba6e9acbd021b43117d9ce1f28adf6630c681037299b01a4c726c15a8e",
            "file": "src/stories/default/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HeaderComponent } from './header.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  standalone: true,\r\n  imports: [CommonModule, HeaderComponent],\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"doLogout()\"\r\n      (onLogin)=\"doLogin()\"\r\n      (onCreateAccount)=\"doCreateAccount()\"\r\n    ></storybook-header>\r\n    <section class=\"storybook-page\">\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\n.storybook-page h2 {\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-page p {\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page a {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\n.storybook-page ul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.storybook-page .tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-page .tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-a62c7ea49bf8d996c6623cf8767cde79de18721080bb1bbf8dca0e3d34f9013849249e5980336aa16a92f63f2bace1cb3781b40543dda49f8cfc8b1871b39bdb",
            "file": "src/app/modules/task-board/components/tasks/task/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "task",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 13,
                    "type": "BoardTask",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteTask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFormatedDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPopupData",
                    "args": [],
                    "optional": false,
                    "returnType": "TaskPopupData",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPriorityString",
                    "args": [
                        {
                            "name": "priority",
                            "type": "Priority",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "priority",
                            "type": "Priority",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openEditMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openInfoMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>The component that renders the task and provides access to edit, info menus.</p>\n",
            "rawdescription": "\nThe component that renders the task and provides access to edit, info menus.",
            "type": "component",
            "sourceCode": "import { Component, Injector, Input } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BoardTask, DateFormaterService, Priority, PriorityConvertorService } from '../../../../shared';\r\nimport { TaskInfoComponent, TaskManagerComponent, TaskPopupData, TaskService } from '../../../index';\r\n\r\n/** The component that renders the task and provides access to edit, info menus.*/\r\n@Component({\r\n  selector: 'task',\r\n  templateUrl: './task.component.html',\r\n  styleUrl: './task.component.scss'\r\n})\r\nexport class TaskComponent {\r\n  @Input({ required: true }) task!: BoardTask;\r\n  @Input({ required: true }) boardId!: string;\r\n\r\n  constructor(public dialog: MatDialog,\r\n    private dateFormater: DateFormaterService,\r\n    private taskService: TaskService,\r\n    private injector: Injector) { }\r\n\r\n  openInfoMenu() {\r\n    const dialogRef = this.dialog.open(TaskInfoComponent, {\r\n      data: this.getPopupData(),\r\n      injector: this.injector\r\n    });\r\n  }\r\n  openEditMenu() {\r\n    const dialogRef = this.dialog.open(TaskManagerComponent, {\r\n      data: this.getPopupData()\r\n    });\r\n  }\r\n  deleteTask() {\r\n    this.taskService.deleteTask(this.task);\r\n  }\r\n  getPriorityString(priority: Priority): string {\r\n    return PriorityConvertorService.getPriorityString(priority);\r\n  }\r\n  getFormatedDate(date: Date | undefined) {\r\n    return this.dateFormater.formatDate(date);\r\n  }\r\n  private getPopupData() {\r\n    const taskPopupData: TaskPopupData = {\r\n      task: this.task,\r\n      taskListId: this.task.boardTaskListId,\r\n      boardId: this.boardId\r\n    }\r\n    return taskPopupData;\r\n  }\r\n}\r\n",
            "styleUrl": "./task.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dateFormater",
                        "type": "DateFormaterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dateFormater",
                        "type": "DateFormaterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"task-wrapper\">\r\n    <div class=\"moveable-zone\">\r\n        <i class=\"fa-solid fa-minus\"></i>\r\n    </div>\r\n    <div class=\"task\">\r\n        <header class=\"task-header\">\r\n            <p class=\"task-header-text\">{{task.name}}</p>\r\n            <button [matMenuTriggerFor]=\"menu\">\r\n                <span class=\"icon\">\r\n                    <i class=\"fas fa-ellipsis-v\"></i>\r\n                </span>\r\n            </button>\r\n            <mat-menu #menu=\"matMenu\">\r\n                <button mat-menu-item (click)=\"openInfoMenu()\">\r\n                    <span class=\"icon\">\r\n                        <i class=\"fa-solid fa-hashtag\"></i>\r\n                    </span>\r\n                    Info\r\n                </button>\r\n                <button mat-menu-item (click)=\"openEditMenu()\">\r\n                    <span class=\"icon\">\r\n                        <i class=\"fas fa-edit\"></i>\r\n                    </span>\r\n                    Edit\r\n                </button>\r\n                <button mat-menu-item class=\"has-text-danger\" (click)=\"deleteTask()\">\r\n                    <span class=\"icon\">\r\n                        <i class=\"fa-solid fa-trash\"></i>\r\n                    </span>\r\n                    Delete\r\n                </button>\r\n            </mat-menu>\r\n        </header>\r\n\r\n        <body class=\"task-body\">\r\n            <div class=\"task-description\">{{task.description}}</div>\r\n            <div class=\"task-date\">\r\n                <span class=\"icon\">\r\n                    <i class=\"fas fa-calendar-alt\"></i>\r\n                </span>\r\n                <div>{{getFormatedDate(task.dueTime)}}</div>\r\n            </div>\r\n            <div class=\"task-priority\">\r\n                <span class=\"icon\">\r\n                    &#x2022;\r\n                </span>\r\n                <div>{{getPriorityString(task.priority)}}</div>\r\n            </div>\r\n        </body>\r\n    </div>\r\n</div>"
        },
        {
            "name": "TaskInfoComponent",
            "id": "component-TaskInfoComponent-9d880bf6438f5986cbcb92cb964f0773c72ad969907282dae2a33909f5abcef00b4f00987862ff5c2f8bfa8a0a2ef11f8866d9eff43a9d6ee0076e5254f6c6a4",
            "file": "src/app/modules/task-board/components/tasks/task-info/task-info.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-info",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-info.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentTaskList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<BoardTaskList | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTask",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "taskActivities$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[] | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getFormatedDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPriorityString",
                    "args": [
                        {
                            "name": "priority",
                            "type": "Priority",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "priority",
                            "type": "Priority",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sanitizeHtml",
                    "args": [
                        {
                            "name": "html",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "html",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>The component that shows more information about the task.</p>\n",
            "rawdescription": "\nThe component that shows more information about the task.",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\nimport { ActivityService } from '../../../../action-history';\r\nimport { BoardTask, BoardTaskActivity, BoardTaskList, DateFormaterService, Priority, PriorityConvertorService } from '../../../../shared';\r\nimport { TaskListService, TaskManagerComponent, TaskPopupData } from '../../../index';\r\n\r\n/** The component that shows more information about the task.*/\r\n@Component({\r\n  selector: 'app-task-info',\r\n  templateUrl: './task-info.component.html',\r\n  styleUrl: './task-info.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TaskInfoComponent {\r\n  task!: BoardTask;\r\n  currentTaskList$!: Observable<BoardTaskList | undefined>;\r\n  taskActivities$!: Observable<BoardTaskActivity[] | undefined>;\r\n\r\n  constructor(public dialog: MatDialog,\r\n    @Inject(MAT_DIALOG_DATA) private data: TaskPopupData,\r\n    private taskListService: TaskListService,\r\n    private sanitizer: DomSanitizer,\r\n    private activityService: ActivityService,\r\n    private dateFormater: DateFormaterService,\r\n    private cdr: ChangeDetectorRef) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.task = this.data.task!;\r\n    this.currentTaskList$ = this.taskListService.getTaskListById(this.task.boardTaskListId!);\r\n    this.taskActivities$ = this.activityService.getTaskActivitiesByTaskId(this.task.id);\r\n  }\r\n  openEditMenu() {\r\n    const dialogRef = this.dialog.open(TaskManagerComponent, {\r\n      data: this.data\r\n    });\r\n  }\r\n  getPriorityString(priority: Priority): string {\r\n    return PriorityConvertorService.getPriorityString(priority);\r\n  }\r\n  getFormatedDate(date: Date | undefined) {\r\n    return this.dateFormater.formatDate(date);\r\n  }\r\n  sanitizeHtml(html: string): SafeHtml {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n  updateView() {\r\n    this.cdr.markForCheck();\r\n  }\r\n}",
            "styleUrl": "./task-info.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "TaskPopupData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dateFormater",
                        "type": "DateFormaterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "TaskPopupData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dateFormater",
                        "type": "DateFormaterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"task-info-wrapper\">\r\n    <div class=\"close-button\">\r\n        <button mat-dialog-close>\r\n            <span class=\"icon\">\r\n                <i class=\"fa-solid fa-xmark\"></i>\r\n            </span>\r\n        </button>\r\n    </div>\r\n    <div class=\"task-info\">\r\n        <header class=\"info-header\">\r\n            <div class=\"card-name\">{{task.name}}</div>\r\n            <div>\r\n                <button class=\"button\" mat-dialog-close (click)=\"openEditMenu()\">\r\n                    <span class=\"icon\">\r\n                        <i class=\"fas fa-edit\"></i>\r\n                    </span>\r\n                    <span>Edit card</span>\r\n                </button>\r\n            </div>\r\n        </header>\r\n\r\n        <body class=\"info-body\">\r\n            <div class=\"task-params\">\r\n                <div class=\"param-header\">\r\n                    <span class=\"icon\">\r\n                        <i class=\"fa-solid fa-list\"></i>\r\n                    </span>\r\n                    <span>List</span>\r\n                </div>\r\n                <div class=\"param\" *ngIf=\"currentTaskList$ | async as currentTaskList\">{{ currentTaskList.name }}</div>\r\n                <div class=\"param-header\">\r\n                    <span class=\"icon\">\r\n                        <i class=\"fas fa-calendar-alt\"></i>\r\n                    </span>\r\n                    <span>Due date</span>\r\n                </div>\r\n                <div class=\"param\">{{getFormatedDate(task.dueTime)}}</div>\r\n                <div class=\"param-header\">\r\n                    <span class=\"icon\">\r\n                        <i class=\"fa-solid fa-tags\"></i>\r\n                    </span>\r\n                    <span>Priority</span>\r\n                </div>\r\n                <div class=\"param\">{{getPriorityString(task.priority)}}</div>\r\n            </div>\r\n            <div class=\"task-description\">\r\n                <div class=\"description-header\">\r\n                    Description\r\n                </div>\r\n                <div class=\"description-body\">{{task.description}}</div>\r\n            </div>\r\n        </body>\r\n    </div>\r\n    <div class=\"task-activity\">\r\n        <header class=\"activity-header\">\r\n            Activity\r\n        </header>\r\n\r\n        <body class=\"activity-body\">\r\n            <ng-container *ngIf=\"(taskActivities$ | async) as taskActivities; else loading\">\r\n                <div class=\"activity-event\" *ngFor=\"let activity of taskActivities\">\r\n                    <div class=\"event-description\" *ngIf=\"activity.description\"\r\n                        [innerHTML]=\"sanitizeHtml(activity.description)\">\r\n                    </div>\r\n                    <div class=\"event-date is-italic\">{{getFormatedDate(activity.activityTime)}}</div>\r\n                </div>\r\n            </ng-container>\r\n            <ng-template #loading>\r\n                Loading...\r\n            </ng-template>\r\n        </body>\r\n    </div>\r\n</div>"
        },
        {
            "name": "TaskListComponent",
            "id": "component-TaskListComponent-8bce186ad014076b8b6711b1804adda445150c761e9da45322355f075edccde199b2ac97fdfab485e288cb34b87b41e5394533abaefb24b6c1a643a00b0e699c",
            "file": "src/app/modules/task-board/components/tasks/task-list/task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tasks-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "taskList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "BoardTaskList | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "deleteTaskList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPopupListData",
                    "args": [],
                    "optional": false,
                    "returnType": "TaskListsPopupData",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTaskDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<BoardTaskList>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<BoardTaskList>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openListManagerMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openNewTaskManagerMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>The component that represents task list. Could call deleting, adding, information task and for editing own task list data menus.</p>\n",
            "rawdescription": "\nThe component that represents task list. Could call deleting, adding, information task and for editing own task list data menus.",
            "type": "component",
            "sourceCode": "import { CdkDragDrop } from '@angular/cdk/drag-drop';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BoardTask, BoardTaskList } from '../../../../shared';\r\nimport { TaskListManagerComponent, TaskListService, TaskListsPopupData, TaskManagerComponent, TaskPopupData, TaskService } from '../../../index';\r\n/**The component that represents task list. Could call deleting, adding, information task and for editing own task list data menus.*/\r\n@Component({\r\n  selector: 'tasks-list',\r\n  templateUrl: './task-list.component.html',\r\n  styleUrl: './task-list.component.scss',\r\n})\r\nexport class TaskListComponent {\r\n  @Input() taskList: BoardTaskList | undefined;\r\n  @Input({ required: true }) boardId!: string;\r\n\r\n  constructor(private dialog: MatDialog,\r\n    private taskListService: TaskListService,\r\n    private taskService: TaskService) { }\r\n\r\n  onTaskDrop(event: CdkDragDrop<BoardTaskList>) {\r\n    var task: BoardTask = {\r\n      ...event.item.data,\r\n      boardTaskListId: event.container.data.id\r\n    };\r\n    this.taskService.updateTask(event.previousContainer.data, task, event.currentIndex);\r\n  }\r\n  openListManagerMenu() {\r\n    const dialogRef = this.dialog.open(TaskListManagerComponent, {\r\n      data: this.getPopupListData()\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        const isNew = this.taskList == undefined;\r\n        if (isNew) {\r\n          this.taskListService.createTaskList(result);\r\n        }\r\n        else {\r\n          this.taskListService.updateTaskList(result);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  openNewTaskManagerMenu() {\r\n    const taskManagerData: TaskPopupData = {\r\n      task: undefined,\r\n      taskListId: this.taskList?.id!,\r\n      boardId: this.boardId\r\n    }\r\n    const dialogRef = this.dialog.open(TaskManagerComponent, {\r\n      data: taskManagerData,\r\n    });\r\n  }\r\n  deleteTaskList() {\r\n    this.taskListService.deleteTaskList(this.taskList!);\r\n  }\r\n  private getPopupListData() {\r\n    var data: TaskListsPopupData = {\r\n      taskList: this.taskList,\r\n      boardId: this.boardId\r\n    }\r\n    return data;\r\n  }\r\n}",
            "styleUrl": "./task-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"task-list-wrapper\">\r\n    @if(taskList)\r\n    {\r\n    <header class=\"task-list-header\">\r\n        <div class=\"header-title\">\r\n            <div class=\"header-title-text\">\r\n                {{taskList.name}}\r\n            </div>\r\n            <div class=\"end-container\">\r\n                <span>{{taskList.boardTasks.length}}</span>\r\n                <button class=\"card-header-icon\" [matMenuTriggerFor]=\"menu\">\r\n                    <span class=\"icon\">\r\n                        <i class=\"fas fa-ellipsis-v\"></i>\r\n                    </span>\r\n                </button>\r\n            </div>\r\n            <mat-menu #menu=\"matMenu\">\r\n                <button mat-menu-item (click)=\"openListManagerMenu()\">\r\n                    <span class=\"icon\">\r\n                        <i class=\"fas fa-edit\"></i>\r\n                    </span>\r\n                    <span>Edit</span>\r\n                </button>\r\n                <button mat-menu-item class=\"has-text-danger\" (click)=\"deleteTaskList()\">\r\n                    <span class=\"icon\">\r\n                        <i class=\"fa-solid fa-trash\"></i>\r\n                    </span>\r\n                    <span>Delete</span>\r\n                </button>\r\n            </mat-menu>\r\n        </div>\r\n        <div class=\"new-card-menu\">\r\n            <button class=\"new-card-button\" aria-label=\"add new card\" (click)=\"openNewTaskManagerMenu()\">\r\n                <span class=\"icon\">\r\n                    <i class=\"fa-solid fa-plus\"></i>\r\n                </span>\r\n                <span>Add New Card</span>\r\n            </button>\r\n        </div>\r\n    </header>\r\n\r\n    <body class=\"tasks-container\" cdkDropList [cdkDropListData]=\"taskList\" (cdkDropListDropped)=\"onTaskDrop($event)\">\r\n        @for (task of taskList.boardTasks; track task) {\r\n        <task class=\"task-box\" [task]=\"task\" [boardId]=\"taskList.boardId\" cdkDrag [cdkDragData]=\"task\">\r\n        </task>\r\n        }\r\n    </body>\r\n    }\r\n    @else\r\n    {\r\n    <div class=\"empty-list\">\r\n        <button (click)=\"openListManagerMenu()\">\r\n            <i class=\"fas fa-plus-circle\"></i>\r\n        </button>\r\n    </div>\r\n    }\r\n</div>"
        },
        {
            "name": "TaskListManagerComponent",
            "id": "component-TaskListManagerComponent-3c109531515bfd16ff3bd1b4bf91c6cefc0514c6724e85d2410c5c26779e59f333bf6c84680c3248590011acafe54e8a639fdcbeefdd933173dcb27b5bd21c67",
            "file": "src/app/modules/task-board/components/tasks/task-list-manager/task-list-manager.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-list-manager",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-list-manager.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardName",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListsPopupData",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "taskList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTaskList",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "taskListForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "assignTaskList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getDataFromForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isNameInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>The component for editing/creating a task list.</p>\n",
            "rawdescription": "\nThe component for editing/creating a task list.",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { BoardTaskList, getDefaultBoardTaskList } from '../../../../shared';\r\nimport { TaskListsPopupData } from '../../../index';\r\n\r\n/**The component for editing/creating a task list.*/\r\n@Component({\r\n  selector: 'app-task-list-manager',\r\n  templateUrl: './task-list-manager.component.html',\r\n  styleUrl: './task-list-manager.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TaskListManagerComponent implements OnInit {\r\n  taskListForm!: FormGroup;\r\n  cardName: string = \"\";\r\n  private taskList!: BoardTaskList;\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: TaskListsPopupData,\r\n    private formBuilder: FormBuilder,\r\n    private dialogRef: MatDialogRef<TaskListManagerComponent>,\r\n    private cdr: ChangeDetectorRef) { }\r\n\r\n  ngOnInit(): void {\r\n    this.cardName = this.data.taskList ? \"Edit List\" : \"Create List\";\r\n    this.assignTaskList();\r\n    this.initForm();\r\n  }\r\n  onSubmit(): void {\r\n    if (this.taskListForm.valid) {\r\n      var taskListFromForm = this.getDataFromForm();\r\n      this.dialogRef.close(taskListFromForm);\r\n    }\r\n  }\r\n  isNameInvalid() {\r\n    return this.taskListForm.get(\"name\")?.invalid && this.taskListForm.get(\"name\")?.dirty;\r\n  }\r\n  updateView() {\r\n    this.cdr.markForCheck();\r\n  }\r\n  private assignTaskList() {\r\n    this.taskList = this.data.taskList ? this.data.taskList : getDefaultBoardTaskList();\r\n  }\r\n  private initForm(): void {\r\n    this.taskListForm = this.formBuilder.group({\r\n      name: [this.taskList?.name || '', Validators.required]\r\n    });\r\n  }\r\n  private getDataFromForm() {\r\n    const formValue = this.taskListForm.value;\r\n    const buffer = { ...this.taskList, name: formValue.name, boardId: this.data.boardId };\r\n    return buffer;\r\n  }\r\n}\r\n",
            "styleUrl": "./task-list-manager.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "TaskListsPopupData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TaskListManagerComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "TaskListsPopupData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TaskListManagerComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"taskListForm\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"manager-wrapper\">\r\n        <header class=\"manager-header\">{{cardName}}</header>\r\n\r\n        <body class=\"manager-body\">\r\n            <div>\r\n                <span *ngIf=\"isNameInvalid()\" class=\"message is-danger\">\r\n                    Please enter list name\r\n                </span>\r\n                <input class=\"input\" id=\"input-name\" type=\"text\" placeholder=\"List name\" formControlName=\"name\">\r\n            </div>\r\n            <div class=\"action-buttons\">\r\n                <button mat-dialog-close class=\"button\">\r\n                    <span>Cancel</span>\r\n                </button>\r\n                <button type=\"submit\" [disabled]=\"taskListForm.invalid\" class=\"button is-dark\">\r\n                    <span>Save</span>\r\n                </button>\r\n            </div>\r\n        </body>\r\n    </div>\r\n</form>"
        },
        {
            "name": "TaskManagerComponent",
            "id": "component-TaskManagerComponent-4c54c4f68cb0417076097bee96f12d722f91d1ed0a59830c1cb226e30eec7d3ec1d0a267d75c2a9c214926510b45e01cd00dc2b22dbae2da77e935937705835e",
            "file": "src/app/modules/task-board/components/tasks/task-manager/task-manager.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-manager",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-manager.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allTaskLists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTaskList[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "cardName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isNewTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTask",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "taskForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "assignTask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createNewTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllPriorityNames",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTaskFromForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getTaskLists",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isDateInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isNameInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setMinDate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>The component for editing/creating a task. Takes data task from mat dialog data.</p>\n",
            "rawdescription": "\nThe component for editing/creating a task. Takes data task from mat dialog data.",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { BoardTask, BoardTaskList, DateValidator, Priority, PriorityConvertorService, getDefaultBoardTask } from '../../../../shared';\r\nimport { TaskListService, TaskPopupData, TaskService } from '../../../index';\r\n\r\n/** The component for editing/creating a task. Takes data task from mat dialog data.*/\r\n@Component({\r\n  selector: 'app-task-manager',\r\n  templateUrl: './task-manager.component.html',\r\n  styleUrl: './task-manager.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TaskManagerComponent implements OnInit {\r\n  taskForm!: FormGroup;\r\n  cardName!: string;\r\n  minDate!: Date;\r\n  isNewTask!: boolean;\r\n  allTaskLists!: BoardTaskList[];\r\n  private task!: BoardTask;\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) private data: TaskPopupData,\r\n    private taskListService: TaskListService,\r\n    private formBuilder: FormBuilder,\r\n    private dialogRef: MatDialogRef<TaskManagerComponent>,\r\n    private taskService: TaskService,\r\n    private dateValidator: DateValidator) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.isNewTask = this.data.task == undefined;\r\n    this.cardName = this.isNewTask ? \"Create Task\" : \"Edit Task\";\r\n    this.setMinDate();\r\n    this.getTaskLists();\r\n    this.assignTask();\r\n    this.initForm();\r\n  }\r\n  getAllPriorityNames() {\r\n    return PriorityConvertorService.getAllPrioritiesString()\r\n  }\r\n  onSubmit(): void {\r\n    if (this.taskForm.valid) {\r\n      var taskInForm = this.getTaskFromForm();\r\n      if (this.isNewTask)\r\n        this.createNewTask(taskInForm);\r\n      else\r\n        this.updateTask(taskInForm);\r\n      this.dialogRef.close(taskInForm);\r\n    }\r\n  }\r\n  isDateInvalid() {\r\n    return this.taskForm.get(\"dueDate\")?.invalid && this.taskForm.get(\"dueDate\")?.dirty;\r\n  }\r\n  isNameInvalid() {\r\n    return this.taskForm.get(\"name\")?.invalid && (this.taskForm.get(\"name\")?.dirty || this.taskForm.get(\"name\")?.touched);\r\n  }\r\n  private setMinDate() {\r\n    var date = this.isNewTask ? new Date() : this.data.task?.dueTime ?? new Date();\r\n    this.minDate = date;\r\n  }\r\n  private getTaskLists() {\r\n    this.taskListService.getTaskListsByBoardId(this.data.boardId).subscribe((lists) => { this.allTaskLists = lists });\r\n  }\r\n  private assignTask() {\r\n    this.task = this.data.task ? this.data.task : getDefaultBoardTask();\r\n  }\r\n  private initForm(): void {\r\n    const firstListId = this.allTaskLists.length > 0 ? this.allTaskLists[0] : \"\";\r\n    this.taskForm = this.formBuilder.group({\r\n      name: [this.task?.name || '', Validators.required],\r\n      listId: [this.task?.boardTaskListId || firstListId, Validators.required],\r\n      dueDate: [this.task?.dueTime || new Date(), [Validators.required, this.dateValidator.dateMinimum(this.minDate)]],\r\n      priority: [this.task?.priority || Priority.Low, [Validators.required]],\r\n      description: [this.task?.description || \"\"]\r\n    });\r\n  }\r\n  private getTaskFromForm() {\r\n    const formValue = this.taskForm.value;\r\n    const buffer = {\r\n      ...this.task,\r\n      name: formValue.name,\r\n      boardTaskListId: formValue.listId,\r\n      dueTime: formValue.dueDate,\r\n      priority: formValue.priority,\r\n      description: formValue.description,\r\n    };\r\n    return buffer;\r\n  }\r\n  private createNewTask(task: BoardTask) {\r\n    this.taskService.createTask({ ...task, boardTaskListId: this.data.taskListId });\r\n  }\r\n  private updateTask(task: BoardTask) {\r\n    this.taskListService.getTaskListById(this.task.boardTaskListId).subscribe(\r\n      (list) => {\r\n        if (list) {\r\n          var currentTaskList = this.allTaskLists.find(x => x.id == task.boardTaskListId)!;\r\n          var newIndex = currentTaskList.id == task.boardTaskListId ? list.boardTasks.findIndex((element) => element.id === this.task.id) : 0;\r\n          this.taskService.updateTask(list, task, newIndex);\r\n        }\r\n      }\r\n    );\r\n  }\r\n}",
            "styleUrl": "./task-manager.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "TaskPopupData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TaskManagerComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dateValidator",
                        "type": "DateValidator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "TaskPopupData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskListService",
                        "type": "TaskListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TaskManagerComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dateValidator",
                        "type": "DateValidator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"taskForm\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"task-manager-wrapper\">\r\n        <header class=\"task-manager-header\">\r\n            {{cardName}}\r\n        </header>\r\n\r\n        <body class=\"task-manager-body\">\r\n\r\n            <div>\r\n                <label>Task Name</label>\r\n                <div>\r\n                    <input class=\"input\" id=\"input-name\" type=\"text\" placeholder=\"Task name\" formControlName=\"name\">\r\n                    <p *ngIf=\"isNameInvalid()\" class=\"help is-danger\">\r\n                        Please enter task name\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"task-params\">\r\n                <div class=\"param-header\">\r\n                    <span class=\"icon\">\r\n                        <i class=\"fa-solid fa-list\"></i>\r\n                    </span>\r\n                    <span>List</span>\r\n                </div>\r\n                <div class=\"param\">\r\n                    <ng-container *ngIf=\"allTaskLists; else loading\">\r\n                        <mat-select formControlName=\"listId\" panelClass=\"dropdown-panel\">\r\n                            <ng-container *ngFor=\"let taskList of allTaskLists;\">\r\n                                <mat-option [value]=\"taskList.id\">{{taskList.name}}</mat-option>\r\n                            </ng-container>\r\n                        </mat-select>\r\n                    </ng-container>\r\n                    <ng-template #loading>\r\n                        Loading...\r\n                    </ng-template>\r\n                </div>\r\n                <div class=\"param-header\">\r\n                    <span class=\"icon\">\r\n                        <i class=\"fas fa-calendar-alt\"></i>\r\n                    </span>\r\n                    <span>Due date</span>\r\n                </div>\r\n                <div class=\"param\">\r\n                    <div class=\"task-datapicker\">\r\n                        <div>\r\n                            <input class=\"input\" [matDatepicker]=\"picker\" formControlName=\"dueDate\" [min]=\"minDate\">\r\n                            <p *ngIf=\"isDateInvalid()\" class=\"help is-danger\">\r\n                                Date must be after today\r\n                            </p>\r\n                        </div>\r\n                        <mat-datepicker #picker></mat-datepicker>\r\n                        <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                    </div>\r\n                </div>\r\n                <div class=\"param-header\">\r\n                    <span class=\"icon\">\r\n                        <i class=\"fa-solid fa-tags\"></i>\r\n                    </span>\r\n                    <span>Priority</span>\r\n                </div>\r\n                <div class=\"param\">\r\n                    <span>\r\n                        <mat-select formControlName=\"priority\">\r\n                            <ng-container *ngFor=\"let priority of  this.getAllPriorityNames(); index as i\">\r\n                                <mat-option [value]=\"i\">{{priority}}</mat-option>\r\n                            </ng-container>\r\n                        </mat-select>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div class=\"task-description\">\r\n                <div class=\"description-header\">\r\n                    Description\r\n                </div>\r\n                <textarea class=\"description-body\" formControlName=\"description\">\r\n            </textarea>\r\n            </div>\r\n            <div class=\"action-buttons\">\r\n                <button mat-dialog-close class=\"button\">\r\n                    <span>Cancel</span>\r\n                </button>\r\n                <button type=\"submit\" [disabled]=\"taskForm.invalid\" class=\"button is-dark\">\r\n                    <span>Save</span>\r\n                </button>\r\n            </div>\r\n        </body>\r\n    </div>\r\n</form>"
        }
    ],
    "modules": [
        {
            "name": "ActionHistoryModule",
            "id": "module-ActionHistoryModule-b89bf637d6e11a08af09046c9b2ebf94c7fe07bc76b2dc2b6d8c0409d55c954197644be0b9cea98590d3c9d630d4625b7dea7d313a347a9e0b5a5a5368093308",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/action-history/action-history.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { ActivityComponent, ActivityHistoryComponent } from './index';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ActivityComponent,\r\n    ActivityHistoryComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatDialogModule,\r\n  ],\r\n  exports:\r\n    [\r\n      ActivityHistoryComponent\r\n    ]\r\n})\r\nexport class ActionHistoryModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActivityComponent"
                        },
                        {
                            "name": "ActivityHistoryComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ActivityHistoryComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-36be34ea1109f828a978502d1f002143b56b39e9f7693a7e2c6bba67c6af7e9e8830d5b6ac285131d3cfc3e5a18b5e185188b94a3c9cfaace88d15b3e2114a60",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/core/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { BoardComponent, BoardListComponent } from '../task-board';\r\nimport { MainViewComponent } from './index';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: \"\", component: MainViewComponent,\r\n    children: [{ path: \":boardId\", component: BoardComponent }, { path: \"\", component: BoardListComponent }]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-bf4e1acc265bafb0e467815079a2d42c7dc077bcb5e61c12e6b95b59860a44150fbe0cc64440cff9121e6ba8962cba306d6d346c6b629a0a60d22baf92d3b887",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { provideAnimationsAsync } from '@angular/platform-browser/animations/async';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { ACTIVITY_FORMAT_CONFIG, APP_ACTIVITY_FORMAT_CONFIG, ActivityControllerService, ActivityDescriptionFormatterService, ActivityDescriptionManagerService, ActivityService } from '../action-history';\r\nimport { APP_DATE_CONFIG, APP_USER_CONFIG, CustomDatePickerValidatorService, CustomErrorHandler, DATE_CONFIG, DateFormaterService, DateValidator, ErrorHandlerService, RedirectorContollerService, RedirectorService, StandartDateFormaterService, URLDefiner, URLDefinerService, USER_CONFIG } from '../shared';\r\nimport { BoardControllerService, BoardService, TaskControllerService, TaskListControllerService, TaskListService, TaskService } from '../task-board';\r\nimport { TaskBoardModule } from '../task-board/task-board.module';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './components/app/app.component';\r\nimport { MainViewComponent } from './index';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MainViewComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    TaskBoardModule,\r\n    MatButtonModule,\r\n    StoreModule.forRoot({}, {})\r\n  ],\r\n  providers: [\r\n    { provide: DATE_CONFIG, useValue: APP_DATE_CONFIG },\r\n    { provide: USER_CONFIG, useValue: APP_USER_CONFIG },\r\n    { provide: ACTIVITY_FORMAT_CONFIG, useValue: APP_ACTIVITY_FORMAT_CONFIG },\r\n    { provide: RedirectorService, useClass: RedirectorContollerService },\r\n    { provide: DateFormaterService, useClass: StandartDateFormaterService },\r\n    { provide: CustomErrorHandler, useClass: ErrorHandlerService },\r\n    { provide: ActivityService, useClass: ActivityControllerService },\r\n    { provide: ActivityDescriptionFormatterService, useClass: ActivityDescriptionManagerService },\r\n    { provide: DateValidator, useClass: CustomDatePickerValidatorService },\r\n    { provide: BoardService, useClass: BoardControllerService },\r\n    { provide: TaskListService, useClass: TaskListControllerService },\r\n    { provide: TaskService, useClass: TaskControllerService },\r\n    { provide: URLDefiner, useClass: URLDefinerService },\r\n    provideAnimationsAsync()\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class CoreModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "MainViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "TaskBoardModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskBoardModule",
            "id": "module-TaskBoardModule-151e2a09861aebaf52470ed52717429edc611ff6d607147d3f2e33a1fe02c7a80aa2c00833290f46883192c13f028d542631cf1afe482549012a9e3272286da5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/task-board/task-board.module.ts",
            "methods": [],
            "sourceCode": "import { CdkDrag, CdkDropList, CdkDropListGroup } from '@angular/cdk/drag-drop';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { provideAnimationsAsync } from '@angular/platform-browser/animations/async';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { provideEffects } from '@ngrx/effects';\r\nimport { provideState, provideStore } from '@ngrx/store';\r\nimport { ActionHistoryModule } from '../action-history/action-history.module';\r\nimport { BoardComponent, BoardEffects as BoardEffect, BoardItemComponent, BoardListComponent, BoardManagerComponent, TaskComponent, TaskInfoComponent, TaskListComponent, TaskListEffect, TaskListManagerComponent, TaskManagerComponent, boardReducer, taskReducer } from './index';\r\nimport { TaskEffect } from './store/tasks/task/task.effect';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TaskComponent,\r\n    TaskListComponent,\r\n    TaskListManagerComponent,\r\n    TaskInfoComponent,\r\n    TaskManagerComponent,\r\n    BoardComponent,\r\n    BoardListComponent,\r\n    BoardItemComponent,\r\n    BoardManagerComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FontAwesomeModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatDialogModule,\r\n    MatSelectModule,\r\n    MatNativeDateModule,\r\n    MatDatepickerModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    CdkDropList,\r\n    CdkDrag,\r\n    CdkDropListGroup,\r\n    ActionHistoryModule\r\n  ],\r\n  exports: [BoardComponent],\r\n  providers: [\r\n    provideStore(),\r\n    provideState({ name: \"tasks\", reducer: taskReducer }),\r\n    provideState({ name: \"boards\", reducer: boardReducer }),\r\n    provideEffects(TaskEffect),\r\n    provideEffects(TaskListEffect),\r\n    provideEffects(BoardEffect),\r\n    provideAnimationsAsync()\r\n  ]\r\n})\r\nexport class TaskBoardModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BoardComponent"
                        },
                        {
                            "name": "BoardItemComponent"
                        },
                        {
                            "name": "BoardListComponent"
                        },
                        {
                            "name": "BoardManagerComponent"
                        },
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskInfoComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        },
                        {
                            "name": "TaskListManagerComponent"
                        },
                        {
                            "name": "TaskManagerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActionHistoryModule"
                        },
                        {
                            "name": "CdkDrag"
                        },
                        {
                            "name": "CdkDropList"
                        },
                        {
                            "name": "CdkDropListGroup"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BoardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ACTIVITY_FORMAT_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/action-history/configs/activity-format-config/activity-format-config.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ActivityFormatConfig>('activityFormatConfig')"
            },
            {
                "name": "allMockTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-board/tasks/mockServices.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[mockTask, mockTaskLotOfText]"
            },
            {
                "name": "APP_ACTIVITY_FORMAT_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/action-history/configs/activity-format-config/activity-format-config.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActivityFormatConfig",
                "defaultValue": "{\r\n  mainNameStyleBegin: environment.mainNameStyleBegin,\r\n  mainNameStyleEnd: environment.mainNameStyleEnd,\r\n  secondaryNameStyleBegin: environment.secondaryNameStyleBegin,\r\n  secondaryNameStyleEnd: environment.secondaryNameStyleEnd,\r\n  maxNameLength: environment.maxNameLength,\r\n  maxNameLengthReplacingString: environment.maxNameLengthReplacingString\r\n}"
            },
            {
                "name": "APP_DATE_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/shared/configs/date-config/date-config.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DateConfig",
                "defaultValue": "{\r\n  format: environment.dateFormat\r\n}"
            },
            {
                "name": "APP_USER_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/shared/configs/user-config/user-config.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "UserConfig",
                "defaultValue": "{\r\n  userIdKey: environment.localStorageUser\r\n}"
            },
            {
                "name": "boardReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialState,\r\n    on(getBoardsByUserIdSuccess, (state, { boards }) => ({\r\n        ...state,\r\n        boards,\r\n        error: null\r\n    })),\r\n    on(getBoardsByUserIdFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(createBoardSuccess, (state, { board }) => ({\r\n        ...state,\r\n        boards: [...state.boards, board],\r\n        error: null\r\n    })),\r\n    on(createBoardFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(updateBoardSuccess, (state, { board }) => ({\r\n        ...state,\r\n        boards: state.boards.map(b => b.id === board.id ? board : b),\r\n        error: null\r\n    })),\r\n    on(updateBoardFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(deleteBoardSuccess, (state, { boardId }) => ({\r\n        ...state,\r\n        boards: state.boards.filter(board => board.id !== boardId),\r\n        error: null\r\n    })),\r\n    on(deleteBoardFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    }))\r\n)"
            },
            {
                "name": "createBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Add Board',\r\n    props<{ board: Board }>()\r\n)"
            },
            {
                "name": "createBoardFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Add Board Failure',\r\n    props<{ error: any }>()\r\n)"
            },
            {
                "name": "createBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Add Board Success',\r\n    props<{ board: Board }>()\r\n)"
            },
            {
                "name": "createTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task] Create Task',\r\n    props<{ task: BoardTask }>()\r\n)"
            },
            {
                "name": "createTaskFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task] Create Task Failure',\r\n    props<{ error: any }>()\r\n)"
            },
            {
                "name": "createTaskList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task List] Add Task List',\r\n    props<{ taskList: BoardTaskList }>()\r\n)"
            },
            {
                "name": "createTaskListFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task List] Add Task List Failure',\r\n    props<{ error: any }>()\r\n)"
            },
            {
                "name": "createTaskListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task List] Add Task List Success',\r\n    props<{ taskList: BoardTaskList }>()\r\n)"
            },
            {
                "name": "createTaskSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task] Create Task Success',\r\n    props<{ task: BoardTask }>()\r\n)"
            },
            {
                "name": "currentBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-board/tasks/mockServices.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BehaviorSubject<Board | undefined>"
            },
            {
                "name": "DATE_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/shared/configs/date-config/date-config.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<DateConfig>('dateConfig')"
            },
            {
                "name": "deleteBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Delete Board',\r\n    props<{ boardId: string }>()\r\n)"
            },
            {
                "name": "deleteBoardFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Delete Board Failure',\r\n    props<{ error: any }>()\r\n)"
            },
            {
                "name": "deleteBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Delete Board Success',\r\n    props<{ boardId: string }>()\r\n)"
            },
            {
                "name": "deleteTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task] Delete Task',\r\n    props<{ taskId: string }>()\r\n)"
            },
            {
                "name": "deleteTaskFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task] Delete Task Failure',\r\n    props<{ error: any }>()\r\n)"
            },
            {
                "name": "deleteTaskList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task List] Delete Task List',\r\n    props<{ listId: string }>()\r\n)"
            },
            {
                "name": "deleteTaskListFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task List] Delete Task List Failure',\r\n    props<{ error: any }>()\r\n)"
            },
            {
                "name": "deleteTaskListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task List] Delete Task List Success',\r\n    props<{ listId: string }>()\r\n)"
            },
            {
                "name": "deleteTaskSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task] Delete Task Success',\r\n    props<{ taskId: string }>()\r\n)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environment/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  api: 'https://localhost:5002',\r\n  dateFormat: 'EEE, d MMM YYYY',\r\n  localStorageUser: 'USER_ID',\r\n  mainNameStyleBegin: '<span style=\"color: black;\">⦿ ',\r\n  mainNameStyleEnd: '</span>',\r\n  secondaryNameStyleBegin: '<span style=\"font-weight: 600;\">',\r\n  secondaryNameStyleEnd: '</span>',\r\n  maxNameLength: 20,\r\n  maxNameLengthReplacingString: '...'\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environment/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  api: 'https://localhost:44300',\r\n  dateFormat: 'EEE, d MMM YYYY',\r\n  localStorageUser: 'USER_ID',\r\n  mainNameStyleBegin: '<span style=\"color: black;\">⦿ ',\r\n  mainNameStyleEnd: '</span>',\r\n  secondaryNameStyleBegin: '<span style=\"font-weight: 600;\">',\r\n  secondaryNameStyleEnd: '</span>',\r\n  maxNameLength: 20,\r\n  maxNameLengthReplacingString: '...'\r\n}"
            },
            {
                "name": "getBoardsByUserId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Get Boards By User Id'\r\n)"
            },
            {
                "name": "getBoardsByUserIdFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Get Boards By User Id Failure',\r\n    props<{ error: any }>()\r\n)"
            },
            {
                "name": "getBoardsByUserIdSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Get Boards By User Id Success',\r\n    props<{ boards: Board[] }>()\r\n)"
            },
            {
                "name": "getTaskListsByBoardId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task List] Get Task Lists By Board Id',\r\n    props<{ boardId: string }>()\r\n)"
            },
            {
                "name": "getTaskListsByBoardIdFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task List] Get Task Lists By Board Id Failure',\r\n    props<{ error: any }>()\r\n)"
            },
            {
                "name": "getTaskListsByBoardIdSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task List] Get Task Lists By Board Id Success',\r\n    props<{ taskLists: BoardTaskList[] }>()\r\n)"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BoardState",
                "defaultValue": "{\r\n    boards: [],\r\n    error: null\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/tasks.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TaskListState",
                "defaultValue": "{\r\n    taskLists: [],\r\n    error: null\r\n}"
            },
            {
                "name": "mockBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-board/tasks/mockServices.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Board",
                "defaultValue": "{\r\n    id: \"1\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 1\",\r\n}"
            },
            {
                "name": "mockBoard2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-board/tasks/mockServices.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Board",
                "defaultValue": "{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2\",\r\n}"
            },
            {
                "name": "mockBoardLotOfText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-board/tasks/mockServices.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Board",
                "defaultValue": "{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2 with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeee\",\r\n}"
            },
            {
                "name": "mockBoards",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-board/tasks/mockServices.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[mockBoard, mockBoard2]"
            },
            {
                "name": "mockTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-board/tasks/mockServices.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BoardTask",
                "defaultValue": "{\r\n    id: \"1\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test Task 1\",\r\n    description: \"Description\",\r\n    priority: Priority.High\r\n}"
            },
            {
                "name": "mockTaskActivities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-board/tasks/mockServices.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BoardTaskActivity[]",
                "defaultValue": "[\r\n        {\r\n            id: \"1\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription1\"\r\n        },\r\n        {\r\n            id: \"2\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription2\"\r\n        },\r\n        {\r\n            id: \"3\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription3\"\r\n        },\r\n        {\r\n            id: \"4\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        },\r\n        {\r\n            id: \"5\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        }\r\n    ]"
            },
            {
                "name": "mockTaskList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-board/tasks/mockServices.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BoardTaskList",
                "defaultValue": "{\r\n    id: \"1\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List 1111111111111111111111111111111111111111111111111111111111111111111111111111\",\r\n    boardTasks: [mockTask, mockTaskLotOfText]\r\n}"
            },
            {
                "name": "mockTaskListLotOfText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-board/tasks/mockServices.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BoardTaskList",
                "defaultValue": "{\r\n    id: \"2\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\r\n    boardTasks: []\r\n}"
            },
            {
                "name": "mockTaskLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-board/tasks/mockServices.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[mockTaskList]"
            },
            {
                "name": "mockTaskLotOfText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task-board/tasks/mockServices.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BoardTask",
                "defaultValue": "{\r\n    id: \"2\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test with a lot of textttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt\",\r\n    description: \"Descriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\",\r\n    priority: Priority.High\r\n}"
            },
            {
                "name": "selectAllBoards",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectBoardState,\r\n    (state: BoardState) => state.boards\r\n)"
            },
            {
                "name": "selectAllTaskLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/tasks.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectTaskListState,\r\n    (state: TaskListState) => state.taskLists\r\n)"
            },
            {
                "name": "selectBoardError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectBoardState,\r\n    (state: BoardState) => state.error\r\n)"
            },
            {
                "name": "selectBoardState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<BoardState>('boards')"
            },
            {
                "name": "selectTaskError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/tasks.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectTaskListState,\r\n    (state: TaskListState) => state.error\r\n)"
            },
            {
                "name": "selectTaskListState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/tasks.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<TaskListState>('tasks')"
            },
            {
                "name": "taskReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/tasks.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialState,\r\n    on(getTaskListsByBoardIdSuccess, (state, { taskLists }) => ({\r\n        ...state,\r\n        taskLists,\r\n        error: null\r\n    })),\r\n    on(getTaskListsByBoardIdFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(createTaskListSuccess, (state, { taskList }) => ({\r\n        ...state,\r\n        taskLists: [...state.taskLists, taskList],\r\n        error: null\r\n    })),\r\n    on(createTaskListFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(updateTaskListSuccess, (state, { taskList }) => ({\r\n        ...state,\r\n        taskLists: state.taskLists.map(list => list.id === taskList.id ? taskList : list),\r\n        error: null\r\n    })),\r\n    on(updateTaskListFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(deleteTaskListSuccess, (state, { listId }) => ({\r\n        ...state,\r\n        taskLists: state.taskLists.filter(taskList => taskList.id !== listId),\r\n        error: null\r\n    })),\r\n    on(deleteTaskListFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(createTaskSuccess, (state, { task }) => {\r\n        const taskListIndex = state.taskLists.findIndex(list => list.id === task.boardTaskListId);\r\n        if (taskListIndex >= 0) {\r\n            const updatedTaskList = {\r\n                ...state.taskLists[taskListIndex],\r\n                boardTasks: [...state.taskLists[taskListIndex].boardTasks, task]\r\n            };\r\n            const updatedTaskLists = [...state.taskLists];\r\n            updatedTaskLists[taskListIndex] = updatedTaskList;\r\n            return {\r\n                ...state,\r\n                taskLists: updatedTaskLists,\r\n                error: null\r\n            };\r\n        }\r\n        return state;\r\n    }),\r\n    on(createTaskFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(updateTask, (state, { prevTaskList, task, posIndex }) => {\r\n        const taskListIndex = state.taskLists.findIndex(list => list.id === task.boardTaskListId);\r\n        if (taskListIndex === -1) {\r\n            return state;\r\n        }\r\n        const currentTaskList = state.taskLists[taskListIndex];\r\n        if (currentTaskList.id === prevTaskList.id) {\r\n            return updateTaskInSameList(task, state, posIndex);\r\n        } else {\r\n            return updateTaskInDifferentList(task, state, posIndex, prevTaskList);\r\n        }\r\n    }),\r\n    on(updateTaskFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(deleteTaskSuccess, (state, { taskId }) => {\r\n        const taskListIndex = state.taskLists.findIndex(list => list.boardTasks.some(task => task.id === taskId));\r\n        if (taskListIndex >= 0) {\r\n            const updatedTaskList = {\r\n                ...state.taskLists[taskListIndex],\r\n                boardTasks: state.taskLists[taskListIndex].boardTasks.filter(task => task.id !== taskId)\r\n            };\r\n            const updatedTaskLists = [...state.taskLists];\r\n            updatedTaskLists[taskListIndex] = updatedTaskList;\r\n            return {\r\n                ...state,\r\n                taskLists: updatedTaskLists,\r\n                error: null\r\n            };\r\n        }\r\n        return state;\r\n    }),\r\n    on(deleteTaskFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    }))\r\n)"
            },
            {
                "name": "updateBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Update Board',\r\n    props<{ board: Board }>()\r\n)"
            },
            {
                "name": "updateBoardFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Update Board Failure',\r\n    props<{ error: any }>()\r\n)"
            },
            {
                "name": "updateBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Board] Update Board Success',\r\n    props<{ board: Board }>()\r\n)"
            },
            {
                "name": "updateTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task] Update Task',\r\n    props<{ prevTaskList: BoardTaskList, task: BoardTask; posIndex: number }>()\r\n)"
            },
            {
                "name": "updateTaskFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task] Update Task Failure',\r\n    props<{ error: any }>()\r\n)"
            },
            {
                "name": "updateTaskList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task List] Update Task List',\r\n    props<{ taskList: BoardTaskList }>()\r\n)"
            },
            {
                "name": "updateTaskListFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task List] Update Task List Failure',\r\n    props<{ error: any }>()\r\n)"
            },
            {
                "name": "updateTaskListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task List] Update Task List Success',\r\n    props<{ taskList: BoardTaskList }>()\r\n)"
            },
            {
                "name": "updateTaskSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Task] Update Task Success',\r\n    props<{ prevTaskList: BoardTaskList, task: BoardTask; posIndex: number }>()\r\n)"
            },
            {
                "name": "USER_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/shared/configs/user-config/user-config.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<UserConfig>('userConfig')"
            }
        ],
        "functions": [
            {
                "name": "copyBoardValues",
                "file": "src/app/modules/shared/models/board.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dest",
                        "type": "Board",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "copied",
                        "type": "Board",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "dest",
                        "type": "Board",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "copied",
                        "type": "Board",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "copyTaskListValues",
                "file": "src/app/modules/shared/models/board-task-list.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dest",
                        "type": "BoardTaskList",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "copied",
                        "type": "BoardTaskList",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "dest",
                        "type": "BoardTaskList",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "copied",
                        "type": "BoardTaskList",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "copyTaskValues",
                "file": "src/app/modules/shared/models/board-task.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dest",
                        "type": "BoardTask",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toCopy",
                        "type": "BoardTask",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "dest",
                        "type": "BoardTask",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toCopy",
                        "type": "BoardTask",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDefaultBoard",
                "file": "src/app/modules/shared/models/board.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "getDefaultBoardTask",
                "file": "src/app/modules/shared/models/board-task.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "getDefaultBoardTaskList",
                "file": "src/app/modules/shared/models/board-task-list.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "updateTaskInDifferentList",
                "file": "src/app/modules/task-board/store/tasks/tasks.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "task",
                        "type": "BoardTask",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "state",
                        "type": "TaskListState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "posIndex",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "prevTaskList",
                        "type": "BoardTaskList",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "task",
                        "type": "BoardTask",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "state",
                        "type": "TaskListState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "posIndex",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "prevTaskList",
                        "type": "BoardTaskList",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "updateTaskInSameList",
                "file": "src/app/modules/task-board/store/tasks/tasks.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "task",
                        "type": "BoardTask",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "state",
                        "type": "TaskListState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "posIndex",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "task",
                        "type": "BoardTask",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "state",
                        "type": "TaskListState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "posIndex",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ActivityType",
                "childs": [
                    {
                        "name": "Create",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "Update",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Delete",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/modules/shared/enums/activity-type.enum.ts"
            },
            {
                "name": "Priority",
                "childs": [
                    {
                        "name": "Low",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "Medium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "High",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/modules/shared/enums/priority.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/modules/action-history/configs/activity-format-config/activity-format-config.service.ts": [
                {
                    "name": "ACTIVITY_FORMAT_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/action-history/configs/activity-format-config/activity-format-config.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ActivityFormatConfig>('activityFormatConfig')"
                },
                {
                    "name": "APP_ACTIVITY_FORMAT_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/action-history/configs/activity-format-config/activity-format-config.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivityFormatConfig",
                    "defaultValue": "{\r\n  mainNameStyleBegin: environment.mainNameStyleBegin,\r\n  mainNameStyleEnd: environment.mainNameStyleEnd,\r\n  secondaryNameStyleBegin: environment.secondaryNameStyleBegin,\r\n  secondaryNameStyleEnd: environment.secondaryNameStyleEnd,\r\n  maxNameLength: environment.maxNameLength,\r\n  maxNameLengthReplacingString: environment.maxNameLengthReplacingString\r\n}"
                }
            ],
            "src/stories/task-board/tasks/mockServices.ts": [
                {
                    "name": "allMockTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-board/tasks/mockServices.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[mockTask, mockTaskLotOfText]"
                },
                {
                    "name": "currentBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-board/tasks/mockServices.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Board | undefined>"
                },
                {
                    "name": "mockBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-board/tasks/mockServices.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board",
                    "defaultValue": "{\r\n    id: \"1\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 1\",\r\n}"
                },
                {
                    "name": "mockBoard2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-board/tasks/mockServices.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board",
                    "defaultValue": "{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2\",\r\n}"
                },
                {
                    "name": "mockBoardLotOfText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-board/tasks/mockServices.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board",
                    "defaultValue": "{\r\n    id: \"2\",\r\n    userId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Board 2 with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeee\",\r\n}"
                },
                {
                    "name": "mockBoards",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-board/tasks/mockServices.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[mockBoard, mockBoard2]"
                },
                {
                    "name": "mockTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-board/tasks/mockServices.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTask",
                    "defaultValue": "{\r\n    id: \"1\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test Task 1\",\r\n    description: \"Description\",\r\n    priority: Priority.High\r\n}"
                },
                {
                    "name": "mockTaskActivities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-board/tasks/mockServices.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTaskActivity[]",
                    "defaultValue": "[\r\n        {\r\n            id: \"1\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription1\"\r\n        },\r\n        {\r\n            id: \"2\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription2\"\r\n        },\r\n        {\r\n            id: \"3\",\r\n            boardTaskId: \"1\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacription3\"\r\n        },\r\n        {\r\n            id: \"4\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        },\r\n        {\r\n            id: \"5\",\r\n            boardTaskId: \"2\",\r\n            activityTime: new Date(),\r\n            description: \"Activity deacriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"\r\n        }\r\n    ]"
                },
                {
                    "name": "mockTaskList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-board/tasks/mockServices.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTaskList",
                    "defaultValue": "{\r\n    id: \"1\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List 1111111111111111111111111111111111111111111111111111111111111111111111111111\",\r\n    boardTasks: [mockTask, mockTaskLotOfText]\r\n}"
                },
                {
                    "name": "mockTaskListLotOfText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-board/tasks/mockServices.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTaskList",
                    "defaultValue": "{\r\n    id: \"2\",\r\n    boardId: \"1\",\r\n    creationTime: new Date(),\r\n    name: \"Task List with a big nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\r\n    boardTasks: []\r\n}"
                },
                {
                    "name": "mockTaskLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-board/tasks/mockServices.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[mockTaskList]"
                },
                {
                    "name": "mockTaskLotOfText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task-board/tasks/mockServices.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardTask",
                    "defaultValue": "{\r\n    id: \"2\",\r\n    boardTaskListId: \"1\",\r\n    creationTime: new Date(),\r\n    dueTime: new Date(),\r\n    name: \"Test with a lot of textttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt\",\r\n    description: \"Descriptionnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\",\r\n    priority: Priority.High\r\n}"
                }
            ],
            "src/app/modules/shared/configs/date-config/date-config.service.ts": [
                {
                    "name": "APP_DATE_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/shared/configs/date-config/date-config.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateConfig",
                    "defaultValue": "{\r\n  format: environment.dateFormat\r\n}"
                },
                {
                    "name": "DATE_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/shared/configs/date-config/date-config.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<DateConfig>('dateConfig')"
                }
            ],
            "src/app/modules/shared/configs/user-config/user-config.service.ts": [
                {
                    "name": "APP_USER_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/shared/configs/user-config/user-config.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserConfig",
                    "defaultValue": "{\r\n  userIdKey: environment.localStorageUser\r\n}"
                },
                {
                    "name": "USER_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/shared/configs/user-config/user-config.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<UserConfig>('userConfig')"
                }
            ],
            "src/app/modules/task-board/store/board/board.reducer.ts": [
                {
                    "name": "boardReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialState,\r\n    on(getBoardsByUserIdSuccess, (state, { boards }) => ({\r\n        ...state,\r\n        boards,\r\n        error: null\r\n    })),\r\n    on(getBoardsByUserIdFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(createBoardSuccess, (state, { board }) => ({\r\n        ...state,\r\n        boards: [...state.boards, board],\r\n        error: null\r\n    })),\r\n    on(createBoardFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(updateBoardSuccess, (state, { board }) => ({\r\n        ...state,\r\n        boards: state.boards.map(b => b.id === board.id ? board : b),\r\n        error: null\r\n    })),\r\n    on(updateBoardFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(deleteBoardSuccess, (state, { boardId }) => ({\r\n        ...state,\r\n        boards: state.boards.filter(board => board.id !== boardId),\r\n        error: null\r\n    })),\r\n    on(deleteBoardFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    }))\r\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardState",
                    "defaultValue": "{\r\n    boards: [],\r\n    error: null\r\n}"
                }
            ],
            "src/app/modules/task-board/store/board/board.actions.ts": [
                {
                    "name": "createBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Add Board',\r\n    props<{ board: Board }>()\r\n)"
                },
                {
                    "name": "createBoardFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Add Board Failure',\r\n    props<{ error: any }>()\r\n)"
                },
                {
                    "name": "createBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Add Board Success',\r\n    props<{ board: Board }>()\r\n)"
                },
                {
                    "name": "deleteBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Delete Board',\r\n    props<{ boardId: string }>()\r\n)"
                },
                {
                    "name": "deleteBoardFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Delete Board Failure',\r\n    props<{ error: any }>()\r\n)"
                },
                {
                    "name": "deleteBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Delete Board Success',\r\n    props<{ boardId: string }>()\r\n)"
                },
                {
                    "name": "getBoardsByUserId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Get Boards By User Id'\r\n)"
                },
                {
                    "name": "getBoardsByUserIdFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Get Boards By User Id Failure',\r\n    props<{ error: any }>()\r\n)"
                },
                {
                    "name": "getBoardsByUserIdSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Get Boards By User Id Success',\r\n    props<{ boards: Board[] }>()\r\n)"
                },
                {
                    "name": "updateBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Update Board',\r\n    props<{ board: Board }>()\r\n)"
                },
                {
                    "name": "updateBoardFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Update Board Failure',\r\n    props<{ error: any }>()\r\n)"
                },
                {
                    "name": "updateBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Board] Update Board Success',\r\n    props<{ board: Board }>()\r\n)"
                }
            ],
            "src/app/modules/task-board/store/tasks/task/task.actions.ts": [
                {
                    "name": "createTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task] Create Task',\r\n    props<{ task: BoardTask }>()\r\n)"
                },
                {
                    "name": "createTaskFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task] Create Task Failure',\r\n    props<{ error: any }>()\r\n)"
                },
                {
                    "name": "createTaskSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task] Create Task Success',\r\n    props<{ task: BoardTask }>()\r\n)"
                },
                {
                    "name": "deleteTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task] Delete Task',\r\n    props<{ taskId: string }>()\r\n)"
                },
                {
                    "name": "deleteTaskFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task] Delete Task Failure',\r\n    props<{ error: any }>()\r\n)"
                },
                {
                    "name": "deleteTaskSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task] Delete Task Success',\r\n    props<{ taskId: string }>()\r\n)"
                },
                {
                    "name": "updateTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task] Update Task',\r\n    props<{ prevTaskList: BoardTaskList, task: BoardTask; posIndex: number }>()\r\n)"
                },
                {
                    "name": "updateTaskFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task] Update Task Failure',\r\n    props<{ error: any }>()\r\n)"
                },
                {
                    "name": "updateTaskSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task] Update Task Success',\r\n    props<{ prevTaskList: BoardTaskList, task: BoardTask; posIndex: number }>()\r\n)"
                }
            ],
            "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts": [
                {
                    "name": "createTaskList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task List] Add Task List',\r\n    props<{ taskList: BoardTaskList }>()\r\n)"
                },
                {
                    "name": "createTaskListFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task List] Add Task List Failure',\r\n    props<{ error: any }>()\r\n)"
                },
                {
                    "name": "createTaskListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task List] Add Task List Success',\r\n    props<{ taskList: BoardTaskList }>()\r\n)"
                },
                {
                    "name": "deleteTaskList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task List] Delete Task List',\r\n    props<{ listId: string }>()\r\n)"
                },
                {
                    "name": "deleteTaskListFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task List] Delete Task List Failure',\r\n    props<{ error: any }>()\r\n)"
                },
                {
                    "name": "deleteTaskListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task List] Delete Task List Success',\r\n    props<{ listId: string }>()\r\n)"
                },
                {
                    "name": "getTaskListsByBoardId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task List] Get Task Lists By Board Id',\r\n    props<{ boardId: string }>()\r\n)"
                },
                {
                    "name": "getTaskListsByBoardIdFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task List] Get Task Lists By Board Id Failure',\r\n    props<{ error: any }>()\r\n)"
                },
                {
                    "name": "getTaskListsByBoardIdSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task List] Get Task Lists By Board Id Success',\r\n    props<{ taskLists: BoardTaskList[] }>()\r\n)"
                },
                {
                    "name": "updateTaskList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task List] Update Task List',\r\n    props<{ taskList: BoardTaskList }>()\r\n)"
                },
                {
                    "name": "updateTaskListFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task List] Update Task List Failure',\r\n    props<{ error: any }>()\r\n)"
                },
                {
                    "name": "updateTaskListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Task List] Update Task List Success',\r\n    props<{ taskList: BoardTaskList }>()\r\n)"
                }
            ],
            "src/environment/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environment/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  api: 'https://localhost:5002',\r\n  dateFormat: 'EEE, d MMM YYYY',\r\n  localStorageUser: 'USER_ID',\r\n  mainNameStyleBegin: '<span style=\"color: black;\">⦿ ',\r\n  mainNameStyleEnd: '</span>',\r\n  secondaryNameStyleBegin: '<span style=\"font-weight: 600;\">',\r\n  secondaryNameStyleEnd: '</span>',\r\n  maxNameLength: 20,\r\n  maxNameLengthReplacingString: '...'\r\n}"
                }
            ],
            "src/environment/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environment/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  api: 'https://localhost:44300',\r\n  dateFormat: 'EEE, d MMM YYYY',\r\n  localStorageUser: 'USER_ID',\r\n  mainNameStyleBegin: '<span style=\"color: black;\">⦿ ',\r\n  mainNameStyleEnd: '</span>',\r\n  secondaryNameStyleBegin: '<span style=\"font-weight: 600;\">',\r\n  secondaryNameStyleEnd: '</span>',\r\n  maxNameLength: 20,\r\n  maxNameLengthReplacingString: '...'\r\n}"
                }
            ],
            "src/app/modules/task-board/store/tasks/tasks.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/tasks.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskListState",
                    "defaultValue": "{\r\n    taskLists: [],\r\n    error: null\r\n}"
                },
                {
                    "name": "taskReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/tasks.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialState,\r\n    on(getTaskListsByBoardIdSuccess, (state, { taskLists }) => ({\r\n        ...state,\r\n        taskLists,\r\n        error: null\r\n    })),\r\n    on(getTaskListsByBoardIdFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(createTaskListSuccess, (state, { taskList }) => ({\r\n        ...state,\r\n        taskLists: [...state.taskLists, taskList],\r\n        error: null\r\n    })),\r\n    on(createTaskListFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(updateTaskListSuccess, (state, { taskList }) => ({\r\n        ...state,\r\n        taskLists: state.taskLists.map(list => list.id === taskList.id ? taskList : list),\r\n        error: null\r\n    })),\r\n    on(updateTaskListFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(deleteTaskListSuccess, (state, { listId }) => ({\r\n        ...state,\r\n        taskLists: state.taskLists.filter(taskList => taskList.id !== listId),\r\n        error: null\r\n    })),\r\n    on(deleteTaskListFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(createTaskSuccess, (state, { task }) => {\r\n        const taskListIndex = state.taskLists.findIndex(list => list.id === task.boardTaskListId);\r\n        if (taskListIndex >= 0) {\r\n            const updatedTaskList = {\r\n                ...state.taskLists[taskListIndex],\r\n                boardTasks: [...state.taskLists[taskListIndex].boardTasks, task]\r\n            };\r\n            const updatedTaskLists = [...state.taskLists];\r\n            updatedTaskLists[taskListIndex] = updatedTaskList;\r\n            return {\r\n                ...state,\r\n                taskLists: updatedTaskLists,\r\n                error: null\r\n            };\r\n        }\r\n        return state;\r\n    }),\r\n    on(createTaskFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(updateTask, (state, { prevTaskList, task, posIndex }) => {\r\n        const taskListIndex = state.taskLists.findIndex(list => list.id === task.boardTaskListId);\r\n        if (taskListIndex === -1) {\r\n            return state;\r\n        }\r\n        const currentTaskList = state.taskLists[taskListIndex];\r\n        if (currentTaskList.id === prevTaskList.id) {\r\n            return updateTaskInSameList(task, state, posIndex);\r\n        } else {\r\n            return updateTaskInDifferentList(task, state, posIndex, prevTaskList);\r\n        }\r\n    }),\r\n    on(updateTaskFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    })),\r\n    on(deleteTaskSuccess, (state, { taskId }) => {\r\n        const taskListIndex = state.taskLists.findIndex(list => list.boardTasks.some(task => task.id === taskId));\r\n        if (taskListIndex >= 0) {\r\n            const updatedTaskList = {\r\n                ...state.taskLists[taskListIndex],\r\n                boardTasks: state.taskLists[taskListIndex].boardTasks.filter(task => task.id !== taskId)\r\n            };\r\n            const updatedTaskLists = [...state.taskLists];\r\n            updatedTaskLists[taskListIndex] = updatedTaskList;\r\n            return {\r\n                ...state,\r\n                taskLists: updatedTaskLists,\r\n                error: null\r\n            };\r\n        }\r\n        return state;\r\n    }),\r\n    on(deleteTaskFailure, (state, { error }) => ({\r\n        ...state,\r\n        error\r\n    }))\r\n)"
                }
            ],
            "src/app/modules/task-board/store/board/board.selector.ts": [
                {
                    "name": "selectAllBoards",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectBoardState,\r\n    (state: BoardState) => state.boards\r\n)"
                },
                {
                    "name": "selectBoardError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectBoardState,\r\n    (state: BoardState) => state.error\r\n)"
                },
                {
                    "name": "selectBoardState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/board/board.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<BoardState>('boards')"
                }
            ],
            "src/app/modules/task-board/store/tasks/tasks.selector.ts": [
                {
                    "name": "selectAllTaskLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/tasks.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectTaskListState,\r\n    (state: TaskListState) => state.taskLists\r\n)"
                },
                {
                    "name": "selectTaskError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/tasks.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectTaskListState,\r\n    (state: TaskListState) => state.error\r\n)"
                },
                {
                    "name": "selectTaskListState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task-board/store/tasks/tasks.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<TaskListState>('tasks')"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/modules/shared/models/board.model.ts": [
                {
                    "name": "copyBoardValues",
                    "file": "src/app/modules/shared/models/board.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dest",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "copied",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "dest",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "copied",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultBoard",
                    "file": "src/app/modules/shared/models/board.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/modules/shared/models/board-task-list.model.ts": [
                {
                    "name": "copyTaskListValues",
                    "file": "src/app/modules/shared/models/board-task-list.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dest",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "copied",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "dest",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "copied",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultBoardTaskList",
                    "file": "src/app/modules/shared/models/board-task-list.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/modules/shared/models/board-task.model.ts": [
                {
                    "name": "copyTaskValues",
                    "file": "src/app/modules/shared/models/board-task.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dest",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toCopy",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "dest",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toCopy",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultBoardTask",
                    "file": "src/app/modules/shared/models/board-task.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/modules/task-board/store/tasks/tasks.reducer.ts": [
                {
                    "name": "updateTaskInDifferentList",
                    "file": "src/app/modules/task-board/store/tasks/tasks.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "TaskListState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "posIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "TaskListState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prevTaskList",
                            "type": "BoardTaskList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTaskInSameList",
                    "file": "src/app/modules/task-board/store/tasks/tasks.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "TaskListState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "posIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "BoardTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "TaskListState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/modules/shared/enums/activity-type.enum.ts": [
                {
                    "name": "ActivityType",
                    "childs": [
                        {
                            "name": "Create",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "Update",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Delete",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/modules/shared/enums/activity-type.enum.ts"
                }
            ],
            "src/app/modules/shared/enums/priority.enum.ts": [
                {
                    "name": "Priority",
                    "childs": [
                        {
                            "name": "Low",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "Medium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "High",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/modules/shared/enums/priority.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "CoreModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/modules/core/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "MainViewComponent",
                        "children": [
                            {
                                "path": ":boardId",
                                "component": "BoardComponent"
                            },
                            {
                                "path": "",
                                "component": "BoardListComponent"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/modules/action-history/components/activity-popup/activity-history/activity-history.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActivityHistoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/action-history/components/activity-popup/activity/activity.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActivityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/action-history/configs/activity-format-config/activity-format-config.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACTIVITY_FORMAT_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/action-history/configs/activity-format-config/activity-format-config.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APP_ACTIVITY_FORMAT_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/action-history/configs/activity-format-config/activity-format-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActivityFormatConfig",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/action-history/services/acitvity-service/activity-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivityControllerService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/action-history/services/acitvity-service/activity-controller.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateActivityData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/action-history/services/acitvity-service/activity-service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ActivityService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/action-history/services/activity-description-formatter/activity-description-formatter-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivityDescriptionFormatterService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/action-history/services/activity-description-formatter/activity-description-formatter-service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActivityDescriptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/action-history/services/activity-description-formatter/activity-description-formatter-service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskUpdateActivityData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/action-history/services/activity-description-formatter/activity-description-manager.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivityDescriptionManagerService",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/action-history/util/activity-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActivityPopupData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/action-history/util/activity-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskActivityData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/action-history/util/activity-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskListActivityData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/components/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/core/components/main-view/main-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/configs/date-config/date-config.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APP_DATE_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/configs/date-config/date-config.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATE_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/configs/date-config/date-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/configs/user-config/user-config.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APP_USER_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/configs/user-config/user-config.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/configs/user-config/user-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/models/board-activity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoardActivity",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/models/board-task-activity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoardTaskActivity",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/models/board-task-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoardTaskList",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/models/board-task-list.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "copyTaskListValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/models/board-task-list.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDefaultBoardTaskList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/models/board-task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoardTask",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/models/board-task.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "copyTaskValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/models/board-task.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDefaultBoardTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/models/board.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Board",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/models/board.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "copyBoardValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/models/board.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDefaultBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/api/acitvity-api/activity-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivityApiService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/api/base-api/base-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BaseApiService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/api/board-api/board-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardApiService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/api/task-acitvity-api/task-activity-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskActivityApiService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/api/task-api/task-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskApiService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/api/task-list-api/task-list-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskListApiService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/api/user-api/user-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserApiService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/date-formater/date-formater.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateFormaterService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/date-formater/standart-date-formater.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StandartDateFormaterService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/dev-mode/dev-mode.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DevModeService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/error-handler/custom-error-handler.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomErrorHandler",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/error-handler/error-handler.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorHandlerService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/local-storage/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/priority-convertor/priority-convertor.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PriorityConvertorService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/redirector/redirector-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RedirectorContollerService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/redirector/redirector.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RedirectorService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/string-format/string-format.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StringFormaterService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/url-definer/url-definer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "URLDefinerService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/url-definer/url-definer.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "URLDefiner",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/validators/date/custrom-validators.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomDatePickerValidatorService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/shared/services/validators/date/date-validators.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateValidator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/components/boards/board-item/board-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/components/boards/board-list/board-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/components/boards/board-manager/board-manager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardManagerComponent",
                "coveragePercent": 7,
                "coverageCount": "1/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/components/boards/board/board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/components/tasks/task-info/task-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskInfoComponent",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/components/tasks/task-list-manager/task-list-manager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListManagerComponent",
                "coveragePercent": 7,
                "coverageCount": "1/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/components/tasks/task-list/task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListComponent",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/components/tasks/task-manager/task-manager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskManagerComponent",
                "coveragePercent": 5,
                "coverageCount": "1/20",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/components/tasks/task/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/services/board-service/board-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardControllerService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/services/board-service/board-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/services/task-list-service/task-list-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskListControllerService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/services/task-list-service/task-list-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskListService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/services/task-service/task-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskControllerService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/services/task-service/task-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createBoardFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBoardFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBoardsByUserId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBoardsByUserIdFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBoardsByUserIdSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateBoardFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoardState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "boardReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllBoards",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBoardError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/board/board.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBoardState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/task-board.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskBoardState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createTaskList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createTaskListFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createTaskListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTaskList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTaskListFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTaskListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTaskListsByBoardId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTaskListsByBoardIdFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTaskListsByBoardIdSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTaskList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTaskListFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task-list/task-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTaskListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task-list/task-list.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskListEffect",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createTaskFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createTaskSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTaskFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTaskSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTaskFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task/task.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTaskSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/task/task.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskEffect",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/tasks.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskListState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/tasks.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "updateTaskInDifferentList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/tasks.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "updateTaskInSameList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/tasks.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/tasks.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "taskReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/tasks.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllTaskLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/tasks.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTaskError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/store/tasks/tasks.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTaskListState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/util/task-list-popup-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskListsPopupData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task-board/util/task-popup-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskPopupData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environment/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environment/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/default/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/default/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/default/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/default/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockMatDialogRef",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MockActivityService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MockBoardService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MockRedirectorService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MockTaskListService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MockTaskService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allMockTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "currentBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockBoard2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockBoardLotOfText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockBoards",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockTaskActivities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockTaskList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockTaskListLotOfText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockTaskLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task-board/tasks/mockServices.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockTaskLotOfText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}